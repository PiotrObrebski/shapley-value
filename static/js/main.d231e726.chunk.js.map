{"version":3,"sources":["components/calculators/calculator-function-definition/calculator-function-definition.tsx","utilities/calculation-functions.ts","redux/actionTypes.ts","redux/actions.ts","components/calculators/calculator-coalition-structures/coalition-structures-input.tsx","components/shared-components/number-of-players-input.tsx","components/shared-components/display-generated-values.tsx","components/calculators/calculator-coalition-structures/calculator-coalition-structures.tsx","components/calculators/calculator-mc-nets/add-mc-nets-rule/add-mc-nets-rule.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/player-group/players-group.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/mc-nets-rule.tsx","components/calculators/calculator-mc-nets/calculator-mc-nets.tsx","components/calculators/calculator-graph/config.js","components/calculators/calculator-graph/graph.jsx","utilities/calculationg-functions.ts","components/calculators/calculator-graph/graph-input-section.tsx","components/calculators/calculator-graph/information-section.tsx","components/calculators/calculator-graph/calculator-graph.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","index.tsx"],"names":["CalculatorFunctionDefinition","className","indexOfArrayInArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","factorial","n","r","calculateAllShapleyValues","players","coalitions","funcOfCoalitions","shapleyValues","player","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","length","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","generateCoalitionOfN","event","Array","from","v","k","calculateMCNetsShapleyValues","rules","nrOfPlayers","values","fill","rule","positive","negative","numberOfPositivePlayers","positivePlayers","numberOfNegativePlayers","negativePlayers","positivePlayersContribution","value","negativePlayersContribution","calculateNegativePlayersMarginalContribution","parseFloat","ActionTypes","SET_COALITIONS_NUMBER_OF_PLAYERS","SET_COALITIONS_COALITIONS","SET_COALITIONS_FUNCTION_OF_COALITIONS","SET_COALITIONS_SHAPLEY_VALUES","SET_MCNETS_NUMBER_OF_PLAYERS","SET_MCNETS_RULES","SET_MCNETS_SHAPLEY_VALUES","SET_GRAPH_GAME_DEFINITION","setCoalitionsFunctionOfCoalitions","functionOfCoalitions","type","payload","setMCNetsNumberOfPlayers","nrOfPlayes","setMCNetsRules","CoalitionStructuresInput","connect","state","aplication","dispatch","props","dataSource","map","key","toString","columns","title","dataIndex","align","render","text","record","defaultValue","onChange","tmpFunction","bordered","size","pagination","scroll","y","column","NumberOfPlayersForm","numberOfPlayers","message","maxValue","handleNumberOfPlayesChange","labelCol","span","wrapperCol","layout","Item","labelAlign","label","min","max","DisplayGeneratedValues","listShapleyValues","tableMaxHeight","shapleuValue","playerNumber","CalculatorCoalitionStructures","setCoalitionsNumberOfplayers","setCoalitionsCoalitions","setCoalitionsShapleyValues","setActiveTabKey","useState","grandCoalition","setGrandCalition","undefined","setMessage","useEffect","newCoalitions","reduce","subsets","concat","set","sort","a","b","unshift","justify","xs","sm","md","lg","xl","cssClass","onFileLoaded","data","newFunctionOfCoalitions","row","pop","currentCoalition","slice","inputName","parserOptions","header","dynamicTyping","skipEmptyLines","onClick","gameDefinition","csvContent","e","join","window","open","encodeURI","disabled","newRules","newNumberOfPlayers","highestPlayerInCoalition","Math","String","AddMCNetsRule","mcNets","flex","shape","icon","PlusOutlined","PlayersGroup","options","Group","style","width","MCNetsRule","plainOptions","wrap","placeholder","tmpRules","checkedValues","filter","val","MinusOutlined","CalculatorMCNets","setMCNetsShapleyValues","activeKeys","setActiveKeys","activeKey","keys","Panel","_rule","showArrow","forceRender","collapsible","gutter","tmpActiveKeys","playerShape","viewBox","id","cx","cy","height","xmlns","EdgeTypes","selfEdge","shapeId","normalEdge","NodeSubtypes","NodeTypes","typeText","sample","edges","nodes","x","Graph","graph","setGraph","selected","setSelected","copied","setCopied","setPlayers","playersId","setPlayersId","refElement","useRef","allowMultiSelect","showGraphControls","gridSize","gridDotSize","renderNodeText","ref","nodeKey","nodeTypes","nodeConfig","nodeSubtypes","edgeTypes","onSelectNode","viewNode","get","document","getElementById","target","click","onCreateNode","tmpGraph","newPlayerNr","nums","len","i","pos","abs","Infinity","firstMissingPositive","element","onUpdateNode","searchNode","findIndex","node","onDeleteNode","nodeId","nodeArr","newEdges","edge","source","onSelectEdge","viewEdge","onCreateEdge","sourceViewNode","targetViewNode","handleText","valueForEdge","viewEdgeRealSource","split","at","viewEdgeRealTarget","isConnectionDefined","some","edgeSourceRealTitle","edgeTargetRealTitle","onSwapEdge","searchEdge","JSON","parse","stringify","onDeleteEdge","onCopySelected","console","warn","onPasteSelected","newNode","readOnly","GraphInputSection","setValueForEdge","InformationSection","CalculatorGraph","TabPane","Tabs","AppBody","activeTabKey","onTabClick","centered","tab","AppHeader","subTitle","initialState","action","combineReducers","createStore","rootReducer","App","store","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.d231e726.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const CalculatorFunctionDefinition = (): JSX.Element => {\r\n  return <div className=\"calculator-coalition-definition\"></div>;\r\n};\r\n\r\nexport default CalculatorFunctionDefinition;\r\n","import _ from \"underscore\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (arr: Array<number>) =>\r\n  arr\r\n    .reduce(\r\n      (subsets: number[][], value: number) =>\r\n        subsets.concat(subsets.map((set) => [...set, value])),\r\n      [[]]\r\n    )\r\n    .sort((a, b) => a.length - b.length);\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n        indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ] ?? 0;\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - (valueOfCoalitionWithoutPlayer ?? 0)) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number) =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\n","export const ActionTypes = {\r\n  SET_COALITIONS_NUMBER_OF_PLAYERS: \"SET_COALITIONS_NUMBER_OF_PLAYERS\",\r\n  SET_COALITIONS_COALITIONS: \"SET_COALITIONS_COALITIONS\",\r\n  SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n    \"SET_COALITIONS_FUNCTION_OF_COALITIONS\",\r\n  SET_COALITIONS_SHAPLEY_VALUES: \"SET_COALITIONS_SHAPLEY_VALUES\",\r\n  SET_MCNETS_NUMBER_OF_PLAYERS: \"SET_MCNETS_NUMBER_OF_PLAYERS\",\r\n  SET_MCNETS_RULES: \"SET_MCNETS_RULES\",\r\n  SET_MCNETS_SHAPLEY_VALUES: \"SET_MCNETS_SHAPLEY_VALUES\",\r\n  SET_GRAPH_GAME_DEFINITION: \"SET_GRAPH_GAME_DEFINITION\",\r\n};\r\n\r\nexport default ActionTypes;\r\n","import ActionTypes from \"./actionTypes\";\r\n\r\nexport const setCoalitionsNumberOfplayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setCoalitionsCoalitions = (\r\n  coalitions: number[][]\r\n): {\r\n  type: string;\r\n  payload: number[][];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_COALITIONS,\r\n  payload: coalitions,\r\n});\r\n\r\nexport const setCoalitionsFunctionOfCoalitions = (\r\n  functionOfCoalitions: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS,\r\n  payload: functionOfCoalitions,\r\n});\r\n\r\nexport const setCoalitionsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setMCNetsNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => {\r\n  return {\r\n    type: ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS,\r\n    payload: nrOfPlayes,\r\n  };\r\n};\r\n\r\nexport const setMCNetsRules = (\r\n  rules: IMCNetsRule[]\r\n): {\r\n  type: string;\r\n  payload: IMCNetsRule[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_RULES,\r\n  payload: rules,\r\n});\r\n\r\nexport const setMCNetsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n","import React from 'react'\r\nimport { Table, InputNumber } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCoalitionsFunctionOfCoalitions } from \"../../../redux/actions\";\r\n\r\nexport interface ICoalitionStructuresInputProps {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => void;\r\n}\r\n\r\nexport const CoalitionStructuresInputNotConnected = (\r\n  props: ICoalitionStructuresInputProps\r\n): JSX.Element => {\r\n  const {\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const dataSource = coalitions?.map((coalition, index) => ({\r\n    key: index,\r\n    coalition: coalition.length ? coalition.toString() : \"Ø\",\r\n    value: 0,\r\n  }));\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Coalition',\r\n      dataIndex: 'coalition',\r\n      key: 'coalition',\r\n      align: 'right' as 'left' | 'right' | 'center',\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (text: string, record: any) => (\r\n        <InputNumber\r\n          value={functionOfCoalitions?.[record.key]}\r\n          defaultValue={0}\r\n          onChange={(event: number) => {\r\n            const tmpFunction = functionOfCoalitions\r\n              ? [...functionOfCoalitions]\r\n              : [];\r\n            tmpFunction[record.key] = event;\r\n            setCoalitionsFunctionOfCoalitions(tmpFunction);\r\n          }}\r\n        />\r\n      ),\r\n      align: \"left\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"coalition-structures-input\"\r\n    >\r\n      {columns.map((column) => (\r\n        <Column {...column} />\r\n      ))}\r\n    </Table>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: {\r\n  aplication: Store;\r\n}): {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n} => {\r\n  return {\r\n    coalitions: state.aplication.coalitions?.coalitions,\r\n    functionOfCoalitions: state.aplication.coalitions?.functionOfCoalitions,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number[] }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CoalitionStructuresInput = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CoalitionStructuresInputNotConnected);\r\nexport default CoalitionStructuresInput;\r\n","import React from 'react'\r\nimport { Form, InputNumber } from \"antd\"\r\nexport interface INumberOfPlayersForm {\r\n  numberOfPlayers?: number\r\n  message?: string\r\n  maxValue: number\r\n  handleNumberOfPlayesChange?: (event: number) => void\r\n}\r\nexport const NumberOfPlayersForm = (props: INumberOfPlayersForm): JSX.Element => {\r\n  const { numberOfPlayers, message, maxValue, handleNumberOfPlayesChange } = props\r\n  return <Form\r\n    labelCol={{ span: 12 }}\r\n    wrapperCol={{ span: 12 }}\r\n    layout=\"horizontal\"\r\n    size=\"middle\"\r\n    className=\"number-of-players-input\"\r\n  >\r\n    <div className=\"error-message\">{message}</div>\r\n    <Form.Item labelAlign=\"right\" label=\"Number of players\">\r\n      <InputNumber\r\n        min={0}\r\n        max={maxValue - 1}\r\n        defaultValue={0}\r\n        value={numberOfPlayers}\r\n        onChange={handleNumberOfPlayesChange}\r\n      />\r\n    </Form.Item>\r\n  </Form>\r\n}\r\n\r\nexport default NumberOfPlayersForm","import React from 'react'\r\nimport { Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface IDisplayGeneratedValuesProps {\r\n  listShapleyValues: number[]\r\n  tableMaxHeight?: number\r\n}\r\n\r\nexport const DisplayGeneratedValues = (props: IDisplayGeneratedValuesProps): JSX.Element => {\r\n  const { listShapleyValues, tableMaxHeight } = props\r\n  const dataSource = listShapleyValues.map((shapleuValue, index) => {\r\n    return {\r\n      key: index,\r\n      value: shapleuValue,\r\n      playerNumber: index + 1\r\n    }\r\n  })\r\n\r\n  const columns = [{\r\n    title: 'Player number',\r\n    dataIndex: 'playerNumber',\r\n    key: 'playerNumber',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }, {\r\n    title: 'Player Shapley Value',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }]\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: tableMaxHeight ?? 300 }}\r\n      className=\"display-generated-values\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default DisplayGeneratedValues\r\n","import { Button, Col, Row } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./calculator-coalition-structures.css\";\r\nimport {\r\n  calculateAllShapleyValues,\r\n  generateCoalitions,\r\n  generateCoalitionOfN,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport CoalitionStructuresInput from \"./coalition-structures-input\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setCoalitionsShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\n\r\ninterface ICalculatorCoalitionStructuresProps extends CoalitionsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setCoalitionsShapleyValues: (content: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  };\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nconst CalculatorCoalitionStructuresNotConnected = (\r\n  props: ICalculatorCoalitionStructuresProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n    setCoalitionsShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n  } = props;\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>(\r\n    nrOfPlayes ? generateCoalitionOfN(nrOfPlayes) : []\r\n  );\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const maxValue = 10;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < maxValue) {\r\n      setCoalitionsNumberOfplayers(event);\r\n      setGrandCalition(generateCoalitionOfN(event));\r\n      setCoalitionsFunctionOfCoalitions(Array(2 ** event).fill(0));\r\n      setCoalitionsShapleyValues([]);\r\n      setMessage(undefined);\r\n    } else setMessage(\"Number of coalition members exceded!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      const newCoalitions = generateCoalitions(grandCoalition);\r\n      newCoalitions[0].unshift(0);\r\n      setCoalitionsCoalitions(newCoalitions);\r\n    }\r\n  }, [grandCoalition, setCoalitionsCoalitions]);\r\n\r\n  const handleForce = (data: any) => {\r\n    const newCoalitions: number[][] = [];\r\n    const newFunctionOfCoalitions: number[] = [];\r\n    let numberOfPlayers = 0;\r\n\r\n    data.forEach((row: number[]) => {\r\n      row.pop();\r\n      const currentCoalition = row.slice(0, -1);\r\n      numberOfPlayers =\r\n        currentCoalition.length > numberOfPlayers\r\n          ? currentCoalition.length\r\n          : numberOfPlayers;\r\n      newCoalitions.push(currentCoalition);\r\n      newFunctionOfCoalitions.push(row.slice(-1).pop() ?? 0);\r\n    });\r\n\r\n    setCoalitionsNumberOfplayers(numberOfPlayers);\r\n    setCoalitionsCoalitions(newCoalitions);\r\n    setCoalitionsFunctionOfCoalitions(newFunctionOfCoalitions);\r\n  };\r\n\r\n  const handleDownloadGameDefinition = () => {\r\n    const gameDefinition: number[][] = coalitions?.map((coalition, index) => {\r\n      return [...coalition, functionOfCoalitions?.[index] ?? 0];\r\n    }) ?? [[0]];\r\n    // gameDefinition[0].unshift(0);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,\" +\r\n      gameDefinition?.map((e) => e.join(\",\") + \",\").join(\"\\n\");\r\n\r\n    window.open(encodeURI(csvContent));\r\n  };\r\n\r\n  const translateToMCNets = () => {\r\n    const newRules: IMCNetsRule[] = [];\r\n    let newNumberOfPlayers = 0;\r\n    functionOfCoalitions?.forEach((value, index) => {\r\n      if (value) {\r\n        const highestPlayerInCoalition = Math.max(\r\n          ...(coalitions?.[index] ?? [])\r\n        );\r\n        newNumberOfPlayers =\r\n          highestPlayerInCoalition > newNumberOfPlayers\r\n            ? highestPlayerInCoalition\r\n            : newNumberOfPlayers;\r\n        newRules.push({\r\n          positivePlayers: coalitions?.[index]?.map(String) ?? [],\r\n          negativePlayers: [],\r\n          value: value,\r\n        });\r\n      }\r\n    });\r\n    setMCNetsNumberOfPlayers(newNumberOfPlayers);\r\n    setMCNetsRules(newRules);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-structures\">\r\n      <NumberOfPlayersForm\r\n        numberOfPlayers={nrOfPlayes}\r\n        maxValue={maxValue}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      <Row justify=\"center\">\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <CoalitionStructuresInput />\r\n          <div className=\"upload\">\r\n            <CSVReader\r\n              cssClass=\"react-csv-input\"\r\n              label={<span>Upload game definition from .csv file </span>}\r\n              onFileLoaded={handleForce}\r\n              inputName=\"input2\"\r\n              parserOptions={{\r\n                header: false,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"download\">\r\n            <Button onClick={handleDownloadGameDefinition}>\r\n              Download Game Definition\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n        <Col className=\"buttons-col\" xs={24} sm={24} md={24} lg={4} xl={4}>\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={() =>\r\n              setCoalitionsShapleyValues(\r\n                calculateAllShapleyValues(\r\n                  grandCoalition,\r\n                  coalitions ?? [],\r\n                  functionOfCoalitions ?? []\r\n                )\r\n              )\r\n            }\r\n          >\r\n            Generate Shapley Values\r\n          </Button>\r\n          <Button\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={translateToMCNets}\r\n          >\r\n            Translate to MC Nets\r\n          </Button>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): CoalitionsGame => {\r\n  const { nrOfPlayes, coalitions, functionOfCoalitions, shapleyValues } =\r\n    state.aplication.coalitions || {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    coalitions: coalitions,\r\n    functionOfCoalitions: functionOfCoalitions,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n    setCoalitionsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setCoalitionsShapleyValues(shapleyValues)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n  };\r\n};\r\nexport const CalculatorCoalitionStructures = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorCoalitionStructuresNotConnected);\r\nexport default CalculatorCoalitionStructures;\r\n","import React from 'react'\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\nimport { Button, Col, Row } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { setMCNetsRules } from \"../../../../redux/actions\"\r\n\r\nexport interface IAddMCNetsRuleProps {\r\n  rules?: IMCNetsRule[]\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void\r\n}\r\n\r\nexport const AddMCNetsRuleNotConnected = (props: IAddMCNetsRuleProps): JSX.Element => {\r\n  const { rules, setMCNetsRules } = props\r\n\r\n  return (\r\n    <div className=\"add-mc-nets-rule\">\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col flex=\"64px\">Add Rule</Col>\r\n        <Col flex=\"40px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() =>\r\n              setMCNetsRules([\r\n                ...(rules ?? []),\r\n                {\r\n                  positivePlayers: [],\r\n                  negativePlayers: [],\r\n                  value: 0\r\n                }])\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  return {\r\n    rules: state.aplication.mcNets?.rules\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) =>\r\n      dispatch(setMCNetsRules(rules))\r\n  };\r\n};\r\n\r\nexport const AddMCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddMCNetsRuleNotConnected);\r\n\r\nexport default AddMCNetsRule","import React from 'react'\r\nimport { Checkbox } from \"antd\"\r\nimport './player-group.css'\r\n\r\ninterface IPlayersGroupprops {\r\n  options: string[]\r\n  value: string[]\r\n  onChange: (checkedValues: any) => void\r\n}\r\n\r\nexport const PlayersGroup = (props: IPlayersGroupprops) => {\r\n  const { options, value, onChange } = props\r\n  return (\r\n    <div className=\"player-group\">\r\n      <Checkbox.Group options={options} value={value} onChange={onChange} style={{ width: `calc(${options.length} * 52px)` }} />\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { MinusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, InputNumber, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { generateCoalitionOfN } from \"../../../../utilities/calculation-functions\";\r\nimport \"./mc-nets-rule.css\";\r\nimport { PlayersGroup } from \"./player-group/players-group\";\r\nexport interface IMCNetsRuleProps {\r\n  index: number;\r\n  nrOfPlayes?: number;\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\nexport const MCNetsRuleNotConnected = (\r\n  props: IMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { index, nrOfPlayes, rules, setMCNetsRules } = props;\r\n  const onPositiveChange = (checkedValues: string[]) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].positivePlayers = checkedValues;\r\n    tmpRules[index].negativePlayers = tmpRules[index].negativePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n  const onNegativeChange = (checkedValues: any) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].negativePlayers = checkedValues;\r\n    tmpRules[index].positivePlayers = tmpRules[index].positivePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n\r\n  const plainOptions = generateCoalitionOfN(nrOfPlayes ?? 0).map(String);\r\n  return (\r\n    <div className=\"mc-nets-rule\">\r\n      <Row align=\"middle\" wrap={false} justify=\"center\">\r\n        <Col flex=\"100px\" className=\"mc-nets-rule-name\">\r\n          {`Rule nr ${index}`}\r\n          <InputNumber\r\n            placeholder=\"Value\"\r\n            onChange={(event) => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules[index].value = event as number;\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n            value={rules?.[index].value}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <div className=\"player-group-name\">Positive Players</div>\r\n          <PlayersGroup\r\n            onChange={onPositiveChange}\r\n            value={rules?.[index].positivePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <div className=\"player-group-name\">Negative Players</div>\r\n          <PlayersGroup\r\n            onChange={onNegativeChange}\r\n            value={rules?.[index].negativePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"32px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<MinusOutlined />}\r\n            onClick={() => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules.splice(index, 1);\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const MCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MCNetsRuleNotConnected);\r\n\r\nexport default MCNetsRule;\r\n","import { Button, Col, Collapse, Row } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { calculateMCNetsShapleyValues } from \"../../../utilities/calculation-functions\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport { AddMCNetsRule } from \"./add-mc-nets-rule/add-mc-nets-rule\";\r\nimport { MCNetsRule } from \"./mc-nets-rule/mc-nets-rule\";\r\nimport \"./calculator-mc-nets.css\";\r\nimport {\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsShapleyValues,\r\n} from \"../../../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface ICalculatorMCNetsProps extends McNetsGame {\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n}\r\n\r\nexport const CalculatorMCNetsNotConnected = (\r\n  props: ICalculatorMCNetsProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsShapleyValues,\r\n  } = props;\r\n  const handleNumberOfPlayesChange = (event: number) =>\r\n    setMCNetsNumberOfPlayers(event);\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\", \"2\"]);\r\n  return (\r\n    <div className=\"calculator-mc-nets\">\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Game Definition\" key=\"1\">\r\n          <Row justify=\"center\">\r\n            <Col span={12}>\r\n              <NumberOfPlayersForm\r\n                maxValue={20}\r\n                numberOfPlayers={nrOfPlayes}\r\n                handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <AddMCNetsRule />\r\n            </Col>\r\n          </Row>\r\n\r\n          <div className=\"mc-nets-rules\">\r\n            {rules?.map((_rule, index) => {\r\n              return <MCNetsRule key={index} index={index} />;\r\n            })}\r\n          </div>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"\"\r\n          key=\"2\"\r\n          showArrow={false}\r\n          forceRender={true}\r\n          collapsible=\"disabled\"\r\n          className=\"generate-panel\"\r\n        >\r\n          <Row justify=\"center\" gutter={32}>\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={!nrOfPlayes}\r\n              className=\"generate-button\"\r\n              onClick={() => {\r\n                setMCNetsShapleyValues(\r\n                  calculateMCNetsShapleyValues(rules ?? [], nrOfPlayes ?? 0)\r\n                );\r\n                const tmpActiveKeys = activeKeys.includes(\"3\")\r\n                  ? activeKeys\r\n                  : [...activeKeys, \"3\"];\r\n                setActiveKeys(tmpActiveKeys);\r\n              }}\r\n            >\r\n              Calculate\r\n            </Button>\r\n          </Row>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"Shapley Values\"\r\n          key=\"3\"\r\n          className=\"values-panel\"\r\n        >\r\n          <DisplayGeneratedValues\r\n            listShapleyValues={shapleyValues ?? []}\r\n            tableMaxHeight={200}\r\n          />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules, shapleyValues } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | IMCNetsRule[];\r\n  }) => any\r\n): {\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setMCNetsShapleyValues(shapleyValues)),\r\n  };\r\n};\r\nexport const CalculatorMCNets = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorMCNetsNotConnected);\r\n\r\nexport default CalculatorMCNets;\r\n","// @flow\r\n/*\r\n  Copyright(c) 2018 Uber Technologies, Inc.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n          http://www.apache.org/licenses/LICENSE-2.0\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n/*\r\n  Example config for GraphView component\r\n*/\r\nimport React from \"react\";\r\n\r\nexport const NODE_KEY = \"id\"; // Key used to identify nodes\r\n\r\n// These keys are arbitrary (but must match the config)\r\n// However, GraphView renders text differently for empty types\r\n// so this has to be passed in if that behavior is desired.\r\nexport const PLAYER_TYPE = \"player\";\r\nexport const SELF_EDGE = \"selfEdge\";\r\nexport const NORMAL_EDGE = \"normalEdge\";\r\n\r\nexport const nodeTypes = [\r\n  PLAYER_TYPE,\r\n];\r\nexport const edgeTypes = [SELF_EDGE, NORMAL_EDGE];\r\n\r\nconst playerShape = (\r\n  <symbol viewBox=\"0 0 200 200\" id=\"player\">\r\n    <circle cx=\"100\" cy=\"100\" r=\"50\" />\r\n    <g>\r\n      <foreignObject width=\"100%\" height=\"100%\">\r\n        <div xmlns=\"http://www.w3.org/1999/xhtml\">test</div>\r\n      </foreignObject>\r\n    </g>\r\n  </symbol>\r\n);\r\n\r\nconst selfEdge = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\">\r\n    <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\" />\r\n  </symbol>\r\n);\r\n\r\nconst normalEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"normalEdge\">\r\n    {/* <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    /> */}\r\n  </symbol>\r\n);\r\n\r\nexport default {\r\n  EdgeTypes: {\r\n    selfEdge: {\r\n      shape: selfEdge,\r\n      shapeId: \"#selfEdge\",\r\n    },\r\n    normalEdge: {\r\n      shape: normalEdgeShape,\r\n      shapeId: \"#normalEdge\"\r\n    },\r\n  },\r\n  NodeSubtypes: {},\r\n  NodeTypes: {\r\n    player: {\r\n      shape: playerShape,\r\n      shapeId: \"#player\",\r\n      typeText: \"Player\"\r\n    }\r\n  }\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { firstMissingPositive } from \"../../../utilities/calculationg-functions\";\r\nimport {\r\n  GraphView, // required\r\n} from \"react-digraph\";\r\nimport {\r\n  default as nodeConfig,\r\n  PLAYER_TYPE,\r\n  NODE_KEY,\r\n  NORMAL_EDGE,\r\n  SELF_EDGE,\r\n} from \"./config\";\r\n\r\nimport { get } from \"lodash\";\r\n\r\nconst sample = {\r\n  edges: [],\r\n  nodes: [\r\n    {\r\n      id: \"1\",\r\n      title: 1,\r\n      type: PLAYER_TYPE,\r\n      x: 300,\r\n      y: 300,\r\n    },\r\n  ],\r\n};\r\nconst separatorString = \"-copy-of-\";\r\nexport const Graph = (props) => {\r\n  const [graph, setGraph] = useState(sample);\r\n  const [selected, setSelected] = useState({});\r\n  const [copied, setCopied] = useState({});\r\n  const [players, setPlayers] = useState(sample.nodes.length);\r\n  const [playersId, setPlayersId] = useState(sample.nodes.length);\r\n  const refElement = useRef();\r\n\r\n  function getNodeIndex(searchNode) {\r\n    return graph.nodes.findIndex((node) => {\r\n      return node[NODE_KEY] === searchNode[NODE_KEY];\r\n    });\r\n  }\r\n\r\n  // Helper to find the index of a given edge\r\n  const getEdgeIndex = (searchEdge) => {\r\n    return graph.edges.findIndex((edge) => {\r\n      return (\r\n        edge.source === searchEdge.source && edge.target === searchEdge.target\r\n      );\r\n    });\r\n  };\r\n\r\n  /*\r\n   * Handlers/Interaction\r\n   */\r\n\r\n  // Called by 'drag' handler, etc..\r\n  // to sync updates from D3 with the graph\r\n  const onUpdateNode = (viewNode) => {\r\n    const tmpGraph = graph;\r\n    const i = getNodeIndex(viewNode);\r\n\r\n    tmpGraph.nodes[i] = viewNode;\r\n    setGraph(tmpGraph);\r\n  };\r\n\r\n  // Node 'mouseUp' handler\r\n  const onSelectNode = (viewNode, event) => {\r\n    // const { id = \"\" } = event.target;\r\n    const id = get(event, \"target.id\", \"\");\r\n    if (id.includes(\"text\")) {\r\n      document.getElementById(event.target.id).click();\r\n    }\r\n\r\n    // Deselect events will send Null viewNode\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  // Edge 'mouseUp' handler\r\n  const onSelectEdge = (viewEdge) => {\r\n    setSelected(viewEdge);\r\n  };\r\n\r\n  // Updates the graph with a new node\r\n  const onCreateNode = (x, y) => {\r\n    const tmpGraph = graph;\r\n    const players = tmpGraph.nodes.map((element) => element.title);\r\n    const newPlayerNr = firstMissingPositive(players);\r\n    const viewNode = {\r\n      id: `${playersId + 1}`,\r\n      title: newPlayerNr,\r\n      type: PLAYER_TYPE,\r\n      x,\r\n      y,\r\n    };\r\n    setPlayers(newPlayerNr);\r\n    setPlayersId(playersId + 1);\r\n    tmpGraph.nodes = [...tmpGraph.nodes, viewNode];\r\n    setGraph(tmpGraph);\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  // Deletes a node from the graph\r\n  const onDeleteNode = (viewNode, nodeId, nodeArr) => {\r\n    const tmpGraph = graph;\r\n    // Delete any connected edges\r\n    const newEdges = graph.edges.filter((edge, i) => {\r\n      return (\r\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\r\n      );\r\n    });\r\n\r\n    tmpGraph.nodes = nodeArr;\r\n    tmpGraph.edges = newEdges;\r\n\r\n    setPlayers(players - 1);\r\n    setGraph(tmpGraph);\r\n    setSelected({});\r\n  };\r\n\r\n  // Creates a new node between two edges\r\n  const onCreateEdge = (sourceViewNode, targetViewNode) => {\r\n    const tmpGraph = graph;\r\n    // This is just an example - any sort of logic\r\n    // could be used here to determine edge type\r\n\r\n    const viewEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      handleText: props.valueForEdge,\r\n      type: NORMAL_EDGE,\r\n    };\r\n    const viewEdgeRealSource = viewEdge.source?.split(separatorString).at(-1);\r\n    const viewEdgeRealTarget = viewEdge.target?.split(separatorString).at(-1);\r\n    const isConnectionDefined = graph.edges.some((edge) => {\r\n      const edgeSourceRealTitle = edge?.source?.split(separatorString).at(-1);\r\n      const edgeTargetRealTitle = edge?.target?.split(separatorString).at(-1);\r\n      if (\r\n        viewEdgeRealSource === edgeSourceRealTitle &&\r\n        viewEdgeRealTarget === edgeTargetRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n      if (\r\n        viewEdgeRealSource === edgeTargetRealTitle &&\r\n        viewEdgeRealTarget === edgeSourceRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n    });\r\n    // Only add the edge when the source node is not the same as the target\r\n    if (viewEdge.source !== viewEdge.target && !isConnectionDefined) {\r\n      tmpGraph.edges = [...tmpGraph.edges, viewEdge];\r\n\r\n      setGraph(tmpGraph);\r\n      setSelected(viewEdge);\r\n    }\r\n  };\r\n\r\n  // Called when an edge is reattached to a different target.\r\n  const onSwapEdge = (sourceViewNode, targetViewNode, viewEdge) => {\r\n    const tmpGraph = graph;\r\n    const i = getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    tmpGraph.edges[i] = edge;\r\n    // reassign the array reference if you want the graph to re-render a swapped edge\r\n    graph.edges = [...tmpGraph.edges];\r\n\r\n    setGraph(tmpGraph);\r\n    setSelected(edge);\r\n  };\r\n\r\n  // Called when an edge is deleted\r\n  const onDeleteEdge = (viewEdge, edges) => {\r\n    const tmpGraph = graph;\r\n\r\n    tmpGraph.edges = edges;\r\n\r\n    setGraph(tmpGraph);\r\n    setSelected(null);\r\n  };\r\n\r\n  const onCopySelected = () => {\r\n    if (selected.source) {\r\n      console.warn(\"Cannot copy selected edges, try selecting a node instead.\");\r\n\r\n      return;\r\n    }\r\n\r\n    const x = selected.x + 20;\r\n    const y = selected.y + 20;\r\n    setCopied({ ...selected, x, y });\r\n  };\r\n\r\n  const onPasteSelected = () => {\r\n    const arrayOfCopies = graph.nodes.filter(\r\n      (node) => node.title === copied.title\r\n    );\r\n    if (arrayOfCopies.length >= 2) {\r\n      console.warn(\"Node already have a copy\");\r\n      return null;\r\n    }\r\n\r\n    const tmpGraph = graph;\r\n    const newNode = {\r\n      ...copied,\r\n      id: `${playersId + 1}${separatorString}${copied.id}`,\r\n    };\r\n\r\n    tmpGraph.nodes = [...tmpGraph.nodes, newNode];\r\n    setGraph(tmpGraph);\r\n    setPlayersId(playersId + 1);\r\n  };\r\n\r\n  /* Define custom graph editing methods here */\r\n\r\n  return (\r\n    <div id=\"graph\" style={{ height: \"50rem\" }}>\r\n      <GraphView\r\n        allowMultiSelect={true}\r\n        showGraphControls={true}\r\n        gridSize=\"100rem\"\r\n        gridDotSize={1}\r\n        renderNodeText={false}\r\n        ref={refElement}\r\n        nodeKey={NODE_KEY}\r\n        nodes={graph.nodes}\r\n        edges={graph.edges}\r\n        selected={selected}\r\n        nodeTypes={nodeConfig.NodeTypes}\r\n        nodeSubtypes={nodeConfig.NodeSubtypes}\r\n        edgeTypes={nodeConfig.NodeTypes}\r\n        onSelectNode={onSelectNode}\r\n        onCreateNode={onCreateNode}\r\n        onUpdateNode={onUpdateNode}\r\n        onDeleteNode={onDeleteNode}\r\n        onSelectEdge={onSelectEdge}\r\n        onCreateEdge={onCreateEdge}\r\n        onSwapEdge={onSwapEdge}\r\n        onDeleteEdge={onDeleteEdge}\r\n        onCopySelected={onCopySelected}\r\n        onPasteSelected={onPasteSelected}\r\n        readOnly={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Graph;\r\n","import _ from \"underscore\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (inp: Array<number>) => {\r\n  const length = inp.length;\r\n  const allCoalitions = [];\r\n\r\n  for (let i = 0; i < Math.pow(2, length); i++) {\r\n    const subset = [];\r\n\r\n    for (var j = 0; j < length; j++) {\r\n      if (i & (1 << j)) {\r\n        subset.push(inp[j]);\r\n      }\r\n    }\r\n    allCoalitions.push(subset);\r\n  }\r\n\r\n  return allCoalitions;\r\n};\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ];\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - valueOfCoalitionWithoutPlayer) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number) =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\nexport const firstMissingPositive = (nums: number[]) => {\r\n  let len = nums.length;\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] < 0) nums[i] = 0;\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    let pos = Math.abs(nums[i]) - 1;\r\n    if (pos >= 0 && pos <= len) {\r\n      if (nums[pos] > 0) nums[pos] = -nums[pos];\r\n      if (nums[pos] === 0) nums[pos] = -Infinity;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] >= 0) return i + 1;\r\n  }\r\n\r\n  return len + 1;\r\n};\r\n","import React from \"react\";\r\nimport { Form, InputNumber } from \"antd\";\r\ninterface IGraphInputSectionProps {\r\n  valueForEdge: number;\r\n  setValueForEdge: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\nexport const GraphInputSection = (props: IGraphInputSectionProps) => {\r\n  const { valueForEdge, setValueForEdge } = props;\r\n  return (\r\n    <div className=\"graph-input-section\">\r\n      <Form\r\n        labelCol={{ span: 12 }}\r\n        wrapperCol={{ span: 12 }}\r\n        layout=\"horizontal\"\r\n        size=\"middle\"\r\n        className=\"number-of-players-input\"\r\n      >\r\n        <Form.Item\r\n          labelAlign=\"right\"\r\n          label=\"Before creating an edge set it's value\"\r\n        >\r\n          <InputNumber\r\n            value={valueForEdge}\r\n            onChange={(e) => setValueForEdge(e)}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const InformationSection = () => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>To add player, hold shift and click on the grid.</li>\r\n        <li>\r\n          To add edge with value, change the value on the input above, then hold\r\n          shift and click/drag to between players.\r\n        </li>\r\n        <li>To delete a node or edge, click on it and press delete.</li>\r\n        <li>Click and drag nodes to change their position.</li>\r\n        <li>\r\n          You may copy and paste selected nodes and edges with Ctrl+C and Ctrl+V\r\n        </li>\r\n        <li>\r\n          To create self edges copy and paste a player and create an edge\r\n          between them.\r\n        </li>\r\n        <li>Note: On Mac computers, use Cmd instead of Ctrl.</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import { Collapse } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Graph from \"./graph\";\r\nimport { GraphInputSection } from \"./graph-input-section\";\r\nimport { InformationSection } from \"./information-section\";\r\n\r\nexport const CalculatorGraph = () => {\r\n  const [valueForEdge, setValueForEdge] = useState(0);\r\n  return (\r\n    <div className=\"calculator-graph\">\r\n      <Collapse>\r\n        <Collapse.Panel header=\"How to use it\" key=\"1\">\r\n          <InformationSection />\r\n        </Collapse.Panel>\r\n        <GraphInputSection\r\n          valueForEdge={valueForEdge}\r\n          setValueForEdge={setValueForEdge}\r\n        />\r\n      </Collapse>\r\n      <Graph valueForEdge={valueForEdge} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport { CalculatorFunctionDefinition } from \"../../../calculators/calculator-function-definition/calculator-function-definition\";\r\nimport { CalculatorCoalitionStructures } from \"../../../calculators/calculator-coalition-structures/calculator-coalition-structures\";\r\nimport { CalculatorMCNets } from \"../../../calculators/calculator-mc-nets/calculator-mc-nets\";\r\nimport { CalculatorGraph } from \"../../../calculators/calculator-graph/calculator-graph\";\r\n\r\nconst { TabPane } = Tabs;\r\nexport type TabsKeys = \"coalition\" | \"function\" | \"mc-nets\";\r\nexport const AppBody = (): JSX.Element => {\r\n  const [activeTabKey, setActiveTabKey] = useState<TabsKeys>(\"coalition\");\r\n  return (\r\n    <Tabs\r\n      activeKey={activeTabKey}\r\n      onTabClick={(key: string) => setActiveTabKey(key as TabsKeys)}\r\n      centered\r\n    >\r\n      <TabPane tab=\"Coalition structures definition\" key=\"coalition\">\r\n        <CalculatorCoalitionStructures setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"Function generating values\" key=\"function\" disabled>\r\n        <CalculatorFunctionDefinition />\r\n      </TabPane>\r\n      <TabPane tab=\"MC-nets game representation\" key=\"mc-nets\">\r\n        <CalculatorMCNets />\r\n      </TabPane>\r\n      <TabPane tab=\"Graph game representation\" key=\"graph\">\r\n        <CalculatorGraph />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default AppBody;\r\n","import React from 'react'\r\nimport { PageHeader } from 'antd';\r\nimport './app-header.css';\r\n\r\nexport const AppHeader = (): JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","import ActionTypes from \"../actionTypes\";\r\n\r\nconst initialState: Store = {};\r\n\r\nexport const aplication = (\r\n  state = initialState,\r\n  action: { type: any; payload: any }\r\n): Store => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          coalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          functionOfCoalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_RULES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          rules: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default aplication;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react'\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport AppBody from \"../components/layout/body/app-body/app-body\";\r\nimport AppHeader from \"../components/layout/header/app-header\";\r\nimport store from \"../redux/store\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"app\">\r\n        <AppHeader />\r\n        <AppBody />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}