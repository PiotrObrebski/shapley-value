{"version":3,"sources":["components/calculators/calculator-coalition-definition/calculator-coalition-definition.tsx","components/calculators/calculator-function-definition/calculator-function-definition.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/actionTypes.ts","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["CalculatorCoalitionDefinition","className","labelCol","span","wrapperCol","layout","Item","label","min","max","defaultValue","CalculatorFunctionDefinition","useState","grandCoalition","setGrandoCalition","coalitionsArray","setCoalitionsArray","undefined","message","setMessage","shapleyValues","setShapleyValues","functionOfCoalitions","setFunctionOfCoalitions","indexOfArrayinArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","factorial","n","r","calculateAllShapleyValues","players","coalitions","funcOfCoalitions","player","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","length","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","useEffect","inp","allCoalitions","i","Math","pow","subset","j","generateCoalitions","size","onChange","event","Array","from","v","k","generateCoalitionOfN","fill","map","labelString","toString","generateCoalitionString","value","tmpFunction","onClick","TabPane","Tabs","AppBody","centered","tab","disabled","AppHeader","title","subTitle","ActionTypes","SET_CONTENT_KEY","initialState","applicationKey","aplication","state","action","type","payload","combineReducers","createStore","rootReducer","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41b75a93.chunk.js","sourcesContent":["import { Button, Form, InputNumber } from 'antd';\r\nexport const CalculatorCoalitionDefinition = (): JSX.Element => {\r\n  return (\r\n    <div className=\"calculator-coalition-definition\">\r\n      <Form\r\n      labelCol={{ span: 12 }}\r\n      wrapperCol={{ span: 12 }}\r\n        layout=\"horizontal\"\r\n      >\r\n        <Form.Item label=\"Number of players\">\r\n          <InputNumber\r\n            min={3}\r\n            max={7}\r\n            defaultValue={3}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"\">\r\n          <Button>Generate Coalitions</Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorCoalitionDefinition;\r\n","import { Form, InputNumber, Button } from 'antd';\r\nimport { useEffect, useState } from 'react';\r\nimport './calculator-function-definition.css';\r\nimport _ from 'underscore';\r\n\r\nexport const CalculatorFunctionDefinition = (): JSX.Element => {\r\n  const [grandCoalition, setGrandoCalition] = useState<number[]>([]);\r\n  const [coalitionsArray, setCoalitionsArray] = useState<number[][]>([]);\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const [shapleyValues, setShapleyValues] = useState<number[]>([])\r\n  const [functionOfCoalitions, setFunctionOfCoalitions] = useState<number[]>([])\r\n  const generateCoalitionOfN = (event: number) => Array.from({ length: event }, (v, k) => k + 1)\r\n  const generateCoalitionString = (coalition: number[]): string => coalition.toString()\r\n\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < 10) {\r\n      setGrandoCalition(generateCoalitionOfN(event))\r\n      setFunctionOfCoalitions(Array(2 ** event).fill(0))\r\n      setShapleyValues([])\r\n      setMessage(undefined)\r\n    } else setMessage('Number of coalition members exceded!')\r\n  }\r\n  const indexOfArrayinArray = (arrayOfArrays: number[][], arrayToFind: number[]): number => {\r\n    let indexOfArray = -1\r\n    arrayOfArrays.forEach((array, index) => {\r\n      if (_.isEqual(array, arrayToFind)) {\r\n        indexOfArray = index\r\n      }\r\n    })\r\n    return indexOfArray\r\n  }\r\n  const generateCoalitions = (inp: Array<number>) => {\r\n    const length = inp.length;\r\n    const allCoalitions = [];\r\n\r\n    for (let i = 0; i < (Math.pow(2, length)); i++) {\r\n      const subset = [];\r\n\r\n      for (var j = 0; j < length; j++) {\r\n        if (i & (1 << j)) {\r\n          subset.push(inp[j]);\r\n        }\r\n      }\r\n\r\n      allCoalitions.push(subset);\r\n    }\r\n\r\n    return allCoalitions;\r\n  }\r\n  function factorial(n: number, r: number = 1) {\r\n    while (n > 0) r *= n--;\r\n    return r;\r\n  }\r\n  const coalitionsGenerateShapleyValue = (player: number, players: number[], coalitions: number[][], funcOfCoalitions: number[]) => {\r\n    let shapleyValue = 0\r\n    coalitions.forEach((coalition: number[]) => {\r\n      if (coalition.includes(player)) {\r\n        const valueOfCoalitionWithPlayer = funcOfCoalitions[indexOfArrayinArray(coalitions, coalition)]\r\n        const coalitionWithoutPlayer = [...coalition]\r\n        coalitionWithoutPlayer.splice(coalition.indexOf(player), 1)\r\n        const valueOfCoalitionWithoutPlayer = funcOfCoalitions[indexOfArrayinArray(coalitions, coalitionWithoutPlayer)]\r\n        const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length)\r\n        const numberOfPermutationsA = factorial(players.length - coalitionWithoutPlayer.length - 1)\r\n        const contrCount = numberOfPermutationsA * numberOfPermutationsC / factorial(players.length)\r\n        shapleyValue += (valueOfCoalitionWithPlayer - valueOfCoalitionWithoutPlayer) * contrCount\r\n      }\r\n    })\r\n\r\n    return Number(shapleyValue.toFixed(2))\r\n  }\r\n\r\n  const calculateAllShapleyValues = (players: number[], coalitions: number[][], funcOfCoalitions: number[]) => {\r\n    const shapleyValues: number[] = []\r\n    players.forEach((player: number) => {\r\n      const playerShapleyValue = coalitionsGenerateShapleyValue(player, players, coalitions, funcOfCoalitions)\r\n      shapleyValues.push(playerShapleyValue)\r\n    })\r\n    return shapleyValues\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      setCoalitionsArray(generateCoalitions(grandCoalition))\r\n    }\r\n  }, [grandCoalition])\r\n\r\n  return (\r\n    <div className=\"calculator-function-definition\">\r\n      <Form\r\n        labelCol={{ span: 12 }}\r\n        wrapperCol={{ span: 12 }}\r\n        layout=\"horizontal\"\r\n        size=\"middle\"\r\n        className=\"number-of-players-input\"\r\n      >\r\n        <div className=\"error-message\">{message}</div>\r\n        <Form.Item label=\"Number of players\">\r\n          <InputNumber\r\n            min={0}\r\n            max={10}\r\n            defaultValue={0}\r\n            onChange={handleNumberOfPlayesChange}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n      <Form\r\n        labelCol={{ span: 12 }}\r\n        wrapperCol={{ span: 12 }}\r\n        layout=\"horizontal\"\r\n        size=\"small\"\r\n        className=\"function-inputs\"\r\n      >\r\n        {coalitionsArray?.map((coalition, index) => {\r\n          const labelString = `Value of coalition {${generateCoalitionString(coalition)}}`\r\n          return <Form.Item key={index} label={labelString}>\r\n            <InputNumber\r\n              min={0}\r\n              max={28}\r\n              value={functionOfCoalitions[index]}\r\n              defaultValue={0}\r\n              onChange={(event: number) => {\r\n                const tmpFunction = [...functionOfCoalitions]\r\n                tmpFunction[index] = event\r\n                setFunctionOfCoalitions(tmpFunction)\r\n              }}\r\n            />\r\n          </Form.Item>\r\n        })}\r\n      </Form>\r\n      <Button\r\n        onClick={() => setShapleyValues(\r\n          calculateAllShapleyValues(grandCoalition, coalitionsArray, functionOfCoalitions)\r\n        )}>\r\n        Generate\r\n      </Button>\r\n      <div>\r\n        {shapleyValues.map((value: number, index: number) =>\r\n          <div className=\"shapley-value\">\r\n            {`shapley value of player ${index + 1} is ${value}`}\r\n          </div>)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorFunctionDefinition;\r\n","import { Tabs } from 'antd';\r\nimport {\r\n  CalculatorCoalitionDefinition,\r\n} from '../../../calculators/calculator-coalition-definition/calculator-coalition-definition';\r\nimport {\r\n  CalculatorFunctionDefinition,\r\n} from '../../../calculators/calculator-function-definition/calculator-function-definition';\r\n\r\nconst { TabPane } = Tabs\r\n\r\nexport const AppBody = (): JSX.Element => {\r\n\r\n  return (\r\n    <Tabs centered>\r\n      <TabPane tab=\"Simple characteristic function\" key=\"function\">\r\n        <CalculatorFunctionDefinition />\r\n      </TabPane >\r\n      <TabPane tab=\"Coalition structures values\" key=\"coalition\" disabled>\r\n        <CalculatorCoalitionDefinition />\r\n      </TabPane >\r\n    </Tabs>\r\n  )\r\n};\r\n\r\nexport default AppBody;\r\n","import './app-header.css';\r\n\r\nimport { PageHeader } from 'antd';\r\nimport React from 'react';\r\n\r\nexport const AppHeader = ():JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","export const  ActionTypes = {\r\n  SET_CONTENT_KEY: 'SET_CONTENT_KEY'\r\n}\r\n\r\nexport default ActionTypes","import ActionTypes from '../actionTypes';\r\n\r\nconst initialState = {\r\n  applicationKey: 'function'\r\n};\r\n\r\nexport const aplication = (state = initialState, action: { type: string, payload: string }): Aplication => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_CONTENT_KEY: \r\n      return {\r\n        ...state,\r\n        applicationKey: action.payload\r\n      }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default aplication\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import './App.css';\nimport 'antd/dist/antd.css';\nimport { Provider } from 'react-redux';\n\nimport AppBody from '../components/layout/body/app-body/app-body';\nimport AppHeader from '../components/layout/header/app-header';\nimport store from '../redux/store';\n\nconst App = (): JSX.Element => {\n\n  return (\n    <Provider store={store}>\n    <div className=\"app\">\n      <AppHeader/>\n      <AppBody/>\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}