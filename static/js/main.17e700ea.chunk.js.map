{"version":3,"sources":["components/shared-components/number-of-players-input.tsx","components/calculators/calculator-function-definition/function-definition-input.tsx","components/calculators/calculator-function-definition/calculator-function-definition.tsx","utilities/calculation-functions.ts","redux/actionTypes.ts","redux/actions.ts","components/calculators/calculator-coalition-structures/coalition-structures-input.tsx","components/shared-components/display-generated-values.tsx","components/calculators/calculator-coalition-structures/calculator-coalition-structures.tsx","components/calculators/calculator-mc-nets/add-mc-nets-rule/add-mc-nets-rule.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/player-group/players-group.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/mc-nets-rule.tsx","components/calculators/calculator-mc-nets/calculator-mc-nets.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberOfPlayersForm","props","numberOfPlayers","message","maxValue","handleNumberOfPlayesChange","labelCol","span","wrapperCol","layout","size","className","Item","labelAlign","label","min","max","defaultValue","value","onChange","FunctionDefinitionInput","CalculatorFunctionDefinition","useState","setGrandCalition","undefined","setMessage","setShapleyValues","setFunctionOfCoalitions","event","Array","from","length","v","k","generateCoalitionOfN","fill","indexOfArrayInArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","factorial","n","r","calculateAllShapleyValues","players","coalitions","funcOfCoalitions","shapleyValues","player","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","calculateMCNetsShapleyValues","rules","nrOfPlayers","values","rule","positive","negative","numberOfPositivePlayers","positivePlayers","numberOfNegativePlayers","negativePlayers","positivePlayersContribution","negativePlayersContribution","calculateNegativePlayersMarginalContribution","parseFloat","ActionTypes","SET_COALITIONS_NUMBER_OF_PLAYERS","SET_COALITIONS_COALITIONS","SET_COALITIONS_FUNCTION_OF_COALITIONS","SET_COALITIONS_SHAPLEY_VALUES","SET_MCNETS_NUMBER_OF_PLAYERS","SET_MCNETS_RULES","SET_MCNETS_SHAPLEY_VALUES","SET_GRAPH_GAME_DEFINITION","setCoalitionsFunctionOfCoalitions","functionOfCoalitions","type","payload","setMCNetsNumberOfPlayers","nrOfPlayes","setMCNetsRules","CoalitionStructuresInput","connect","state","aplication","dispatch","dataSource","map","key","toString","columns","title","dataIndex","align","render","text","record","tmpFunction","bordered","pagination","scroll","y","column","DisplayGeneratedValues","listShapleyValues","tableMaxHeight","shapleuValue","playerNumber","CalculatorCoalitionStructures","setCoalitionsNumberOfplayers","setCoalitionsCoalitions","setCoalitionsShapleyValues","setActiveTabKey","grandCoalition","useEffect","newCoalitions","reduce","subsets","concat","set","sort","a","b","unshift","justify","xs","sm","md","lg","xl","cssClass","onFileLoaded","data","newFunctionOfCoalitions","row","pop","currentCoalition","slice","inputName","parserOptions","header","dynamicTyping","skipEmptyLines","onClick","gameDefinition","csvContent","e","join","window","open","encodeURI","disabled","newRules","newNumberOfPlayers","highestPlayerInCoalition","Math","String","AddMCNetsRule","mcNets","flex","shape","icon","PlusOutlined","PlayersGroup","options","Group","style","width","MCNetsRule","plainOptions","wrap","placeholder","tmpRules","checkedValues","filter","val","MinusOutlined","CalculatorMCNets","setMCNetsShapleyValues","activeKeys","setActiveKeys","activeKey","keys","Panel","_rule","showArrow","forceRender","collapsible","gutter","tmpActiveKeys","TabPane","Tabs","AppBody","activeTabKey","onTabClick","centered","tab","AppHeader","subTitle","initialState","action","combineReducers","createStore","rootReducer","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17e700ea.chunk.js","sourcesContent":["import { Form, InputNumber } from \"antd\"\r\nexport interface INumberOfPlayersForm {\r\n  numberOfPlayers?: number\r\n  message?: string\r\n  maxValue: number\r\n  handleNumberOfPlayesChange?: (event: number) => void\r\n}\r\nexport const NumberOfPlayersForm = (props: INumberOfPlayersForm): JSX.Element => {\r\n  const { numberOfPlayers, message, maxValue, handleNumberOfPlayesChange } = props\r\n  return <Form\r\n    labelCol={{ span: 12 }}\r\n    wrapperCol={{ span: 12 }}\r\n    layout=\"horizontal\"\r\n    size=\"middle\"\r\n    className=\"number-of-players-input\"\r\n  >\r\n    <div className=\"error-message\">{message}</div>\r\n    <Form.Item labelAlign=\"right\" label=\"Number of players\">\r\n      <InputNumber\r\n        min={0}\r\n        max={maxValue - 1}\r\n        defaultValue={0}\r\n        value={numberOfPlayers}\r\n        onChange={handleNumberOfPlayesChange}\r\n      />\r\n    </Form.Item>\r\n  </Form>\r\n}\r\n\r\nexport default NumberOfPlayersForm","export const FunctionDefinitionInput = (): JSX.Element => {\r\n  return (\r\n    <div className=\"function-definition-input\">\r\n\r\n    </div>\r\n  )\r\n}","import { useState } from 'react';\r\nimport NumberOfPlayersForm from '../../shared-components/number-of-players-input';\r\nimport { FunctionDefinitionInput } from './function-definition-input';\r\nexport const CalculatorFunctionDefinition = (): JSX.Element => {\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>([]);\r\n  const [coalitionsArray, setCoalitionsArray] = useState<number[][]>([]);\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const [shapleyValues, setShapleyValues] = useState<number[]>([])\r\n  const [functionOfCoalitions, setFunctionOfCoalitions] = useState<number[]>([])\r\n  const generateCoalitionOfN = (event: number) => Array.from({ length: event }, (v, k) => k + 1)\r\n  const [listShapleyValues, setListShapleyValues] = useState<string[]>([])\r\n\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < 10) {\r\n      setGrandCalition(generateCoalitionOfN(event))\r\n      setFunctionOfCoalitions(Array(2 ** event).fill(0))\r\n      setShapleyValues([])\r\n      setMessage(undefined)\r\n    } else setMessage('Number of coalition members exceded!')\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-definition\">\r\n      <NumberOfPlayersForm\r\n        maxValue={10}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n\r\n      <FunctionDefinitionInput\r\n      // grandCoalition={grandCoalition}\r\n      // coalitionsArray={coalitionsArray}\r\n      // functionOfCoalitions={functionOfCoalitions}\r\n      // setFunctionOfCoalitions={setFunctionOfCoalitions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorFunctionDefinition;\r\n","import _ from \"underscore\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (arr: Array<number>) =>\r\n  arr\r\n    .reduce(\r\n      (subsets: number[][], value: number) =>\r\n        subsets.concat(subsets.map((set) => [...set, value])),\r\n      [[]]\r\n    )\r\n    .sort((a, b) => a.length - b.length);\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n        indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ] ?? 0;\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - (valueOfCoalitionWithoutPlayer ?? 0)) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number) =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\n","export const ActionTypes = {\r\n  SET_COALITIONS_NUMBER_OF_PLAYERS: \"SET_COALITIONS_NUMBER_OF_PLAYERS\",\r\n  SET_COALITIONS_COALITIONS: \"SET_COALITIONS_COALITIONS\",\r\n  SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n    \"SET_COALITIONS_FUNCTION_OF_COALITIONS\",\r\n  SET_COALITIONS_SHAPLEY_VALUES: \"SET_COALITIONS_SHAPLEY_VALUES\",\r\n  SET_MCNETS_NUMBER_OF_PLAYERS: \"SET_MCNETS_NUMBER_OF_PLAYERS\",\r\n  SET_MCNETS_RULES: \"SET_MCNETS_RULES\",\r\n  SET_MCNETS_SHAPLEY_VALUES: \"SET_MCNETS_SHAPLEY_VALUES\",\r\n  SET_GRAPH_GAME_DEFINITION: \"SET_GRAPH_GAME_DEFINITION\",\r\n};\r\n\r\nexport default ActionTypes;\r\n","import ActionTypes from \"./actionTypes\";\r\n\r\nexport const setCoalitionsNumberOfplayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setCoalitionsCoalitions = (\r\n  coalitions: number[][]\r\n): {\r\n  type: string;\r\n  payload: number[][];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_COALITIONS,\r\n  payload: coalitions,\r\n});\r\n\r\nexport const setCoalitionsFunctionOfCoalitions = (\r\n  functionOfCoalitions: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS,\r\n  payload: functionOfCoalitions,\r\n});\r\n\r\nexport const setCoalitionsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setMCNetsNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => {\r\n  return {\r\n    type: ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS,\r\n    payload: nrOfPlayes,\r\n  };\r\n};\r\n\r\nexport const setMCNetsRules = (\r\n  rules: IMCNetsRule[]\r\n): {\r\n  type: string;\r\n  payload: IMCNetsRule[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_RULES,\r\n  payload: rules,\r\n});\r\n\r\nexport const setMCNetsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n","import { Table, InputNumber } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCoalitionsFunctionOfCoalitions } from \"../../../redux/actions\";\r\n\r\nexport interface ICoalitionStructuresInputProps {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => void;\r\n}\r\n\r\nexport const CoalitionStructuresInputNotConnected = (\r\n  props: ICoalitionStructuresInputProps\r\n): JSX.Element => {\r\n  const {\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const dataSource = coalitions?.map((coalition, index) => ({\r\n    key: index,\r\n    coalition: coalition.length ? coalition.toString() : \"Ø\",\r\n    value: 0,\r\n  }));\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Coalition Structure\",\r\n      dataIndex: \"coalition\",\r\n      key: \"coalition\",\r\n      align: \"right\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (text: string, record: any) => (\r\n        <InputNumber\r\n          value={functionOfCoalitions?.[record.key]}\r\n          defaultValue={0}\r\n          onChange={(event: number) => {\r\n            const tmpFunction = functionOfCoalitions\r\n              ? [...functionOfCoalitions]\r\n              : [];\r\n            tmpFunction[record.key] = event;\r\n            setCoalitionsFunctionOfCoalitions(tmpFunction);\r\n          }}\r\n        />\r\n      ),\r\n      align: \"left\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"coalition-structures-input\"\r\n    >\r\n      {columns.map((column) => (\r\n        <Column {...column} />\r\n      ))}\r\n    </Table>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: {\r\n  aplication: Store;\r\n}): {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n} => {\r\n  return {\r\n    coalitions: state.aplication.coalitions?.coalitions,\r\n    functionOfCoalitions: state.aplication.coalitions?.functionOfCoalitions,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number[] }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CoalitionStructuresInput = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CoalitionStructuresInputNotConnected);\r\nexport default CoalitionStructuresInput;\r\n","\r\nimport { Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface IDisplayGeneratedValuesProps {\r\n  listShapleyValues: number[]\r\n  tableMaxHeight?: number\r\n}\r\n\r\nexport const DisplayGeneratedValues = (props: IDisplayGeneratedValuesProps): JSX.Element => {\r\n  const { listShapleyValues, tableMaxHeight } = props\r\n  const dataSource = listShapleyValues.map((shapleuValue, index) => {\r\n    return {\r\n      key: index,\r\n      value: shapleuValue,\r\n      playerNumber: index + 1\r\n    }\r\n  })\r\n\r\n  const columns = [{\r\n    title: 'Player number',\r\n    dataIndex: 'playerNumber',\r\n    key: 'playerNumber',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }, {\r\n    title: 'Player Shapley Value',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }]\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: tableMaxHeight ?? 300 }}\r\n      className=\"display-generated-values\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default DisplayGeneratedValues\r\n","import { Button, Col, Row } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./calculator-coalition-structures.scss\";\r\nimport {\r\n  calculateAllShapleyValues,\r\n  generateCoalitions,\r\n  generateCoalitionOfN,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport CoalitionStructuresInput from \"./coalition-structures-input\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setCoalitionsShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\n\r\ninterface ICalculatorCoalitionStructuresProps extends CoalitionsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setCoalitionsShapleyValues: (content: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  };\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nconst CalculatorCoalitionStructuresNotConnected = (\r\n  props: ICalculatorCoalitionStructuresProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n    setCoalitionsShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n  } = props;\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>(\r\n    nrOfPlayes ? generateCoalitionOfN(nrOfPlayes) : []\r\n  );\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const maxValue = 10;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < maxValue) {\r\n      setCoalitionsNumberOfplayers(event);\r\n      setGrandCalition(generateCoalitionOfN(event));\r\n      setCoalitionsFunctionOfCoalitions(Array(2 ** event).fill(0));\r\n      setCoalitionsShapleyValues([]);\r\n      setMessage(undefined);\r\n    } else setMessage(\"Number of coalition members exceded!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      const newCoalitions = generateCoalitions(grandCoalition);\r\n      newCoalitions[0].unshift(0);\r\n      setCoalitionsCoalitions(newCoalitions);\r\n    }\r\n  }, [grandCoalition, setCoalitionsCoalitions]);\r\n\r\n  const handleForce = (data: any) => {\r\n    const newCoalitions: number[][] = [];\r\n    const newFunctionOfCoalitions: number[] = [];\r\n    let numberOfPlayers = 0;\r\n\r\n    data.forEach((row: number[]) => {\r\n      row.pop();\r\n      const currentCoalition = row.slice(0, -1);\r\n      numberOfPlayers =\r\n        currentCoalition.length > numberOfPlayers\r\n          ? currentCoalition.length\r\n          : numberOfPlayers;\r\n      newCoalitions.push(currentCoalition);\r\n      newFunctionOfCoalitions.push(row.slice(-1).pop() ?? 0);\r\n    });\r\n\r\n    setCoalitionsNumberOfplayers(numberOfPlayers);\r\n    setCoalitionsCoalitions(newCoalitions);\r\n    setCoalitionsFunctionOfCoalitions(newFunctionOfCoalitions);\r\n  };\r\n\r\n  const handleDownloadGameDefinition = () => {\r\n    const gameDefinition: number[][] = coalitions?.map((coalition, index) => {\r\n      return [...coalition, functionOfCoalitions?.[index] ?? 0];\r\n    }) ?? [[0]];\r\n    // gameDefinition[0].unshift(0);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,\" +\r\n      gameDefinition?.map((e) => e.join(\",\") + \",\").join(\"\\n\");\r\n\r\n    window.open(encodeURI(csvContent));\r\n  };\r\n  const translateToMCNets = () => {\r\n    const newRules: IMCNetsRule[] = [];\r\n    let newNumberOfPlayers = 0;\r\n    functionOfCoalitions?.forEach((value, index) => {\r\n      if (value) {\r\n        const highestPlayerInCoalition = Math.max(\r\n          ...(coalitions?.[index] ?? [])\r\n        );\r\n        newNumberOfPlayers =\r\n          highestPlayerInCoalition > newNumberOfPlayers\r\n            ? highestPlayerInCoalition\r\n            : newNumberOfPlayers;\r\n        newRules.push({\r\n          positivePlayers: coalitions?.[index]?.map(String) ?? [],\r\n          negativePlayers: [],\r\n          value: value,\r\n        });\r\n      }\r\n    });\r\n    setMCNetsNumberOfPlayers(newNumberOfPlayers);\r\n    setMCNetsRules(newRules);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-structures\">\r\n      <NumberOfPlayersForm\r\n        numberOfPlayers={nrOfPlayes}\r\n        maxValue={maxValue}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      <Row justify=\"center\">\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <CoalitionStructuresInput />\r\n          <div className=\"upload\">\r\n            <CSVReader\r\n              cssClass=\"react-csv-input\"\r\n              label={<span>Upload game definition from .csv file </span>}\r\n              onFileLoaded={handleForce}\r\n              inputName=\"input2\"\r\n              parserOptions={{\r\n                header: false,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"download\">\r\n            <Button onClick={handleDownloadGameDefinition}>\r\n              Download Game Definition\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n        <Col className=\"buttons-col\" xs={24} sm={24} md={24} lg={4} xl={4}>\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={() =>\r\n              setCoalitionsShapleyValues(\r\n                calculateAllShapleyValues(\r\n                  grandCoalition,\r\n                  coalitions ?? [],\r\n                  functionOfCoalitions ?? []\r\n                )\r\n              )\r\n            }\r\n          >\r\n            Generate Shapley Values\r\n          </Button>\r\n          <Button\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={translateToMCNets}\r\n          >\r\n            Translate to MC Nets\r\n          </Button>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): CoalitionsGame => {\r\n  const { nrOfPlayes, coalitions, functionOfCoalitions, shapleyValues } =\r\n    state.aplication.coalitions || {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    coalitions: coalitions,\r\n    functionOfCoalitions: functionOfCoalitions,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n    setCoalitionsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setCoalitionsShapleyValues(shapleyValues)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n  };\r\n};\r\nexport const CalculatorCoalitionStructures = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorCoalitionStructuresNotConnected);\r\nexport default CalculatorCoalitionStructures;\r\n","import { PlusOutlined } from \"@ant-design/icons\"\r\nimport { Button, Col, Row } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { setMCNetsRules } from \"../../../../redux/actions\"\r\n\r\nexport interface IAddMCNetsRuleProps {\r\n  rules?: IMCNetsRule[]\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void\r\n}\r\n\r\nexport const AddMCNetsRuleNotConnected = (props: IAddMCNetsRuleProps): JSX.Element => {\r\n  const { rules, setMCNetsRules } = props\r\n\r\n  return (\r\n    <div className=\"add-mc-nets-rule\">\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col flex=\"64px\">Add Rule</Col>\r\n        <Col flex=\"40px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() =>\r\n              setMCNetsRules([\r\n                ...(rules ?? []),\r\n                {\r\n                  positivePlayers: [],\r\n                  negativePlayers: [],\r\n                  value: 0\r\n                }])\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  return {\r\n    rules: state.aplication.mcNets?.rules\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) =>\r\n      dispatch(setMCNetsRules(rules))\r\n  };\r\n};\r\n\r\nexport const AddMCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddMCNetsRuleNotConnected);\r\n\r\nexport default AddMCNetsRule","import { Checkbox } from \"antd\"\r\nimport './player-group.scss'\r\n\r\ninterface IPlayersGroupprops {\r\n  options: string[]\r\n  value: string[]\r\n  onChange: (checkedValues: any) => void\r\n}\r\n\r\nexport const PlayersGroup = (props: IPlayersGroupprops) => {\r\n  const { options, value, onChange } = props\r\n  return (\r\n    <div className=\"player-group\">\r\n      <Checkbox.Group options={options} value={value} onChange={onChange} style={{ width: `calc(${options.length} * 52px)` }} />\r\n    </div>\r\n  )\r\n}","import { MinusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, InputNumber, Row } from \"antd\"\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { generateCoalitionOfN } from \"../../../../utilities/calculation-functions\";\r\nimport './mc-nets-rule.scss'\r\nimport { PlayersGroup } from \"./player-group/players-group\";\r\nexport interface IMCNetsRuleProps {\r\n  index: number\r\n  nrOfPlayes?: number\r\n  rules?: IMCNetsRule[]\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void\r\n}\r\nexport const MCNetsRuleNotConnected = (props: IMCNetsRuleProps): JSX.Element => {\r\n  const { index, nrOfPlayes, rules, setMCNetsRules } = props\r\n  const onPositiveChange = (checkedValues: string[]) => {\r\n    const tmpRules = [...(rules ?? [])]\r\n    tmpRules[index].positivePlayers = checkedValues\r\n    tmpRules[index].negativePlayers = tmpRules[index].negativePlayers.filter(val => !checkedValues.includes(val));\r\n    setMCNetsRules(tmpRules)\r\n  }\r\n  const onNegativeChange = (checkedValues: any) => {\r\n    const tmpRules = [...(rules ?? [])]\r\n    tmpRules[index].negativePlayers = checkedValues\r\n    tmpRules[index].positivePlayers = tmpRules[index].positivePlayers.filter(val => !checkedValues.includes(val));\r\n    setMCNetsRules(tmpRules)\r\n  }\r\n\r\n  const plainOptions = generateCoalitionOfN(nrOfPlayes ?? 0).map(String)\r\n  return (\r\n    <div className=\"mc-nets-rule\">\r\n      <Row align=\"middle\" wrap={false} justify=\"center\">\r\n        <Col flex=\"100px\" className=\"mc-nets-rule-name\">{`Rule nr ${index}`}\r\n          <InputNumber\r\n            placeholder=\"Value\"\r\n            onChange={(event) => {\r\n              const tmpRules = [...(rules ?? [])]\r\n              tmpRules[index].value = event as number\r\n              setMCNetsRules(tmpRules)\r\n            }}\r\n            value={rules?.[index].value}\r\n          />\r\n        </Col>\r\n        <Col flex='auto' >\r\n          <div className=\"player-group-name\">Positive Players</div>\r\n          <PlayersGroup onChange={onPositiveChange} value={rules?.[index].positivePlayers ?? []} options={plainOptions} />\r\n        </Col>\r\n        <Col flex='auto' >\r\n          <div className=\"player-group-name\">Negative Players</div>\r\n          <PlayersGroup onChange={onNegativeChange} value={rules?.[index].negativePlayers ?? []} options={plainOptions} />\r\n        </Col>\r\n        <Col flex=\"32px\" >\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<MinusOutlined />}\r\n            onClick={() => {\r\n              const tmpRules = [...(rules ?? [])]\r\n              tmpRules.splice(index, 1)\r\n              setMCNetsRules(tmpRules)\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n\r\n  const { nrOfPlayes, rules } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void\r\n} => { return { setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)) } };\r\n\r\nexport const MCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MCNetsRuleNotConnected);\r\n\r\nexport default MCNetsRule","import { Button, Col, Collapse, Row } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport { calculateMCNetsShapleyValues } from \"../../../utilities/calculation-functions\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport { AddMCNetsRule } from \"./add-mc-nets-rule/add-mc-nets-rule\";\r\nimport { MCNetsRule } from \"./mc-nets-rule/mc-nets-rule\";\r\nimport \"./calculator-mc-nets.scss\";\r\nimport {\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsShapleyValues,\r\n} from \"../../../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface ICalculatorMCNetsProps extends McNetsGame {\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n}\r\n\r\nexport const CalculatorMCNetsNotConnected = (\r\n  props: ICalculatorMCNetsProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsShapleyValues,\r\n  } = props;\r\n  const handleNumberOfPlayesChange = (event: number) =>\r\n    setMCNetsNumberOfPlayers(event);\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\", \"2\"]);\r\n  return (\r\n    <div className=\"calculator-mc-nets\">\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Game Definition\" key=\"1\">\r\n          <Row justify=\"center\">\r\n            <Col span={12}>\r\n              <NumberOfPlayersForm\r\n                maxValue={20}\r\n                numberOfPlayers={nrOfPlayes}\r\n                handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <AddMCNetsRule />\r\n            </Col>\r\n          </Row>\r\n\r\n          <div className=\"mc-nets-rules\">\r\n            {rules?.map((_rule, index) => {\r\n              return <MCNetsRule key={index} index={index} />;\r\n            })}\r\n          </div>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"\"\r\n          key=\"2\"\r\n          showArrow={false}\r\n          forceRender={true}\r\n          collapsible=\"disabled\"\r\n          className=\"generate-panel\"\r\n        >\r\n          <Row justify=\"center\" gutter={32}>\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={!nrOfPlayes}\r\n              className=\"generate-button\"\r\n              onClick={() => {\r\n                setMCNetsShapleyValues(\r\n                  calculateMCNetsShapleyValues(rules ?? [], nrOfPlayes ?? 0)\r\n                );\r\n                const tmpActiveKeys = activeKeys.includes(\"3\")\r\n                  ? activeKeys\r\n                  : [...activeKeys, \"3\"];\r\n                setActiveKeys(tmpActiveKeys);\r\n              }}\r\n            >\r\n              Calculate\r\n            </Button>\r\n          </Row>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"Shapley Values\"\r\n          key=\"3\"\r\n          className=\"values-panel\"\r\n        >\r\n          <DisplayGeneratedValues\r\n            listShapleyValues={shapleyValues ?? []}\r\n            tableMaxHeight={200}\r\n          />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules, shapleyValues } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | IMCNetsRule[];\r\n  }) => any\r\n): {\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setMCNetsShapleyValues(shapleyValues)),\r\n  };\r\n};\r\nexport const CalculatorMCNets = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorMCNetsNotConnected);\r\n\r\nexport default CalculatorMCNets;\r\n","import { Tabs } from 'antd';\r\nimport {\r\n  CalculatorFunctionDefinition,\r\n} from '../../../calculators/calculator-function-definition/calculator-function-definition';\r\nimport {\r\n  CalculatorCoalitionStructures,\r\n} from '../../../calculators/calculator-coalition-structures/calculator-coalition-structures';\r\nimport { CalculatorMCNets } from '../../../calculators/calculator-mc-nets/calculator-mc-nets';\r\nimport { useState } from 'react';\r\n\r\nconst { TabPane } = Tabs\r\nexport type TabsKeys = 'coalition' | 'function' | 'mc-nets'\r\nexport const AppBody = (): JSX.Element => {\r\n  const [activeTabKey, setActiveTabKey] = useState<TabsKeys>('coalition')\r\n  return (\r\n    <Tabs activeKey={activeTabKey} onTabClick={(key: string) => setActiveTabKey(key as TabsKeys)} centered>\r\n      <TabPane tab=\"Coalition structures definition\" key=\"coalition\">\r\n        <CalculatorCoalitionStructures setActiveTabKey={setActiveTabKey} />\r\n      </TabPane >\r\n      <TabPane tab=\"Function generating values\" key=\"function\" disabled>\r\n        <CalculatorFunctionDefinition />\r\n      </TabPane >\r\n      <TabPane tab=\"MC-nets game representation\" key=\"mc-nets\">\r\n        <CalculatorMCNets />\r\n      </TabPane >\r\n    </Tabs>\r\n  )\r\n};\r\n\r\nexport default AppBody;\r\n","import { PageHeader } from 'antd';\r\nimport './app-header.css';\r\n\r\nexport const AppHeader = (): JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","import ActionTypes from \"../actionTypes\";\r\n\r\nconst initialState: Store = {};\r\n\r\nexport const aplication = (\r\n  state = initialState,\r\n  action: { type: any; payload: any }\r\n): Store => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          coalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          functionOfCoalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_RULES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          rules: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default aplication;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import \"./App.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport AppBody from \"../components/layout/body/app-body/app-body\";\r\nimport AppHeader from \"../components/layout/header/app-header\";\r\nimport store from \"../redux/store\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"app\">\r\n        <AppHeader />\r\n        <AppBody />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}