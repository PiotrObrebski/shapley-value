{"version":3,"sources":["redux/actionTypes.ts","redux/actions.ts","components/calculators/calculator-graph/config.tsx","components/calculators/game-exaples/examples.ts","components/calculators/game-exaples/game-examples.tsx","utilities/calculation-functions.ts","components/calculators/calculator-coalition-structures/coalition-structures-input.tsx","components/shared-components/number-of-players-input.tsx","components/shared-components/display-generated-values.tsx","components/calculators/calculator-coalition-structures/csv-input.tsx","components/calculators/calculator-coalition-structures/calculator-coalition-structures.tsx","components/calculators/calculator-mc-nets/add-mc-nets-rule/add-mc-nets-rule.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/player-group/players-group.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/mc-nets-rule.tsx","components/calculators/calculator-mc-nets/calculator-mc-nets.tsx","components/calculators/calculator-graph/graph-input-section.tsx","components/calculators/calculator-graph/graph.tsx","utilities/calculationg-functions.ts","components/calculators/calculator-graph/information-section.tsx","components/calculators/calculator-graph/calculator-graph.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","index.tsx"],"names":["ActionTypes","SET_COALITIONS_NUMBER_OF_PLAYERS","SET_COALITIONS_COALITIONS","SET_COALITIONS_FUNCTION_OF_COALITIONS","SET_COALITIONS_SHAPLEY_VALUES","SET_MCNETS_NUMBER_OF_PLAYERS","SET_MCNETS_RULES","SET_MCNETS_SHAPLEY_VALUES","SET_GRAPH_NUMBER_OF_PLAYERS","SET_GRAPH_EDGES","SET_GRAPH_NODES","SET_GRAPH_SHAPLEY_VALUES","setCoalitionsNumberOfplayers","nrOfPlayes","type","payload","setCoalitionsCoalitions","coalitions","setCoalitionsFunctionOfCoalitions","functionOfCoalitions","setMCNetsNumberOfPlayers","setMCNetsRules","rules","setGraphNumberOfPlayers","setGraphNodes","nodes","setGraphEdges","edges","setGraphShapleyValues","values","playerShape","viewBox","id","cx","cy","r","nodeConfig","EdgeTypes","normalEdge","shape","transform","x","y","width","height","fill","shapeId","NodeSubtypes","NodeTypes","player","typeText","coalitionsExamples","nrOfPlayers","mcNetsExamples","value","positivePlayers","negativePlayers","graphExamples","title","handleText","source","target","GameExamples","connect","state","aplication","graph","shapleyValues","dispatch","props","setActiveTabKey","columns","dataIndex","key","render","text","size","onClick","chosenGame","console","warn","loadCoalitionStructureGame","loadMCNetsGame","loadGraphGame","className","bordered","dataSource","description","example","pagination","showHeader","map","column","indexOfArrayInArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","generateCoalitions","arr","reduce","subsets","concat","set","sort","a","b","length","factorial","n","calculateAllShapleyValues","players","funcOfCoalitions","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","generateCoalitionOfN","event","Array","from","v","k","calculateMCNetsShapleyValues","rule","positive","negative","numberOfPositivePlayers","numberOfNegativePlayers","positivePlayersContribution","negativePlayersContribution","calculateNegativePlayersMarginalContribution","parseFloat","calculateGraphShapleyValues","grandCoalition","edgesStructure","edge","split","at","generateCoalitionsFromEdges","CoalitionStructuresInput","toString","align","record","defaultValue","onChange","tmpFunction","scroll","NumberOfPlayersForm","numberOfPlayers","message","maxValue","handleNumberOfPlayesChange","labelCol","span","wrapperCol","layout","Item","labelAlign","label","min","max","DisplayGeneratedValues","listShapleyValues","tableMaxHeight","shapleuValue","playerNumber","CSVInput","accept","cssClass","cssInputClass","cssLabelClass","fileEncoding","inputId","inputName","inputStyle","inputRef","onError","onFileLoaded","parserOptions","disabled","strict","htmlFor","name","style","e","reader","FileReader","files","fileInfo","Error","onload","_event","csvData","PapaParse","result","Object","assign","error","encoding","data","readAsText","ref","CalculatorCoalitionStructures","setCoalitionsShapleyValues","useState","setGrandCalition","undefined","setMessage","useRef","useEffect","newCoalitions","unshift","justify","xs","sm","md","lg","xl","newFunctionOfCoalitions","row","pop","currentCoalition","slice","current","display","header","dynamicTyping","skipEmptyLines","gameDefinition","csvContent","join","window","open","encodeURI","margin","newRules","String","filter","AddMCNetsRule","mcNets","flex","icon","PlusOutlined","PlayersGroup","options","Group","MCNetsRule","plainOptions","wrap","placeholder","tmpRules","checkedValues","val","MinusOutlined","CalculatorMCNets","setMCNetsShapleyValues","activeKeys","setActiveKeys","activeKey","keys","Panel","marginBottom","isDecrement","nrOfPlayersString","tmpActiveKeys","every","some","generateFunctionOfCoalitionsFromMCNets","marginLeft","_rule","GraphInputSection","valueForEdge","setValueForEdge","Graph","selected","setSelected","copied","setCopied","refElement","log","showGraphControls","gridSize","gridDotSize","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","onSelectNode","viewNode","onCreateNode","tmpNodes","newPlayerNr","nums","len","i","pos","Math","abs","Infinity","firstMissingPositive","element","elementAfterSplit","onUpdateNode","searchNode","findIndex","node","onDeleteNode","_nodeId","nodeArr","newEdges","onSelectEdge","viewEdge","onCreateEdge","sourceViewNode","targetViewNode","viewEdgeRealSource","viewEdgeRealTarget","isConnectionDefined","edgeSourceRealTitle","edgeTargetRealTitle","isSourceCopy","isTargetCopy","isConnectionValid","shouldEdgeBeCreated","onSwapEdge","searchEdge","tmpEdges","JSON","parse","stringify","onDeleteEdge","_viewEdge","onCopySelected","onPasteSelected","arrayOfCopies","newNode","readOnly","InformationSection","CalculatorGraph","content","trigger","generateMCNetsRulesFromEdges","generateFunctionOfCoalitionsFromEdges","TabPane","Tabs","AppBody","activeTabKey","onTabClick","centered","tab","AppHeader","subTitle","initialState","action","combineReducers","createStore","rootReducer","App","store","prototype","separator","this","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78fda52f.chunk.js","sourcesContent":["export const ActionTypes = {\r\n  SET_COALITIONS_NUMBER_OF_PLAYERS: \"SET_COALITIONS_NUMBER_OF_PLAYERS\",\r\n  SET_COALITIONS_COALITIONS: \"SET_COALITIONS_COALITIONS\",\r\n  SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n    \"SET_COALITIONS_FUNCTION_OF_COALITIONS\",\r\n  SET_COALITIONS_SHAPLEY_VALUES: \"SET_COALITIONS_SHAPLEY_VALUES\",\r\n  SET_MCNETS_NUMBER_OF_PLAYERS: \"SET_MCNETS_NUMBER_OF_PLAYERS\",\r\n  SET_MCNETS_RULES: \"SET_MCNETS_RULES\",\r\n  SET_MCNETS_SHAPLEY_VALUES: \"SET_MCNETS_SHAPLEY_VALUES\",\r\n  SET_GRAPH_NUMBER_OF_PLAYERS: \"SET_GRAPH_NUMBER_OF_PLAYERS\",\r\n  SET_GRAPH_EDGES: \"SET_GRAPH_EDGES\",\r\n  SET_GRAPH_NODES: \"SET_GRAPH_NODES\",\r\n  SET_GRAPH_SHAPLEY_VALUES: \"SET_GRAPH_SHAPLEY_VALUES\",\r\n};\r\n\r\nexport default ActionTypes;\r\n","import { IEdge, INode } from \"react-digraph\";\r\nimport { IMCNetsRule } from \"../type\";\r\nimport ActionTypes from \"./actionTypes\";\r\n\r\nexport const setCoalitionsNumberOfplayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setCoalitionsCoalitions = (\r\n  coalitions: number[][]\r\n): {\r\n  type: string;\r\n  payload: number[][];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_COALITIONS,\r\n  payload: coalitions,\r\n});\r\n\r\nexport const setCoalitionsFunctionOfCoalitions = (\r\n  functionOfCoalitions: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS,\r\n  payload: functionOfCoalitions,\r\n});\r\n\r\nexport const setCoalitionsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setMCNetsNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => {\r\n  return {\r\n    type: ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS,\r\n    payload: nrOfPlayes,\r\n  };\r\n};\r\n\r\nexport const setMCNetsRules = (\r\n  rules: IMCNetsRule[]\r\n): {\r\n  type: string;\r\n  payload: IMCNetsRule[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_RULES,\r\n  payload: rules,\r\n});\r\n\r\nexport const setMCNetsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setGraphNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setGraphNodes = (\r\n  nodes: INode[]\r\n): {\r\n  type: string;\r\n  payload: INode[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NODES,\r\n  payload: nodes,\r\n});\r\n\r\nexport const setGraphEdges = (\r\n  edges: IEdge[]\r\n): {\r\n  type: string;\r\n  payload: IEdge[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_EDGES,\r\n  payload: edges,\r\n});\r\n\r\nexport const setGraphShapleyValues = (\r\n  values: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_SHAPLEY_VALUES,\r\n  payload: values,\r\n});\r\n","import React from \"react\";\r\n\r\nexport const NODE_KEY = \"id\";\r\nexport const PLAYER_TYPE = \"player\";\r\nexport const NORMAL_EDGE = \"normalEdge\";\r\nexport const nodeTypes = [PLAYER_TYPE];\r\nexport const edgeTypes = [NORMAL_EDGE];\r\n\r\nconst playerShape = (\r\n  <symbol viewBox=\"0 0 200 200\" id=\"player\">\r\n    <circle cx=\"100\" cy=\"100\" r=\"50\" />\r\n  </symbol>\r\n);\r\n\r\nconst normalEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"normalEdge\">\r\n    <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nexport const nodeConfig = {\r\n  EdgeTypes: {\r\n    normalEdge: {\r\n      shape: normalEdgeShape,\r\n      shapeId: \"#normalEdge\",\r\n    },\r\n  },\r\n  NodeSubtypes: {},\r\n  NodeTypes: {\r\n    player: {\r\n      shape: playerShape,\r\n      shapeId: \"#player\",\r\n      typeText: \"Player\",\r\n    },\r\n  },\r\n};\r\n","import { PLAYER_TYPE } from \"../calculator-graph/config\";\r\n\r\nexport const coalitionsExamples = [\r\n  {\r\n    nrOfPlayers: 1,\r\n    coalitions: [[], [1]],\r\n    functionOfCoalitions: [0, 1],\r\n  },\r\n];\r\n\r\nexport const mcNetsExamples = [\r\n  {\r\n    nrOfPlayers: 1,\r\n    rules: [{ value: 1, positivePlayers: [\"1\"], negativePlayers: [] }],\r\n  },\r\n];\r\nexport const graphExamples = [\r\n  {\r\n    nrOfPlayers: 2,\r\n    nodes: [\r\n      {\r\n        id: \"1\",\r\n        title: \"1\",\r\n        type: PLAYER_TYPE,\r\n        x: 300,\r\n        y: 300,\r\n      },\r\n      {\r\n        id: \"2\",\r\n        title: \"2\",\r\n        type: PLAYER_TYPE,\r\n        x: 600,\r\n        y: 300,\r\n      },\r\n    ],\r\n    edges: [\r\n      {\r\n        handleText: \"0\",\r\n        source: \"1\",\r\n        target: \"2\",\r\n        type: \"normalEdge\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { Button, Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setGraphEdges,\r\n  setGraphNodes,\r\n  setGraphNumberOfPlayers,\r\n  setGraphShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, IMCNetsRule, Store } from \"../../../type\";\r\nimport { connect } from \"react-redux\";\r\nimport { coalitionsExamples, graphExamples, mcNetsExamples } from \"./examples\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\nimport { IEdge, INode } from \"react-digraph\";\r\n\r\ninterface IGameExamplesProps {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setGraphNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setGraphNodes: (nodes: INode[]) => void;\r\n  setGraphEdges: (edges: IEdge[]) => void;\r\n}\r\n\r\nexport const GameExamplesNotConnected = (\r\n  props: IGameExamplesProps\r\n): JSX.Element => {\r\n  const {\r\n    setActiveTabKey,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n    setGraphNumberOfPlayers,\r\n    setGraphEdges,\r\n    setGraphNodes,\r\n  } = props;\r\n  const loadCoalitionStructureGame = (chosenGame: string) => {\r\n    switch (chosenGame) {\r\n      case \"something\":\r\n        setCoalitionsNumberOfplayers(coalitionsExamples[0].nrOfPlayers);\r\n        setCoalitionsCoalitions(coalitionsExamples[0].coalitions);\r\n        setCoalitionsFunctionOfCoalitions(\r\n          coalitionsExamples[0].functionOfCoalitions\r\n        );\r\n        break;\r\n      default:\r\n        console.warn(\"Invalid game example\");\r\n    }\r\n    setActiveTabKey(\"coalition\");\r\n  };\r\n  const loadMCNetsGame = (chosenGame: string) => {\r\n    switch (chosenGame) {\r\n      case \"something\":\r\n        setMCNetsNumberOfPlayers(mcNetsExamples[0].nrOfPlayers);\r\n        setMCNetsRules(mcNetsExamples[0].rules);\r\n        break;\r\n      default:\r\n        console.warn(\"Invalid game example\");\r\n    }\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n  const loadGraphGame = (chosenGame: string) => {\r\n    switch (chosenGame) {\r\n      case \"something\":\r\n        setGraphNumberOfPlayers(graphExamples[0].nrOfPlayers);\r\n        setGraphNodes(graphExamples[0].nodes);\r\n        setGraphEdges(graphExamples[0].edges);\r\n        break;\r\n      default:\r\n        console.warn(\"Invalid game example\");\r\n    }\r\n    setActiveTabKey(\"graph\");\r\n  };\r\n  const dataSource = [{ description: \"Simple example\", example: \"something\" }];\r\n  const columns = [\r\n    {\r\n      title: \"Game description\",\r\n      dataIndex: \"description\",\r\n      key: \"description\",\r\n    },\r\n    {\r\n      title: \"Run example\",\r\n      dataIndex: \"example\",\r\n      key: \"example\",\r\n      width: 280,\r\n      render: (text: string) => (\r\n        <div>\r\n          <Button size=\"small\" onClick={() => loadCoalitionStructureGame(text)}>\r\n            Coalition Structures\r\n          </Button>\r\n          <Button size=\"small\" onClick={() => loadMCNetsGame(text)}>\r\n            MC-Nets\r\n          </Button>\r\n          <Button size=\"small\" onClick={() => loadGraphGame(text)}>\r\n            Graph\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <div className=\"game-examples\">\r\n      <Table\r\n        bordered={true}\r\n        size=\"small\"\r\n        dataSource={dataSource}\r\n        pagination={false}\r\n        className=\"game-examples-table\"\r\n        showHeader\r\n      >\r\n        {columns.map((column) => (\r\n          <Column {...column} />\r\n        ))}\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayes, edges, shapleyValues } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayes,\r\n    edges,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[] | IEdge[] | INode[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setGraphShapleyValues: (values: number[]) =>\r\n      dispatch(setGraphShapleyValues(values)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n    setGraphNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setGraphNumberOfPlayers(nrOfPlayes)),\r\n    setGraphEdges: (edges: IEdge[]) => dispatch(setGraphEdges(edges)),\r\n    setGraphNodes: (nodes: INode[]) => dispatch(setGraphNodes(nodes)),\r\n  };\r\n};\r\n\r\nexport const GameExamples = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GameExamplesNotConnected);\r\n\r\nexport default GameExamples;\r\n","import { IEdge } from \"react-digraph\";\r\nimport _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const separatorString = \"-copy-of-\";\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (arr: Array<number>) =>\r\n  arr\r\n    .reduce(\r\n      (subsets: number[][], value: number) =>\r\n        subsets.concat(subsets.map((set) => [...set, value])),\r\n      [[]]\r\n    )\r\n    .sort((a, b) => a.length - b.length);\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ] ?? 0;\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - (valueOfCoalitionWithoutPlayer ?? 0)) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number): number[] =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values.map((value) => Number(value.toFixed(2)));\r\n};\r\n\r\nexport const generateCoalitionsFromEdges = (\r\n  edges: IEdge[]\r\n): Array<{ value: number; coalition: number[] }> => {\r\n  return edges.map((edge) => {\r\n    const source = parseFloat(edge.source.split(separatorString).at(-1) ?? \"\");\r\n    const target = parseFloat(edge.target.split(separatorString).at(-1) ?? \"\");\r\n    const value = parseFloat(edge.handleText ?? \"\");\r\n    return {\r\n      value,\r\n      coalition: source === target ? [source] : [source, target],\r\n    };\r\n  });\r\n};\r\n\r\nexport const calculateGraphShapleyValues = (\r\n  grandCoalition: number[],\r\n  edges: IEdge[]\r\n): number[] => {\r\n  const edgesStructure = generateCoalitionsFromEdges(edges);\r\n  return grandCoalition.map((player) => {\r\n    let value = 0;\r\n    edgesStructure.forEach((edge) => {\r\n      value += edge.coalition.includes(player)\r\n        ? edge.value / (edge.coalition.length === 2 ? 2 : 1)\r\n        : 0;\r\n    });\r\n    return value;\r\n  });\r\n};\r\n\r\nexport const generateMCNetsRulesFromEdges = (edges: IEdge[]): IMCNetsRule[] => {\r\n  return edges.map((edge) => {\r\n    const source = edge.source.split(separatorString).at(-1) ?? \"\";\r\n    const target = edge.target.split(separatorString).at(-1) ?? \"\";\r\n    const value = parseFloat(edge.handleText ?? \"\");\r\n    return {\r\n      value,\r\n      positivePlayers: source === target ? [source] : [source, target],\r\n      negativePlayers: [],\r\n    };\r\n  });\r\n};\r\n\r\nexport const generateCoalitionsCoalitionsFromEdges = (\r\n  edges: IEdge[]\r\n): number[][] => {\r\n  return edges.map((edge) => {\r\n    const source = parseFloat(edge.source.split(separatorString).at(-1) ?? \"\");\r\n    const target = parseFloat(edge.target.split(separatorString).at(-1) ?? \"\");\r\n    return source === target ? [source] : [source, target];\r\n  });\r\n};\r\n\r\nexport const generateFunctionOfCoalitionsFromEdges = (\r\n  coalitions: number[][],\r\n  edges: IEdge[]\r\n) =>\r\n  coalitions.map((coalition) => {\r\n    let value = 0;\r\n    edges?.forEach((edge) => {\r\n      const coalitionContainSourceAndTarget =\r\n        coalition.includes(\r\n          parseFloat(edge.source.elementAfterSplit(separatorString) ?? \"0\")\r\n        ) &&\r\n        coalition.includes(\r\n          parseFloat(edge.target.elementAfterSplit(separatorString) ?? \"0\")\r\n        );\r\n      if (coalitionContainSourceAndTarget) {\r\n        value += parseFloat(edge.handleText ?? \"0\");\r\n      }\r\n    });\r\n    return value;\r\n  });\r\n\r\nexport const generateFunctionOfCoalitionsFromMCNets = (\r\n  rules: IMCNetsRule[],\r\n  coalitions: number[][]\r\n): number[] => {\r\n  const functionOfCoalitions = Array(coalitions.length).fill(0);\r\n  coalitions.forEach((coalition) => {\r\n    rules.forEach((rule) => {\r\n      if (\r\n        rule.positivePlayers.every((player) =>\r\n          coalition.includes(parseFloat(player))\r\n        ) &&\r\n        !rule.negativePlayers.some((player) =>\r\n          coalition.includes(parseFloat(player))\r\n        )\r\n      ) {\r\n        functionOfCoalitions[indexOfArrayInArray(coalitions, coalition)] +=\r\n          rule.value;\r\n      }\r\n    });\r\n  });\r\n  return functionOfCoalitions;\r\n};\r\n","import React from \"react\";\r\nimport { Table, InputNumber } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCoalitionsFunctionOfCoalitions } from \"../../../redux/actions\";\r\nimport { Store } from \"../../../type\";\r\n\r\nexport interface ICoalitionStructuresInputProps {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => void;\r\n}\r\n\r\nexport const CoalitionStructuresInputNotConnected = (\r\n  props: ICoalitionStructuresInputProps\r\n): JSX.Element => {\r\n  const {\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const dataSource = coalitions?.map((coalition, index) => ({\r\n    key: index,\r\n    coalition: coalition.length ? coalition.toString() : \"Ø\",\r\n    value: 0,\r\n  }));\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Coalition\",\r\n      dataIndex: \"coalition\",\r\n      key: \"coalition\",\r\n      align: \"right\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (text: string, record: any) => (\r\n        <InputNumber\r\n          value={functionOfCoalitions?.[record.key]}\r\n          defaultValue={0}\r\n          onChange={(event: number) => {\r\n            const tmpFunction = functionOfCoalitions\r\n              ? [...functionOfCoalitions]\r\n              : [];\r\n            tmpFunction[record.key] = event;\r\n            setCoalitionsFunctionOfCoalitions(tmpFunction);\r\n          }}\r\n        />\r\n      ),\r\n      align: \"left\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"coalition-structures-input\"\r\n    >\r\n      {columns.map((column) => (\r\n        <Column {...column} />\r\n      ))}\r\n    </Table>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: {\r\n  aplication: Store;\r\n}): {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n} => {\r\n  return {\r\n    coalitions: state.aplication.coalitions?.coalitions,\r\n    functionOfCoalitions: state.aplication.coalitions?.functionOfCoalitions,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number[] }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CoalitionStructuresInput = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CoalitionStructuresInputNotConnected);\r\nexport default CoalitionStructuresInput;\r\n","import React from 'react'\r\nimport { Form, InputNumber } from \"antd\"\r\nexport interface INumberOfPlayersForm {\r\n  numberOfPlayers?: number\r\n  message?: string\r\n  maxValue: number\r\n  handleNumberOfPlayesChange?: (event: number) => void\r\n}\r\nexport const NumberOfPlayersForm = (props: INumberOfPlayersForm): JSX.Element => {\r\n  const { numberOfPlayers, message, maxValue, handleNumberOfPlayesChange } = props\r\n  return <Form\r\n    labelCol={{ span: 12 }}\r\n    wrapperCol={{ span: 12 }}\r\n    layout=\"horizontal\"\r\n    size=\"middle\"\r\n    className=\"number-of-players-input\"\r\n  >\r\n    <div className=\"error-message\">{message}</div>\r\n    <Form.Item labelAlign=\"right\" label=\"Number of players\">\r\n      <InputNumber\r\n        min={0}\r\n        max={maxValue - 1}\r\n        defaultValue={0}\r\n        value={numberOfPlayers}\r\n        onChange={handleNumberOfPlayesChange}\r\n      />\r\n    </Form.Item>\r\n  </Form>\r\n}\r\n\r\nexport default NumberOfPlayersForm","import React from 'react'\r\nimport { Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface IDisplayGeneratedValuesProps {\r\n  listShapleyValues: number[]\r\n  tableMaxHeight?: number\r\n}\r\n\r\nexport const DisplayGeneratedValues = (props: IDisplayGeneratedValuesProps): JSX.Element => {\r\n  const { listShapleyValues, tableMaxHeight } = props\r\n  const dataSource = listShapleyValues.map((shapleuValue, index) => {\r\n    return {\r\n      key: index,\r\n      value: shapleuValue,\r\n      playerNumber: index + 1\r\n    }\r\n  })\r\n\r\n  const columns = [{\r\n    title: 'Player number',\r\n    dataIndex: 'playerNumber',\r\n    key: 'playerNumber',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }, {\r\n    title: 'Player Shapley Value',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }]\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: tableMaxHeight ?? 300 }}\r\n      className=\"display-generated-values\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default DisplayGeneratedValues\r\n","import * as React from 'react'\r\nimport * as PapaParse from 'papaparse'\r\n\r\nexport interface IFileInfo {\r\n  name: string\r\n  size: number\r\n  type: string\r\n}\r\n\r\nexport interface CSVInputProps {\r\n  accept?: string\r\n  cssClass?: string\r\n  cssInputClass?: string\r\n  cssLabelClass?: string\r\n  fileEncoding?: string\r\n  inputId?: string\r\n  inputName?: string\r\n  inputStyle?: object\r\n  inputRef?: React.LegacyRef<HTMLInputElement>\r\n  label?: string | React.ReactNode\r\n  onError?: (error: Error) => void\r\n  onFileLoaded: (data: Array<any>, fileInfo: IFileInfo, originalFile?: File) => any\r\n  parserOptions?: PapaParse.ParseConfig\r\n  disabled?: boolean\r\n  strict?: boolean\r\n}\r\n\r\nconst CSVInput: React.FC<CSVInputProps> = ({\r\n  accept = '.csv, text/csv',\r\n  cssClass = 'csv-reader-input',\r\n  cssInputClass = 'csv-input',\r\n  cssLabelClass = 'csv-label',\r\n  fileEncoding = 'UTF-8',\r\n  inputId = 'react-csv-reader-input',\r\n  inputName = 'react-csv-reader-input',\r\n  inputStyle = {},\r\n  inputRef,\r\n  label,\r\n  onError = () => {},\r\n  onFileLoaded,\r\n  parserOptions = {} as PapaParse.ParseConfig,\r\n  disabled = false,\r\n  strict = false,\r\n}) => {\r\n  const handleChangeFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let reader: FileReader = new FileReader()\r\n    const files: FileList = e.target.files!\r\n\r\n    if (files.length > 0) {\r\n      const fileInfo: IFileInfo = {\r\n        name: files[0].name,\r\n        size: files[0].size,\r\n        type: files[0].type,\r\n      }\r\n\r\n      if (strict && accept.indexOf(fileInfo.type) <= 0) {\r\n        onError(new Error(`[strict mode] Accept type not respected: got '${fileInfo.type}' but not in '${accept}'`))\r\n        return\r\n      }\r\n\r\n      reader.onload = (_event: Event) => {\r\n        const csvData = PapaParse.parse(\r\n          reader.result as string,\r\n          Object.assign(parserOptions, {\r\n            error: onError,\r\n            encoding: fileEncoding,\r\n          }),\r\n        )\r\n        onFileLoaded(csvData?.data ?? [], fileInfo, files[0])\r\n      }\r\n\r\n      reader.readAsText(files[0], fileEncoding)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cssClass}>\r\n      {label && (\r\n        <label className={cssLabelClass} htmlFor={inputId}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <input\r\n        className={cssInputClass}\r\n        type=\"file\"\r\n        id={inputId}\r\n        name={inputName}\r\n        style={inputStyle}\r\n        accept={accept}\r\n        onChange={handleChangeFile}\r\n        disabled={disabled}\r\n        ref={inputRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CSVInput\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Button, Col, Row } from \"antd\";\r\nimport \"./calculator-coalition-structures.scss\";\r\nimport {\r\n  calculateAllShapleyValues,\r\n  generateCoalitions,\r\n  generateCoalitionOfN,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport CoalitionStructuresInput from \"./coalition-structures-input\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setCoalitionsShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\nimport { CoalitionsGame, IMCNetsRule, Store } from \"../../../type\";\r\nimport CSVInput from \"./csv-input\";\r\n\r\ninterface ICalculatorCoalitionStructuresProps extends CoalitionsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setCoalitionsShapleyValues: (content: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  };\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nconst CalculatorCoalitionStructuresNotConnected = (\r\n  props: ICalculatorCoalitionStructuresProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n    setCoalitionsShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n  } = props;\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>(\r\n    nrOfPlayes ? generateCoalitionOfN(nrOfPlayes) : []\r\n  );\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const maxValue = 10;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < maxValue) {\r\n      setCoalitionsNumberOfplayers(event);\r\n      setGrandCalition(generateCoalitionOfN(event));\r\n      setCoalitionsFunctionOfCoalitions(Array(2 ** event).fill(0));\r\n      setCoalitionsShapleyValues([]);\r\n      setMessage(undefined);\r\n    } else setMessage(\"Number of coalition members exceded!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      const newCoalitions = generateCoalitions(grandCoalition);\r\n      newCoalitions[0].unshift(0);\r\n      setCoalitionsCoalitions(newCoalitions);\r\n    }\r\n  }, [grandCoalition, setCoalitionsCoalitions]);\r\n\r\n  useEffect(() => {\r\n    setGrandCalition(generateCoalitionOfN(nrOfPlayes ?? 0));\r\n  }, [nrOfPlayes]);\r\n\r\n  const handleForce = (data: any) => {\r\n    const newCoalitions: number[][] = [];\r\n    const newFunctionOfCoalitions: number[] = [];\r\n    let numberOfPlayers = 0;\r\n\r\n    data.forEach((row: number[]) => {\r\n      row.pop();\r\n      const currentCoalition = row.slice(0, -1);\r\n      numberOfPlayers =\r\n        currentCoalition.length > numberOfPlayers\r\n          ? currentCoalition.length\r\n          : numberOfPlayers;\r\n      newCoalitions.push(currentCoalition);\r\n      newFunctionOfCoalitions.push(row.slice(-1).pop() ?? 0);\r\n    });\r\n\r\n    setCoalitionsNumberOfplayers(numberOfPlayers);\r\n    setCoalitionsCoalitions(newCoalitions);\r\n    setCoalitionsFunctionOfCoalitions(newFunctionOfCoalitions);\r\n    if (inputRef.current) {\r\n      inputRef.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  const handleDownloadGameDefinition = () => {\r\n    const gameDefinition: number[][] = coalitions?.map((coalition, index) => {\r\n      return [...coalition, functionOfCoalitions?.[index] ?? 0];\r\n    }) ?? [[0]];\r\n    // gameDefinition[0].unshift(0);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,\" +\r\n      gameDefinition?.map((e) => e.join(\",\") + \",\").join(\"\\n\");\r\n\r\n    window.open(encodeURI(csvContent));\r\n  };\r\n\r\n  const translateToMCNets = () => {\r\n    const newRules: IMCNetsRule[] = [];\r\n    functionOfCoalitions?.forEach((value, index) => {\r\n      if (value) {\r\n        newRules.push({\r\n          positivePlayers: coalitions?.[index]?.map(String) ?? [],\r\n          negativePlayers:\r\n            grandCoalition\r\n              .filter((player) => !coalitions?.[index]?.includes(player))\r\n              .map(String) ?? [],\r\n          value: value ?? 0,\r\n        });\r\n      }\r\n    });\r\n    setMCNetsNumberOfPlayers(grandCoalition.length);\r\n    setMCNetsRules(newRules);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-structures\">\r\n      <NumberOfPlayersForm\r\n        numberOfPlayers={nrOfPlayes}\r\n        maxValue={maxValue}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      <Row justify=\"center\">\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <CoalitionStructuresInput />\r\n          <div className=\"upload\">\r\n            <CSVInput\r\n              cssClass=\"react-csv-input\"\r\n              label={\r\n                <div className=\"ant-btn ant-btn-default\">\r\n                  <span>Upload game definition from .csv file</span>{\" \"}\r\n                </div>\r\n              }\r\n              onFileLoaded={handleForce}\r\n              inputStyle={{ display: \"none\" }}\r\n              inputName=\"input2\"\r\n              inputRef={inputRef}\r\n              parserOptions={{\r\n                header: false,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"download\">\r\n            <Button onClick={handleDownloadGameDefinition}>\r\n              Download Game Definition\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n        <Col className=\"buttons-col\" xs={24} sm={24} md={24} lg={4} xl={4}>\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={!nrOfPlayes}\r\n            style={{ margin: \"8px\" }}\r\n            className=\"generate-button\"\r\n            onClick={() =>\r\n              setCoalitionsShapleyValues(\r\n                calculateAllShapleyValues(\r\n                  grandCoalition,\r\n                  coalitions ?? [],\r\n                  functionOfCoalitions ?? []\r\n                )\r\n              )\r\n            }\r\n          >\r\n            Generate Shapley Values\r\n          </Button>\r\n          <Button\r\n            disabled={!nrOfPlayes}\r\n            className=\"generate-button\"\r\n            onClick={translateToMCNets}\r\n          >\r\n            Translate to MC Nets\r\n          </Button>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): CoalitionsGame => {\r\n  const { nrOfPlayes, coalitions, functionOfCoalitions, shapleyValues } =\r\n    state.aplication.coalitions || {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    coalitions: coalitions,\r\n    functionOfCoalitions: functionOfCoalitions,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n    setCoalitionsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setCoalitionsShapleyValues(shapleyValues)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n  };\r\n};\r\nexport const CalculatorCoalitionStructures = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorCoalitionStructuresNotConnected);\r\nexport default CalculatorCoalitionStructures;\r\n","import React from \"react\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { IMCNetsRule, McNetsGame, Store } from \"../../../../type\";\r\n\r\nexport interface IAddMCNetsRuleProps {\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\n\r\nexport const AddMCNetsRuleNotConnected = (\r\n  props: IAddMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { rules, setMCNetsRules } = props;\r\n\r\n  return (\r\n    <div className=\"add-mc-nets-rule\">\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col flex=\"64px\">Add Rule</Col>\r\n        <Col flex=\"40px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() =>\r\n              setMCNetsRules([\r\n                ...(rules ?? []),\r\n                {\r\n                  positivePlayers: [],\r\n                  negativePlayers: [],\r\n                  value: 0,\r\n                },\r\n              ])\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  return {\r\n    rules: state.aplication.mcNets?.rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const AddMCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddMCNetsRuleNotConnected);\r\n\r\nexport default AddMCNetsRule;\r\n","import React from 'react'\r\nimport { Checkbox } from \"antd\"\r\nimport './player-group.css'\r\n\r\ninterface IPlayersGroupprops {\r\n  options: string[]\r\n  value: string[]\r\n  onChange: (checkedValues: any) => void\r\n}\r\n\r\nexport const PlayersGroup = (props: IPlayersGroupprops) => {\r\n  const { options, value, onChange } = props\r\n  return (\r\n    <div className=\"player-group\">\r\n      <Checkbox.Group options={options} value={value} onChange={onChange} style={{ width: `calc(${options.length} * 52px)` }} />\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { MinusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, InputNumber, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { generateCoalitionOfN } from \"../../../../utilities/calculation-functions\";\r\nimport { PlayersGroup } from \"./player-group/players-group\";\r\nimport { Store, IMCNetsRule, McNetsGame } from \"../../../../type\";\r\nexport interface IMCNetsRuleProps {\r\n  index: number;\r\n  nrOfPlayes?: number;\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\nexport const MCNetsRuleNotConnected = (\r\n  props: IMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { index, nrOfPlayes, rules, setMCNetsRules } = props;\r\n  const onPositiveChange = (checkedValues: string[]) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].positivePlayers = checkedValues;\r\n    tmpRules[index].negativePlayers = tmpRules[index].negativePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n  const onNegativeChange = (checkedValues: any) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].negativePlayers = checkedValues;\r\n    tmpRules[index].positivePlayers = tmpRules[index].positivePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n\r\n  const plainOptions = generateCoalitionOfN(nrOfPlayes ?? 0).map(String);\r\n\r\n  return (\r\n    <div className=\"mc-nets-rule\">\r\n      <Row wrap={false} justify=\"center\">\r\n        <Col flex=\"100px\" className=\"mc-nets-rule-name\">\r\n          {`Rule nr ${index}`}\r\n          <InputNumber\r\n            placeholder=\"Value\"\r\n            onChange={(event) => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules[index].value = event as number;\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n            value={rules?.[index].value}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <PlayersGroup\r\n            onChange={onPositiveChange}\r\n            value={rules?.[index].positivePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <PlayersGroup\r\n            onChange={onNegativeChange}\r\n            value={rules?.[index].negativePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"48px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<MinusOutlined />}\r\n            style={{ margin: \"0 8px\" }}\r\n            onClick={() => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules.splice(index, 1);\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const MCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MCNetsRuleNotConnected);\r\n\r\nexport default MCNetsRule;\r\n","import { Button, Col, Collapse, Row } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  calculateMCNetsShapleyValues,\r\n  generateCoalitionOfN,\r\n  generateCoalitions,\r\n  generateFunctionOfCoalitionsFromMCNets,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport { AddMCNetsRule } from \"./add-mc-nets-rule/add-mc-nets-rule\";\r\nimport { MCNetsRule } from \"./mc-nets-rule/mc-nets-rule\";\r\nimport \"./calculator-mc-nets.scss\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n  setMCNetsShapleyValues,\r\n} from \"../../../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Store, McNetsGame, IMCNetsRule } from \"../../../type\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\n\r\ninterface ICalculatorMCNetsProps extends McNetsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nexport const CalculatorMCNetsNotConnected = (\r\n  props: ICalculatorMCNetsProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsShapleyValues,\r\n    setMCNetsRules,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    const isDecrement = event < (nrOfPlayes ?? 0);\r\n    setMCNetsNumberOfPlayers(event);\r\n    setMCNetsShapleyValues([]);\r\n    if (isDecrement) {\r\n      setMCNetsRules(\r\n        rules?.map((rule) => {\r\n          const { value, positivePlayers, negativePlayers } = rule;\r\n          const nrOfPlayersString = (nrOfPlayes ?? 0).toString();\r\n          return {\r\n            value,\r\n            positivePlayers: positivePlayers.filter(\r\n              (player) => player !== nrOfPlayersString\r\n            ),\r\n            negativePlayers: negativePlayers.filter(\r\n              (player) => player !== nrOfPlayersString\r\n            ),\r\n          };\r\n        }) ?? []\r\n      );\r\n    }\r\n  };\r\n\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\"]);\r\n  const translateMCNetsToCoalitions = () => {\r\n    const coalitions = generateCoalitions(\r\n      generateCoalitionOfN(nrOfPlayes ?? 0)\r\n    );\r\n    setCoalitionsNumberOfplayers(nrOfPlayes ?? 0);\r\n    setCoalitionsCoalitions(coalitions);\r\n    setCoalitionsFunctionOfCoalitions(\r\n      generateFunctionOfCoalitionsFromMCNets(rules ?? [], coalitions)\r\n    );\r\n    setActiveTabKey(\"coalition\");\r\n  };\r\n  return (\r\n    <div className=\"calculator-mc-nets\">\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Game Definition\" key=\"1\">\r\n          <Row justify=\"center\" style={{ marginBottom: \"16px\" }}>\r\n            <Col span={8}>\r\n              <NumberOfPlayersForm\r\n                maxValue={20}\r\n                numberOfPlayers={nrOfPlayes}\r\n                handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n              />\r\n            </Col>\r\n            <Col span={8}>\r\n              <Button\r\n                type=\"primary\"\r\n                disabled={!nrOfPlayes}\r\n                className=\"generate-button\"\r\n                onClick={() => {\r\n                  setMCNetsShapleyValues(\r\n                    calculateMCNetsShapleyValues(rules ?? [], nrOfPlayes ?? 0)\r\n                  );\r\n                  const tmpActiveKeys = activeKeys.includes(\"2\")\r\n                    ? activeKeys\r\n                    : [...activeKeys, \"2\"];\r\n                  setActiveKeys(tmpActiveKeys);\r\n                }}\r\n              >\r\n                Generate Shapley Values\r\n              </Button>\r\n              <Button\r\n                disabled={!nrOfPlayes && (nrOfPlayes ?? 0) < 10}\r\n                className=\"generate-button\"\r\n                onClick={translateMCNetsToCoalitions}\r\n                style={{ marginLeft: \"16px\" }}\r\n              >\r\n                Translate to Coalitions\r\n              </Button>\r\n            </Col>\r\n            <Col span={8}>\r\n              <AddMCNetsRule />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"mc-nets-rules\">\r\n            {rules?.length ? (\r\n              <Row align=\"middle\" wrap={false} justify=\"center\">\r\n                <Col flex=\"100px\" className=\"mc-nets-rule-name\"></Col>\r\n\r\n                <Col flex=\"auto\">\r\n                  <div className=\"player-group-name\">Positive Players</div>\r\n                </Col>\r\n                <Col flex=\"auto\">\r\n                  <div className=\"player-group-name\">Negative Players</div>\r\n                </Col>\r\n              </Row>\r\n            ) : null}\r\n            {rules?.map((_rule, index) => {\r\n              return <MCNetsRule key={index} index={index} />;\r\n            })}\r\n          </div>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"Shapley Values\"\r\n          key=\"2\"\r\n          className=\"values-panel\"\r\n        >\r\n          <DisplayGeneratedValues\r\n            listShapleyValues={shapleyValues ?? []}\r\n            tableMaxHeight={200}\r\n          />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules, shapleyValues } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setMCNetsShapleyValues(shapleyValues)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CalculatorMCNets = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorMCNetsNotConnected);\r\n\r\nexport default CalculatorMCNets;\r\n","import React from \"react\";\r\nimport { Form, InputNumber } from \"antd\";\r\ninterface IGraphInputSectionProps {\r\n  valueForEdge: number;\r\n  setValueForEdge: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\nexport const GraphInputSection = (props: IGraphInputSectionProps) => {\r\n  const { valueForEdge, setValueForEdge } = props;\r\n  return (\r\n    <div className=\"graph-input-section\">\r\n      <Form\r\n        layout=\"horizontal\"\r\n        size=\"middle\"\r\n        className=\"number-of-players-input\"\r\n      >\r\n        <Form.Item labelAlign=\"right\" label=\"Edge value\">\r\n          <InputNumber\r\n            value={valueForEdge}\r\n            onChange={(e) => setValueForEdge(e)}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component, useRef, useState } from \"react\";\r\nimport { firstMissingPositive } from \"../../../utilities/calculationg-functions\";\r\nimport { GraphView, IEdge, IGraphViewProps, INode } from \"react-digraph\";\r\nimport { nodeConfig, PLAYER_TYPE, NODE_KEY, NORMAL_EDGE } from \"./config\";\r\nimport {\r\n  setGraphNumberOfPlayers,\r\n  setGraphNodes,\r\n  setGraphEdges,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, Store } from \"../../../type\";\r\nimport { connect } from \"react-redux\";\r\nimport { GraphInputSection } from \"./graph-input-section\";\r\nimport { separatorString } from \"../../../utilities/calculation-functions\";\r\n\r\ninterface IGraphProps extends GraphGame {\r\n  setGraphNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setGraphNodes: (nodes: INode[]) => void;\r\n  setGraphEdges: (edges: IEdge[]) => void;\r\n}\r\n\r\nexport const GraphNotConnected = (props: IGraphProps) => {\r\n  const {\r\n    nrOfPlayes,\r\n    edges,\r\n    nodes,\r\n    setGraphNumberOfPlayers,\r\n    setGraphEdges,\r\n    setGraphNodes,\r\n  } = props;\r\n  const copyString = \"copied \";\r\n  const [valueForEdge, setValueForEdge] = useState(0);\r\n  const [selected, setSelected] = useState<IEdge | INode | null>(null);\r\n  const [copied, setCopied] = useState<IEdge | INode | null>(null);\r\n  const refElement = useRef<Component<IGraphViewProps>>(null);\r\n  console.log(edges);\r\n\r\n  const getNodeIndex = (searchNode: { [x: string]: string }): number => {\r\n    return nodes\r\n      ? nodes.findIndex((node) => {\r\n          return node[NODE_KEY] === searchNode[NODE_KEY];\r\n        })\r\n      : -1;\r\n  };\r\n\r\n  const getEdgeIndex = (searchEdge: {\r\n    source: string | number;\r\n    target: string | number;\r\n  }): number => {\r\n    return edges\r\n      ? edges.findIndex((edge) => {\r\n          return (\r\n            edge.source === searchEdge.source &&\r\n            edge.target === searchEdge.target\r\n          );\r\n        })\r\n      : -1;\r\n  };\r\n\r\n  const onUpdateNode = (viewNode: INode): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const i = getNodeIndex(viewNode);\r\n    tmpNodes[i] = viewNode;\r\n    setGraphNodes(tmpNodes ?? []);\r\n  };\r\n\r\n  const onSelectNode = (viewNode: INode | null): void => {\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onSelectEdge = (viewEdge: IEdge): void => {\r\n    setSelected(viewEdge);\r\n  };\r\n\r\n  const onCreateNode = (x: number, y: number): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const playersNumbers = tmpNodes\r\n      .map((element) => element.title.elementAfterSplit(copyString))\r\n      .filter(String)\r\n      .map(Number);\r\n    const newPlayerNr = firstMissingPositive(playersNumbers);\r\n    const viewNode = {\r\n      id: `${newPlayerNr}`,\r\n      title: `${newPlayerNr}`,\r\n      type: PLAYER_TYPE,\r\n      x,\r\n      y,\r\n    };\r\n    tmpNodes.push(viewNode);\r\n    setGraphNumberOfPlayers(newPlayerNr);\r\n    setGraphNodes(tmpNodes);\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onDeleteNode = (\r\n    viewNode: INode,\r\n    _nodeId: number | string,\r\n    nodeArr: INode[]\r\n  ): void => {\r\n    const newEdges = edges?.filter((edge, i) => {\r\n      return (\r\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\r\n      );\r\n    });\r\n    if (!viewNode.title.includes(copyString)) {\r\n      setGraphNumberOfPlayers(nrOfPlayes ? nrOfPlayes - 1 : 0);\r\n    }\r\n    setGraphNodes(nodeArr);\r\n    setGraphEdges(newEdges ?? []);\r\n    setSelected(null);\r\n  };\r\n\r\n  const shouldEdgeBeCreated = (viewEdge: IEdge): boolean => {\r\n    const viewEdgeRealSource =\r\n      viewEdge.source?.elementAfterSplit(separatorString);\r\n    const viewEdgeRealTarget =\r\n      viewEdge.target?.elementAfterSplit(separatorString);\r\n\r\n    const isConnectionDefined = edges?.some((edge) => {\r\n      const edgeSourceRealTitle =\r\n        edge?.source?.elementAfterSplit(separatorString);\r\n      const edgeTargetRealTitle =\r\n        edge?.target?.elementAfterSplit(separatorString);\r\n\r\n      if (\r\n        viewEdgeRealSource === edgeSourceRealTitle &&\r\n        viewEdgeRealTarget === edgeTargetRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      if (\r\n        viewEdgeRealSource === edgeTargetRealTitle &&\r\n        viewEdgeRealTarget === edgeSourceRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n    const isSourceCopy = viewEdge.source.includes(separatorString);\r\n    const isTargetCopy = viewEdge.target.includes(separatorString);\r\n    const isTargetOriginal = viewEdgeRealTarget === viewEdgeRealSource;\r\n    const isConnectionValid = !(isSourceCopy && !isTargetOriginal);\r\n    return (\r\n      //is the same\r\n      viewEdge.source !== viewEdge.target &&\r\n      //is already defined\r\n      !isConnectionDefined &&\r\n      // apply to game rules\r\n      isConnectionValid &&\r\n      !isTargetCopy\r\n    );\r\n  };\r\n\r\n  const onCreateEdge = (sourceViewNode: INode, targetViewNode: INode): void => {\r\n    const viewEdge: IEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      handleText: valueForEdge.toString(),\r\n      type: NORMAL_EDGE,\r\n    };\r\n    if (shouldEdgeBeCreated(viewEdge)) {\r\n      setGraphEdges([...(edges ?? []), viewEdge]);\r\n      setSelected(viewEdge);\r\n    }\r\n  };\r\n\r\n  const onSwapEdge = (\r\n    sourceViewNode: INode,\r\n    targetViewNode: INode,\r\n    viewEdge: IEdge\r\n  ): void => {\r\n    const tmpEdges = edges ?? [];\r\n    const i = getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(tmpEdges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    tmpEdges[i] = edge;\r\n    setGraphEdges([...tmpEdges]);\r\n    setSelected(edge);\r\n  };\r\n\r\n  const onDeleteEdge = (_viewEdge: IEdge, edges: IEdge[]): void => {\r\n    setGraphEdges(edges);\r\n    setSelected(null);\r\n  };\r\n\r\n  const onCopySelected = (): void => {\r\n    if (selected?.source) {\r\n      console.warn(\"Cannot copy selected edges, try selecting a node instead.\");\r\n      return;\r\n    }\r\n    if (selected) {\r\n      const x = (selected.x + 20).toString();\r\n      const y = (selected.y + 20).toString();\r\n      setCopied({ ...selected, x, y });\r\n    }\r\n  };\r\n\r\n  const onPasteSelected = (): void | null => {\r\n    if (copied) {\r\n      const arrayOfCopies = nodes?.filter((node) => {\r\n        return (\r\n          node.title.elementAfterSplit(copyString) ===\r\n          copied.title.elementAfterSplit(copyString)\r\n        );\r\n      });\r\n\r\n      if (arrayOfCopies && arrayOfCopies.length >= 2) {\r\n        console.warn(\"Node already have a copy\");\r\n        return null;\r\n      }\r\n\r\n      const tmpNodes = nodes;\r\n      const newNode = {\r\n        ...copied,\r\n        id: `${(nrOfPlayes ?? 0) + 1}${separatorString}${copied.id}`,\r\n        title: `${copyString}${copied.title}`,\r\n      };\r\n      setGraphNodes([...(tmpNodes ?? []), newNode]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <GraphInputSection\r\n        valueForEdge={valueForEdge}\r\n        setValueForEdge={setValueForEdge}\r\n      />\r\n      <GraphView\r\n        showGraphControls={true}\r\n        gridSize={12000}\r\n        gridDotSize={1}\r\n        ref={refElement}\r\n        nodeKey={NODE_KEY}\r\n        nodes={nodes ?? []}\r\n        edges={edges ?? []}\r\n        selected={selected}\r\n        nodeTypes={nodeConfig.NodeTypes}\r\n        nodeSubtypes={nodeConfig.NodeSubtypes}\r\n        edgeTypes={nodeConfig.NodeTypes}\r\n        onSelectNode={onSelectNode}\r\n        onCreateNode={onCreateNode}\r\n        onUpdateNode={onUpdateNode}\r\n        onDeleteNode={onDeleteNode}\r\n        onSelectEdge={onSelectEdge}\r\n        onCreateEdge={onCreateEdge}\r\n        onSwapEdge={onSwapEdge}\r\n        onDeleteEdge={onDeleteEdge}\r\n        onCopySelected={onCopySelected}\r\n        onPasteSelected={onPasteSelected}\r\n        readOnly={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayes, edges, nodes } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayes,\r\n    edges,\r\n    nodes,\r\n  };\r\n};\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number | IEdge[] | INode[] }) => any\r\n) => {\r\n  return {\r\n    setGraphNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setGraphNumberOfPlayers(nrOfPlayes)),\r\n    setGraphEdges: (edges: IEdge[]) => dispatch(setGraphEdges(edges)),\r\n    setGraphNodes: (nodes: INode[]) => dispatch(setGraphNodes(nodes)),\r\n  };\r\n};\r\n\r\nexport const Graph = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GraphNotConnected);\r\n\r\nexport default Graph;\r\n","import _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (inp: Array<number>) => {\r\n  const length = inp.length;\r\n  const allCoalitions = [];\r\n\r\n  for (let i = 0; i < Math.pow(2, length); i++) {\r\n    const subset = [];\r\n\r\n    for (var j = 0; j < length; j++) {\r\n      if (i & (1 << j)) {\r\n        subset.push(inp[j]);\r\n      }\r\n    }\r\n    allCoalitions.push(subset);\r\n  }\r\n\r\n  return allCoalitions;\r\n};\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ];\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - valueOfCoalitionWithoutPlayer) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number) =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\nexport const firstMissingPositive = (nums: number[]) => {\r\n  let len = nums.length;\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] < 0) nums[i] = 0;\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    let pos = Math.abs(nums[i]) - 1;\r\n    if (pos >= 0 && pos <= len) {\r\n      if (nums[pos] > 0) nums[pos] = -nums[pos];\r\n      if (nums[pos] === 0) nums[pos] = -Infinity;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] >= 0) return i + 1;\r\n  }\r\n\r\n  return len + 1;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const InformationSection = () => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>To add player, hold shift and click on the grid.</li>\r\n        <li>\r\n          To add edge with value, change the value on the 'Edge value' input,\r\n          then hold shift and click/drag to between players.\r\n        </li>\r\n        <li>To delete a node or edge, click on it and press delete.</li>\r\n        <li>Click and drag nodes to change their position.</li>\r\n        <li>\r\n          To create self edges copy and paste with (Ctrl+C and Ctrl+V) a player\r\n          and create an edge between original and copy.\r\n        </li>\r\n        <li>Note: On Mac computers, use Cmd instead of Ctrl.</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, Collapse, Popover, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setGraphShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, IMCNetsRule, Store } from \"../../../type\";\r\nimport {\r\n  calculateGraphShapleyValues,\r\n  generateCoalitionOfN,\r\n  generateCoalitions,\r\n  generateFunctionOfCoalitionsFromEdges,\r\n  generateMCNetsRulesFromEdges,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport Graph from \"./graph\";\r\nimport { InformationSection } from \"./information-section\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport \"./calculator-graph.scss\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\ninterface ICalculatorGraphProps extends GraphGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setGraphShapleyValues: (values: number[]) => void;\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nexport const CalculatorGraphNotConnected = (props: ICalculatorGraphProps) => {\r\n  const {\r\n    nrOfPlayes,\r\n    edges,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setGraphShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\"]);\r\n  const translateGraphToMCNets = () => {\r\n    setMCNetsRules(generateMCNetsRulesFromEdges(edges ?? []));\r\n    setMCNetsNumberOfPlayers(nrOfPlayes ?? 0);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n  const translateGraphToCoalitions = () => {\r\n    const coalitions = generateCoalitions(\r\n      generateCoalitionOfN(nrOfPlayes ?? 0)\r\n    );\r\n    setCoalitionsNumberOfplayers(nrOfPlayes ?? 0);\r\n    setCoalitionsCoalitions(coalitions);\r\n    setCoalitionsFunctionOfCoalitions(\r\n      generateFunctionOfCoalitionsFromEdges(coalitions, edges ?? [])\r\n    );\r\n    setActiveTabKey(\"coalition\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-graph\">\r\n      <Row justify=\"space-around\" style={{ marginBottom: \"16px\" }}>\r\n        <Popover\r\n          content={<InformationSection />}\r\n          title=\"Description\"\r\n          trigger=\"hover\"\r\n        >\r\n          <Button>How to use</Button>\r\n        </Popover>\r\n        <Button\r\n          type=\"primary\"\r\n          disabled={!edges?.length}\r\n          className=\"generate-button\"\r\n          onClick={() => {\r\n            setActiveKeys([\"2\"]);\r\n            setGraphShapleyValues(\r\n              calculateGraphShapleyValues(\r\n                generateCoalitionOfN(nrOfPlayes ?? 0),\r\n                edges ?? []\r\n              )\r\n            );\r\n          }}\r\n        >\r\n          Generate Shapley Values\r\n        </Button>\r\n        <Button\r\n          disabled={!edges?.length}\r\n          className=\"generate-button\"\r\n          onClick={translateGraphToMCNets}\r\n        >\r\n          Translate to MC Nets\r\n        </Button>\r\n        <Button\r\n          disabled={!edges?.length || (nrOfPlayes ?? 0) > 9}\r\n          className=\"generate-button\"\r\n          onClick={translateGraphToCoalitions}\r\n        >\r\n          Translate to Coalitions\r\n        </Button>\r\n      </Row>\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Graph Game Definition\" key=\"1\">\r\n          <Graph />\r\n        </Collapse.Panel>\r\n        <Collapse.Panel header=\"Calculated Shapley Values\" key=\"2\">\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayes, edges, shapleyValues } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayes,\r\n    edges,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setGraphShapleyValues: (values: number[]) =>\r\n      dispatch(setGraphShapleyValues(values)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\n\r\nexport const CalculatorGraph = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorGraphNotConnected);\r\n\r\nexport default CalculatorGraph;\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport GameExamples from \"../../../calculators/game-exaples/game-examples\";\r\nimport { CalculatorCoalitionStructures } from \"../../../calculators/calculator-coalition-structures/calculator-coalition-structures\";\r\nimport { CalculatorMCNets } from \"../../../calculators/calculator-mc-nets/calculator-mc-nets\";\r\nimport { CalculatorGraph } from \"../../../calculators/calculator-graph/calculator-graph\";\r\n\r\nconst { TabPane } = Tabs;\r\nexport type TabsKeys = \"coalition\" | \"example\" | \"mc-nets\" | \"graph\";\r\nexport const AppBody = (): JSX.Element => {\r\n  const [activeTabKey, setActiveTabKey] = useState<TabsKeys>(\"coalition\");\r\n  return (\r\n    <Tabs\r\n      activeKey={activeTabKey}\r\n      onTabClick={(key: string) => setActiveTabKey(key as TabsKeys)}\r\n      centered\r\n    >\r\n      <TabPane tab=\"Coalition structures definition\" key=\"coalition\">\r\n        <CalculatorCoalitionStructures setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"Function generating values\" key=\"example\">\r\n        <GameExamples setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"MC-nets game representation\" key=\"mc-nets\">\r\n        <CalculatorMCNets setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"Graph game representation\" key=\"graph\">\r\n        <CalculatorGraph setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default AppBody;\r\n","import React from 'react'\r\nimport { PageHeader } from 'antd';\r\nimport './app-header.css';\r\n\r\nexport const AppHeader = (): JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","import { PLAYER_TYPE } from \"../../components/calculators/calculator-graph/config\";\r\nimport { Store } from \"../../type\";\r\nimport ActionTypes from \"../actionTypes\";\r\n\r\nconst initialState: Store = {\r\n  graph: {\r\n    nrOfPlayes: 1,\r\n    nodes: [\r\n      {\r\n        id: \"1\",\r\n        title: \"1\",\r\n        type: PLAYER_TYPE,\r\n        x: 300,\r\n        y: 300,\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nexport const aplication = (\r\n  state = initialState,\r\n  action: { type: any; payload: any }\r\n): Store => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          coalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          functionOfCoalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_RULES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          rules: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_EDGES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          edges: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_NODES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nodes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default aplication;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react'\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport AppBody from \"../components/layout/body/app-body/app-body\";\r\nimport AppHeader from \"../components/layout/header/app-header\";\r\nimport store from \"../redux/store\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"app\">\r\n        <AppHeader />\r\n        <AppBody />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./app/App\";\r\n\r\nString.prototype.elementAfterSplit = function (\r\n  separator: string\r\n): string | undefined {\r\n  return this.split(separator).at(-1);\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}