{"version":3,"sources":["components/calculators/calculator-function-definition/calculator-function-definition.tsx","utilities/calculation-functions.ts","redux/actionTypes.ts","redux/actions.ts","components/calculators/calculator-coalition-structures/coalition-structures-input.tsx","components/shared-components/number-of-players-input.tsx","components/shared-components/display-generated-values.tsx","components/calculators/calculator-coalition-structures/calculator-coalition-structures.tsx","components/calculators/calculator-mc-nets/add-mc-nets-rule/add-mc-nets-rule.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/player-group/players-group.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/mc-nets-rule.tsx","components/calculators/calculator-mc-nets/calculator-mc-nets.tsx","components/calculators/calculator-graph/config.tsx","components/calculators/calculator-graph/graph-input-section.tsx","components/calculators/calculator-graph/graph.tsx","utilities/calculationg-functions.ts","components/calculators/calculator-graph/information-section.tsx","components/calculators/calculator-graph/calculator-graph.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","index.tsx"],"names":["CalculatorFunctionDefinition","className","indexOfArrayInArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","factorial","n","r","calculateAllShapleyValues","players","coalitions","funcOfCoalitions","shapleyValues","player","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","length","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","generateCoalitionOfN","event","Array","from","v","k","calculateMCNetsShapleyValues","rules","nrOfPlayers","values","fill","rule","positive","negative","numberOfPositivePlayers","positivePlayers","numberOfNegativePlayers","negativePlayers","positivePlayersContribution","value","negativePlayersContribution","calculateNegativePlayersMarginalContribution","parseFloat","calculateGraphShapleyValues","grandCoalition","edges","edgesStructure","map","edge","source","split","at","target","handleText","generateCoalitionsFromEdges","ActionTypes","SET_COALITIONS_NUMBER_OF_PLAYERS","SET_COALITIONS_COALITIONS","SET_COALITIONS_FUNCTION_OF_COALITIONS","SET_COALITIONS_SHAPLEY_VALUES","SET_MCNETS_NUMBER_OF_PLAYERS","SET_MCNETS_RULES","SET_MCNETS_SHAPLEY_VALUES","SET_GRAPH_NUMBER_OF_PLAYERS","SET_GRAPH_EDGES","SET_GRAPH_NODES","SET_GRAPH_SHAPLEY_VALUES","setCoalitionsFunctionOfCoalitions","functionOfCoalitions","type","payload","setMCNetsNumberOfPlayers","nrOfPlayes","setMCNetsRules","CoalitionStructuresInput","connect","state","aplication","dispatch","props","dataSource","key","toString","columns","title","dataIndex","align","render","text","record","defaultValue","onChange","tmpFunction","bordered","size","pagination","scroll","y","column","NumberOfPlayersForm","numberOfPlayers","message","maxValue","handleNumberOfPlayesChange","labelCol","span","wrapperCol","layout","Item","labelAlign","label","min","max","DisplayGeneratedValues","listShapleyValues","tableMaxHeight","shapleuValue","playerNumber","CalculatorCoalitionStructures","setCoalitionsNumberOfplayers","setCoalitionsCoalitions","setCoalitionsShapleyValues","setActiveTabKey","useState","setGrandCalition","undefined","setMessage","useEffect","newCoalitions","reduce","subsets","concat","set","sort","a","b","unshift","justify","xs","sm","md","lg","xl","cssClass","onFileLoaded","data","newFunctionOfCoalitions","row","pop","currentCoalition","slice","inputName","parserOptions","header","dynamicTyping","skipEmptyLines","onClick","gameDefinition","csvContent","e","join","window","open","encodeURI","disabled","newRules","newNumberOfPlayers","highestPlayerInCoalition","Math","String","AddMCNetsRule","mcNets","flex","shape","icon","PlusOutlined","PlayersGroup","options","Group","style","width","MCNetsRule","plainOptions","wrap","placeholder","tmpRules","checkedValues","filter","val","MinusOutlined","margin","CalculatorMCNets","setMCNetsShapleyValues","activeKeys","setActiveKeys","activeKey","keys","Panel","_rule","showArrow","forceRender","collapsible","gutter","tmpActiveKeys","playerShape","viewBox","id","cx","cy","height","nodeConfig","EdgeTypes","normalEdge","transform","x","shapeId","NodeSubtypes","NodeTypes","typeText","GraphInputSection","valueForEdge","setValueForEdge","prototype","elementAfterSplit","separator","this","Graph","graph","nodes","setGraphNumberOfPlayers","setGraphEdges","setGraphNodes","selected","setSelected","copied","setCopied","playersId","setPlayersId","refElement","useRef","showGraphControls","gridSize","gridDotSize","ref","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","onSelectNode","viewNode","onCreateNode","tmpNodes","newPlayerNr","nums","len","i","pos","abs","Infinity","firstMissingPositive","element","onUpdateNode","searchNode","findIndex","node","onDeleteNode","_nodeId","nodeArr","newEdges","onSelectEdge","viewEdge","onCreateEdge","sourceViewNode","targetViewNode","viewEdgeRealSource","viewEdgeRealTarget","isConnectionDefined","some","edgeSourceRealTitle","edgeTargetRealTitle","isSourceCopy","isTargetCopy","isConnectionValid","shouldEdgeBeCreated","onSwapEdge","searchEdge","tmpEdges","JSON","parse","stringify","onDeleteEdge","_viewEdge","onCopySelected","console","warn","onPasteSelected","arrayOfCopies","newNode","readOnly","InformationSection","CalculatorGraph","setGraphShapleyValues","marginBottom","content","trigger","generateMCNetsRulesFromEdges","TabPane","Tabs","AppBody","activeTabKey","onTabClick","centered","tab","AppHeader","subTitle","initialState","action","combineReducers","createStore","rootReducer","App","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.145573da.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const CalculatorFunctionDefinition = (): JSX.Element => {\r\n  return <div className=\"calculator-coalition-definition\"></div>;\r\n};\r\n\r\nexport default CalculatorFunctionDefinition;\r\n","import { IEdge } from \"react-digraph\";\r\nimport _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (arr: Array<number>) =>\r\n  arr\r\n    .reduce(\r\n      (subsets: number[][], value: number) =>\r\n        subsets.concat(subsets.map((set) => [...set, value])),\r\n      [[]]\r\n    )\r\n    .sort((a, b) => a.length - b.length);\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ] ?? 0;\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - (valueOfCoalitionWithoutPlayer ?? 0)) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number): number[] =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\n\r\nexport const generateCoalitionsFromEdges = (\r\n  edges: IEdge[]\r\n): Array<{ value: number; coalition: number[] }> => {\r\n  return edges.map((edge) => {\r\n    const source = parseFloat(edge.source.split(\"-copy-of-\").at(-1) ?? \"\");\r\n    const target = parseFloat(edge.target.split(\"-copy-of-\").at(-1) ?? \"\");\r\n    const value = parseFloat(edge.handleText ?? \"\");\r\n    return {\r\n      value,\r\n      coalition: source === target ? [source] : [source, target],\r\n    };\r\n  });\r\n};\r\n\r\nexport const calculateGraphShapleyValues = (\r\n  grandCoalition: number[],\r\n  edges: IEdge[]\r\n): number[] => {\r\n  const edgesStructure = generateCoalitionsFromEdges(edges);\r\n  return grandCoalition.map((player) => {\r\n    let value = 0;\r\n    edgesStructure.forEach((edge) => {\r\n      value += edge.coalition.includes(player)\r\n        ? edge.value / (edge.coalition.length === 2 ? 2 : 1)\r\n        : 0;\r\n    });\r\n    return value;\r\n  });\r\n};\r\nexport const generateMCNetsRulesFromEdges = (edges: IEdge[]): IMCNetsRule[] => {\r\n  return edges.map((edge) => {\r\n    const source = edge.source.split(\"-copy-of-\").at(-1) ?? \"\";\r\n    const target = edge.target.split(\"-copy-of-\").at(-1) ?? \"\";\r\n    const value = parseFloat(edge.handleText ?? \"\");\r\n    return {\r\n      value,\r\n      positivePlayers: source === target ? [source] : [source, target],\r\n      negativePlayers: [],\r\n    };\r\n  });\r\n};\r\n","export const ActionTypes = {\r\n  SET_COALITIONS_NUMBER_OF_PLAYERS: \"SET_COALITIONS_NUMBER_OF_PLAYERS\",\r\n  SET_COALITIONS_COALITIONS: \"SET_COALITIONS_COALITIONS\",\r\n  SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n    \"SET_COALITIONS_FUNCTION_OF_COALITIONS\",\r\n  SET_COALITIONS_SHAPLEY_VALUES: \"SET_COALITIONS_SHAPLEY_VALUES\",\r\n  SET_MCNETS_NUMBER_OF_PLAYERS: \"SET_MCNETS_NUMBER_OF_PLAYERS\",\r\n  SET_MCNETS_RULES: \"SET_MCNETS_RULES\",\r\n  SET_MCNETS_SHAPLEY_VALUES: \"SET_MCNETS_SHAPLEY_VALUES\",\r\n  SET_GRAPH_NUMBER_OF_PLAYERS: \"SET_GRAPH_NUMBER_OF_PLAYERS\",\r\n  SET_GRAPH_EDGES: \"SET_GRAPH_EDGES\",\r\n  SET_GRAPH_NODES: \"SET_GRAPH_NODES\",\r\n  SET_GRAPH_SHAPLEY_VALUES: \"SET_GRAPH_SHAPLEY_VALUES\",\r\n};\r\n\r\nexport default ActionTypes;\r\n","import { IEdge, INode } from \"react-digraph\";\r\nimport { IMCNetsRule } from \"../type\";\r\nimport ActionTypes from \"./actionTypes\";\r\n\r\nexport const setCoalitionsNumberOfplayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setCoalitionsCoalitions = (\r\n  coalitions: number[][]\r\n): {\r\n  type: string;\r\n  payload: number[][];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_COALITIONS,\r\n  payload: coalitions,\r\n});\r\n\r\nexport const setCoalitionsFunctionOfCoalitions = (\r\n  functionOfCoalitions: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS,\r\n  payload: functionOfCoalitions,\r\n});\r\n\r\nexport const setCoalitionsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setMCNetsNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => {\r\n  return {\r\n    type: ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS,\r\n    payload: nrOfPlayes,\r\n  };\r\n};\r\n\r\nexport const setMCNetsRules = (\r\n  rules: IMCNetsRule[]\r\n): {\r\n  type: string;\r\n  payload: IMCNetsRule[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_RULES,\r\n  payload: rules,\r\n});\r\n\r\nexport const setMCNetsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setGraphNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setGraphNodes = (\r\n  nodes: INode[]\r\n): {\r\n  type: string;\r\n  payload: INode[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NODES,\r\n  payload: nodes,\r\n});\r\n\r\nexport const setGraphEdges = (\r\n  edges: IEdge[]\r\n): {\r\n  type: string;\r\n  payload: IEdge[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_EDGES,\r\n  payload: edges,\r\n});\r\n\r\nexport const setGraphShapleyValues = (\r\n  values: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_SHAPLEY_VALUES,\r\n  payload: values,\r\n});\r\n","import React from \"react\";\r\nimport { Table, InputNumber } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCoalitionsFunctionOfCoalitions } from \"../../../redux/actions\";\r\nimport { Store } from \"../../../type\";\r\n\r\nexport interface ICoalitionStructuresInputProps {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => void;\r\n}\r\n\r\nexport const CoalitionStructuresInputNotConnected = (\r\n  props: ICoalitionStructuresInputProps\r\n): JSX.Element => {\r\n  const {\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const dataSource = coalitions?.map((coalition, index) => ({\r\n    key: index,\r\n    coalition: coalition.length ? coalition.toString() : \"Ø\",\r\n    value: 0,\r\n  }));\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Coalition\",\r\n      dataIndex: \"coalition\",\r\n      key: \"coalition\",\r\n      align: \"right\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (text: string, record: any) => (\r\n        <InputNumber\r\n          value={functionOfCoalitions?.[record.key]}\r\n          defaultValue={0}\r\n          onChange={(event: number) => {\r\n            const tmpFunction = functionOfCoalitions\r\n              ? [...functionOfCoalitions]\r\n              : [];\r\n            tmpFunction[record.key] = event;\r\n            setCoalitionsFunctionOfCoalitions(tmpFunction);\r\n          }}\r\n        />\r\n      ),\r\n      align: \"left\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"coalition-structures-input\"\r\n    >\r\n      {columns.map((column) => (\r\n        <Column {...column} />\r\n      ))}\r\n    </Table>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: {\r\n  aplication: Store;\r\n}): {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n} => {\r\n  return {\r\n    coalitions: state.aplication.coalitions?.coalitions,\r\n    functionOfCoalitions: state.aplication.coalitions?.functionOfCoalitions,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number[] }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CoalitionStructuresInput = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CoalitionStructuresInputNotConnected);\r\nexport default CoalitionStructuresInput;\r\n","import React from 'react'\r\nimport { Form, InputNumber } from \"antd\"\r\nexport interface INumberOfPlayersForm {\r\n  numberOfPlayers?: number\r\n  message?: string\r\n  maxValue: number\r\n  handleNumberOfPlayesChange?: (event: number) => void\r\n}\r\nexport const NumberOfPlayersForm = (props: INumberOfPlayersForm): JSX.Element => {\r\n  const { numberOfPlayers, message, maxValue, handleNumberOfPlayesChange } = props\r\n  return <Form\r\n    labelCol={{ span: 12 }}\r\n    wrapperCol={{ span: 12 }}\r\n    layout=\"horizontal\"\r\n    size=\"middle\"\r\n    className=\"number-of-players-input\"\r\n  >\r\n    <div className=\"error-message\">{message}</div>\r\n    <Form.Item labelAlign=\"right\" label=\"Number of players\">\r\n      <InputNumber\r\n        min={0}\r\n        max={maxValue - 1}\r\n        defaultValue={0}\r\n        value={numberOfPlayers}\r\n        onChange={handleNumberOfPlayesChange}\r\n      />\r\n    </Form.Item>\r\n  </Form>\r\n}\r\n\r\nexport default NumberOfPlayersForm","import React from 'react'\r\nimport { Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface IDisplayGeneratedValuesProps {\r\n  listShapleyValues: number[]\r\n  tableMaxHeight?: number\r\n}\r\n\r\nexport const DisplayGeneratedValues = (props: IDisplayGeneratedValuesProps): JSX.Element => {\r\n  const { listShapleyValues, tableMaxHeight } = props\r\n  const dataSource = listShapleyValues.map((shapleuValue, index) => {\r\n    return {\r\n      key: index,\r\n      value: shapleuValue,\r\n      playerNumber: index + 1\r\n    }\r\n  })\r\n\r\n  const columns = [{\r\n    title: 'Player number',\r\n    dataIndex: 'playerNumber',\r\n    key: 'playerNumber',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }, {\r\n    title: 'Player Shapley Value',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }]\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: tableMaxHeight ?? 300 }}\r\n      className=\"display-generated-values\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default DisplayGeneratedValues\r\n","import { Button, Col, Row } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./calculator-coalition-structures.css\";\r\nimport {\r\n  calculateAllShapleyValues,\r\n  generateCoalitions,\r\n  generateCoalitionOfN,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport CoalitionStructuresInput from \"./coalition-structures-input\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setCoalitionsShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\nimport { CoalitionsGame, IMCNetsRule, Store } from \"../../../type\";\r\n\r\ninterface ICalculatorCoalitionStructuresProps extends CoalitionsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setCoalitionsShapleyValues: (content: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  };\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nconst CalculatorCoalitionStructuresNotConnected = (\r\n  props: ICalculatorCoalitionStructuresProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n    setCoalitionsShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n  } = props;\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>(\r\n    nrOfPlayes ? generateCoalitionOfN(nrOfPlayes) : []\r\n  );\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const maxValue = 10;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < maxValue) {\r\n      setCoalitionsNumberOfplayers(event);\r\n      setGrandCalition(generateCoalitionOfN(event));\r\n      setCoalitionsFunctionOfCoalitions(Array(2 ** event).fill(0));\r\n      setCoalitionsShapleyValues([]);\r\n      setMessage(undefined);\r\n    } else setMessage(\"Number of coalition members exceded!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      const newCoalitions = generateCoalitions(grandCoalition);\r\n      newCoalitions[0].unshift(0);\r\n      setCoalitionsCoalitions(newCoalitions);\r\n    }\r\n  }, [grandCoalition, setCoalitionsCoalitions]);\r\n\r\n  const handleForce = (data: any) => {\r\n    const newCoalitions: number[][] = [];\r\n    const newFunctionOfCoalitions: number[] = [];\r\n    let numberOfPlayers = 0;\r\n\r\n    data.forEach((row: number[]) => {\r\n      row.pop();\r\n      const currentCoalition = row.slice(0, -1);\r\n      numberOfPlayers =\r\n        currentCoalition.length > numberOfPlayers\r\n          ? currentCoalition.length\r\n          : numberOfPlayers;\r\n      newCoalitions.push(currentCoalition);\r\n      newFunctionOfCoalitions.push(row.slice(-1).pop() ?? 0);\r\n    });\r\n\r\n    setCoalitionsNumberOfplayers(numberOfPlayers);\r\n    setCoalitionsCoalitions(newCoalitions);\r\n    setCoalitionsFunctionOfCoalitions(newFunctionOfCoalitions);\r\n  };\r\n\r\n  const handleDownloadGameDefinition = () => {\r\n    const gameDefinition: number[][] = coalitions?.map((coalition, index) => {\r\n      return [...coalition, functionOfCoalitions?.[index] ?? 0];\r\n    }) ?? [[0]];\r\n    // gameDefinition[0].unshift(0);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,\" +\r\n      gameDefinition?.map((e) => e.join(\",\") + \",\").join(\"\\n\");\r\n\r\n    window.open(encodeURI(csvContent));\r\n  };\r\n\r\n  const translateToMCNets = () => {\r\n    const newRules: IMCNetsRule[] = [];\r\n    let newNumberOfPlayers = 0;\r\n    functionOfCoalitions?.forEach((value, index) => {\r\n      if (value) {\r\n        const highestPlayerInCoalition = Math.max(\r\n          ...(coalitions?.[index] ?? [])\r\n        );\r\n        newNumberOfPlayers =\r\n          highestPlayerInCoalition > newNumberOfPlayers\r\n            ? highestPlayerInCoalition\r\n            : newNumberOfPlayers;\r\n        newRules.push({\r\n          positivePlayers: coalitions?.[index]?.map(String) ?? [],\r\n          negativePlayers: [],\r\n          value: value,\r\n        });\r\n      }\r\n    });\r\n    setMCNetsNumberOfPlayers(newNumberOfPlayers);\r\n    setMCNetsRules(newRules);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-structures\">\r\n      <NumberOfPlayersForm\r\n        numberOfPlayers={nrOfPlayes}\r\n        maxValue={maxValue}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      <Row justify=\"center\">\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <CoalitionStructuresInput />\r\n          <div className=\"upload\">\r\n            <CSVReader\r\n              cssClass=\"react-csv-input\"\r\n              label={<span>Upload game definition from .csv file </span>}\r\n              onFileLoaded={handleForce}\r\n              inputName=\"input2\"\r\n              parserOptions={{\r\n                header: false,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"download\">\r\n            <Button onClick={handleDownloadGameDefinition}>\r\n              Download Game Definition\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n        <Col className=\"buttons-col\" xs={24} sm={24} md={24} lg={4} xl={4}>\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={() =>\r\n              setCoalitionsShapleyValues(\r\n                calculateAllShapleyValues(\r\n                  grandCoalition,\r\n                  coalitions ?? [],\r\n                  functionOfCoalitions ?? []\r\n                )\r\n              )\r\n            }\r\n          >\r\n            Generate Shapley Values\r\n          </Button>\r\n          <Button\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={translateToMCNets}\r\n          >\r\n            Translate to MC Nets\r\n          </Button>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): CoalitionsGame => {\r\n  const { nrOfPlayes, coalitions, functionOfCoalitions, shapleyValues } =\r\n    state.aplication.coalitions || {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    coalitions: coalitions,\r\n    functionOfCoalitions: functionOfCoalitions,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n    setCoalitionsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setCoalitionsShapleyValues(shapleyValues)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n  };\r\n};\r\nexport const CalculatorCoalitionStructures = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorCoalitionStructuresNotConnected);\r\nexport default CalculatorCoalitionStructures;\r\n","import React from \"react\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { IMCNetsRule, McNetsGame, Store } from \"../../../../type\";\r\n\r\nexport interface IAddMCNetsRuleProps {\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\n\r\nexport const AddMCNetsRuleNotConnected = (\r\n  props: IAddMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { rules, setMCNetsRules } = props;\r\n\r\n  return (\r\n    <div className=\"add-mc-nets-rule\">\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col flex=\"64px\">Add Rule</Col>\r\n        <Col flex=\"40px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() =>\r\n              setMCNetsRules([\r\n                ...(rules ?? []),\r\n                {\r\n                  positivePlayers: [],\r\n                  negativePlayers: [],\r\n                  value: 0,\r\n                },\r\n              ])\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  return {\r\n    rules: state.aplication.mcNets?.rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const AddMCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddMCNetsRuleNotConnected);\r\n\r\nexport default AddMCNetsRule;\r\n","import React from 'react'\r\nimport { Checkbox } from \"antd\"\r\nimport './player-group.css'\r\n\r\ninterface IPlayersGroupprops {\r\n  options: string[]\r\n  value: string[]\r\n  onChange: (checkedValues: any) => void\r\n}\r\n\r\nexport const PlayersGroup = (props: IPlayersGroupprops) => {\r\n  const { options, value, onChange } = props\r\n  return (\r\n    <div className=\"player-group\">\r\n      <Checkbox.Group options={options} value={value} onChange={onChange} style={{ width: `calc(${options.length} * 52px)` }} />\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { MinusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, InputNumber, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { generateCoalitionOfN } from \"../../../../utilities/calculation-functions\";\r\nimport { PlayersGroup } from \"./player-group/players-group\";\r\nimport { Store, IMCNetsRule, McNetsGame } from \"../../../../type\";\r\nexport interface IMCNetsRuleProps {\r\n  index: number;\r\n  nrOfPlayes?: number;\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\nexport const MCNetsRuleNotConnected = (\r\n  props: IMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { index, nrOfPlayes, rules, setMCNetsRules } = props;\r\n  const onPositiveChange = (checkedValues: string[]) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].positivePlayers = checkedValues;\r\n    tmpRules[index].negativePlayers = tmpRules[index].negativePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n  const onNegativeChange = (checkedValues: any) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].negativePlayers = checkedValues;\r\n    tmpRules[index].positivePlayers = tmpRules[index].positivePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n\r\n  const plainOptions = generateCoalitionOfN(nrOfPlayes ?? 0).map(String);\r\n  return (\r\n    <div className=\"mc-nets-rule\">\r\n      <Row wrap={false} justify=\"center\">\r\n        <Col flex=\"100px\" className=\"mc-nets-rule-name\">\r\n          {`Rule nr ${index}`}\r\n          <InputNumber\r\n            placeholder=\"Value\"\r\n            onChange={(event) => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules[index].value = event as number;\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n            value={rules?.[index].value}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <PlayersGroup\r\n            onChange={onPositiveChange}\r\n            value={rules?.[index].positivePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <PlayersGroup\r\n            onChange={onNegativeChange}\r\n            value={rules?.[index].negativePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"48px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<MinusOutlined />}\r\n            style={{ margin: \"0 8px\" }}\r\n            onClick={() => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules.splice(index, 1);\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const MCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MCNetsRuleNotConnected);\r\n\r\nexport default MCNetsRule;\r\n","import { Button, Col, Collapse, Row } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { calculateMCNetsShapleyValues } from \"../../../utilities/calculation-functions\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport { AddMCNetsRule } from \"./add-mc-nets-rule/add-mc-nets-rule\";\r\nimport { MCNetsRule } from \"./mc-nets-rule/mc-nets-rule\";\r\nimport \"./calculator-mc-nets.scss\";\r\nimport {\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsShapleyValues,\r\n} from \"../../../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Store, McNetsGame, IMCNetsRule } from \"../../../type\";\r\n\r\ninterface ICalculatorMCNetsProps extends McNetsGame {\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n}\r\n\r\nexport const CalculatorMCNetsNotConnected = (\r\n  props: ICalculatorMCNetsProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsShapleyValues,\r\n  } = props;\r\n  const handleNumberOfPlayesChange = (event: number) =>\r\n    setMCNetsNumberOfPlayers(event);\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\", \"2\"]);\r\n  return (\r\n    <div className=\"calculator-mc-nets\">\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Game Definition\" key=\"1\">\r\n          <Row justify=\"center\">\r\n            <Col span={12}>\r\n              <NumberOfPlayersForm\r\n                maxValue={20}\r\n                numberOfPlayers={nrOfPlayes}\r\n                handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <AddMCNetsRule />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"mc-nets-rules\">\r\n            {rules?.length ? (\r\n              <Row align=\"middle\" wrap={false} justify=\"center\">\r\n                <Col flex=\"100px\" className=\"mc-nets-rule-name\"></Col>\r\n\r\n                <Col flex=\"auto\">\r\n                  <div className=\"player-group-name\">Positive Players</div>\r\n                </Col>\r\n                <Col flex=\"auto\">\r\n                  <div className=\"player-group-name\">Negative Players</div>\r\n                </Col>\r\n              </Row>\r\n            ) : null}\r\n            {rules?.map((_rule, index) => {\r\n              return <MCNetsRule key={index} index={index} />;\r\n            })}\r\n          </div>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"\"\r\n          key=\"2\"\r\n          showArrow={false}\r\n          forceRender={true}\r\n          collapsible=\"disabled\"\r\n          className=\"generate-panel\"\r\n        >\r\n          <Row justify=\"center\" gutter={32}>\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={!nrOfPlayes}\r\n              className=\"generate-button\"\r\n              onClick={() => {\r\n                setMCNetsShapleyValues(\r\n                  calculateMCNetsShapleyValues(rules ?? [], nrOfPlayes ?? 0)\r\n                );\r\n                const tmpActiveKeys = activeKeys.includes(\"3\")\r\n                  ? activeKeys\r\n                  : [...activeKeys, \"3\"];\r\n                setActiveKeys(tmpActiveKeys);\r\n              }}\r\n            >\r\n              Calculate\r\n            </Button>\r\n          </Row>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"Shapley Values\"\r\n          key=\"3\"\r\n          className=\"values-panel\"\r\n        >\r\n          <DisplayGeneratedValues\r\n            listShapleyValues={shapleyValues ?? []}\r\n            tableMaxHeight={200}\r\n          />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules, shapleyValues } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | IMCNetsRule[];\r\n  }) => any\r\n): {\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setMCNetsShapleyValues(shapleyValues)),\r\n  };\r\n};\r\nexport const CalculatorMCNets = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorMCNetsNotConnected);\r\n\r\nexport default CalculatorMCNets;\r\n","import React from \"react\";\r\n\r\nexport const NODE_KEY = \"id\";\r\nexport const PLAYER_TYPE = \"player\";\r\nexport const NORMAL_EDGE = \"normalEdge\";\r\nexport const nodeTypes = [PLAYER_TYPE];\r\nexport const edgeTypes = [NORMAL_EDGE];\r\n\r\nconst playerShape = (\r\n  <symbol viewBox=\"0 0 200 200\" id=\"player\">\r\n    <circle cx=\"100\" cy=\"100\" r=\"50\" />\r\n    <g>\r\n      <foreignObject width=\"100%\" height=\"100%\">\r\n        <div>test</div>\r\n      </foreignObject>\r\n    </g>\r\n  </symbol>\r\n);\r\n\r\nconst normalEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"normalEdge\">\r\n    <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nexport const nodeConfig = {\r\n  EdgeTypes: {\r\n    normalEdge: {\r\n      shape: normalEdgeShape,\r\n      shapeId: \"#normalEdge\",\r\n    },\r\n  },\r\n  NodeSubtypes: {},\r\n  NodeTypes: {\r\n    player: {\r\n      shape: playerShape,\r\n      shapeId: \"#player\",\r\n      typeText: \"Player\",\r\n    },\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport { Form, InputNumber } from \"antd\";\r\ninterface IGraphInputSectionProps {\r\n  valueForEdge: number;\r\n  setValueForEdge: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\nexport const GraphInputSection = (props: IGraphInputSectionProps) => {\r\n  const { valueForEdge, setValueForEdge } = props;\r\n  return (\r\n    <div className=\"graph-input-section\">\r\n      <Form\r\n        layout=\"horizontal\"\r\n        size=\"middle\"\r\n        className=\"number-of-players-input\"\r\n      >\r\n        <Form.Item labelAlign=\"right\" label=\"Edge value\">\r\n          <InputNumber\r\n            value={valueForEdge}\r\n            onChange={(e) => setValueForEdge(e)}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component, useRef, useState } from \"react\";\r\nimport { firstMissingPositive } from \"../../../utilities/calculationg-functions\";\r\nimport { GraphView, IEdge, IGraphViewProps, INode } from \"react-digraph\";\r\nimport { nodeConfig, PLAYER_TYPE, NODE_KEY, NORMAL_EDGE } from \"./config\";\r\nimport {\r\n  setGraphNumberOfPlayers,\r\n  setGraphNodes,\r\n  setGraphEdges,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, Store } from \"../../../type\";\r\nimport { connect } from \"react-redux\";\r\nimport { GraphInputSection } from \"./graph-input-section\";\r\n\r\ninterface IGraphProps extends GraphGame {\r\n  setGraphNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setGraphNodes: (nodes: INode[]) => void;\r\n  setGraphEdges: (edges: IEdge[]) => void;\r\n}\r\nString.prototype.elementAfterSplit = function (\r\n  separator: string\r\n): string | undefined {\r\n  return this.split(separator).at(-1);\r\n};\r\nexport const separatorString = \"-copy-of-\";\r\nexport const GraphNotConnected = (props: IGraphProps) => {\r\n  const {\r\n    nrOfPlayes,\r\n    edges,\r\n    nodes,\r\n    setGraphNumberOfPlayers,\r\n    setGraphEdges,\r\n    setGraphNodes,\r\n  } = props;\r\n  const copyString = \"copied \";\r\n  const [valueForEdge, setValueForEdge] = useState(0);\r\n  const [selected, setSelected] = useState<IEdge | INode | null>(null);\r\n  const [copied, setCopied] = useState<IEdge | INode | null>(null);\r\n  const [playersId, setPlayersId] = useState<number>(1);\r\n  const refElement = useRef<Component<IGraphViewProps>>(null);\r\n\r\n  const getNodeIndex = (searchNode: { [x: string]: string }): number => {\r\n    return nodes\r\n      ? nodes.findIndex((node) => {\r\n          return node[NODE_KEY] === searchNode[NODE_KEY];\r\n        })\r\n      : -1;\r\n  };\r\n\r\n  const getEdgeIndex = (searchEdge: {\r\n    source: string | number;\r\n    target: string | number;\r\n  }): number => {\r\n    return edges\r\n      ? edges.findIndex((edge) => {\r\n          return (\r\n            edge.source === searchEdge.source &&\r\n            edge.target === searchEdge.target\r\n          );\r\n        })\r\n      : -1;\r\n  };\r\n\r\n  const onUpdateNode = (viewNode: INode): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const i = getNodeIndex(viewNode);\r\n    tmpNodes[i] = viewNode;\r\n    setGraphNodes(tmpNodes ?? []);\r\n  };\r\n\r\n  const onSelectNode = (viewNode: INode | null): void => {\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onSelectEdge = (viewEdge: IEdge): void => {\r\n    setSelected(viewEdge);\r\n  };\r\n\r\n  const onCreateNode = (x: number, y: number): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const playersNumbers = tmpNodes\r\n      .map((element) => element.title.elementAfterSplit(copyString))\r\n      .filter(String)\r\n      .map(Number);\r\n    const newPlayerNr = firstMissingPositive(playersNumbers);\r\n    const viewNode = {\r\n      id: `${playersId + 1}`,\r\n      title: `${newPlayerNr}`,\r\n      type: PLAYER_TYPE,\r\n      x,\r\n      y,\r\n    };\r\n    tmpNodes.push(viewNode);\r\n    setGraphNumberOfPlayers(newPlayerNr);\r\n    setPlayersId(playersId + 1);\r\n    setGraphNodes(tmpNodes);\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onDeleteNode = (\r\n    viewNode: INode,\r\n    _nodeId: number | string,\r\n    nodeArr: INode[]\r\n  ): void => {\r\n    const newEdges = edges?.filter((edge, i) => {\r\n      return (\r\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\r\n      );\r\n    });\r\n    setGraphNumberOfPlayers(nrOfPlayes ? nrOfPlayes - 1 : 0);\r\n    setGraphNodes(nodeArr);\r\n    setGraphEdges(newEdges ?? []);\r\n    setSelected(null);\r\n  };\r\n\r\n  const shouldEdgeBeCreated = (viewEdge: IEdge): boolean => {\r\n    const viewEdgeRealSource =\r\n      viewEdge.source?.elementAfterSplit(separatorString);\r\n    const viewEdgeRealTarget =\r\n      viewEdge.target?.elementAfterSplit(separatorString);\r\n    const isConnectionDefined = edges?.some((edge) => {\r\n      const edgeSourceRealTitle =\r\n        edge?.source?.elementAfterSplit(separatorString);\r\n      const edgeTargetRealTitle =\r\n        edge?.target?.elementAfterSplit(separatorString);\r\n      if (\r\n        viewEdgeRealSource === edgeSourceRealTitle &&\r\n        viewEdgeRealTarget === edgeTargetRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n      if (\r\n        viewEdgeRealSource === edgeTargetRealTitle &&\r\n        viewEdgeRealTarget === edgeSourceRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    const isSourceCopy = viewEdge.source.includes(separatorString);\r\n    const isTargetCopy = viewEdge.target.includes(separatorString);\r\n    const isTargetOriginal = viewEdgeRealTarget === viewEdgeRealSource;\r\n    const isConnectionValid = !(isSourceCopy && !isTargetOriginal);\r\n    return (\r\n      viewEdge.source !== viewEdge.target &&\r\n      !isConnectionDefined &&\r\n      isConnectionValid &&\r\n      !isTargetCopy\r\n    );\r\n  };\r\n\r\n  const onCreateEdge = (sourceViewNode: INode, targetViewNode: INode): void => {\r\n    const viewEdge: IEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      handleText: valueForEdge.toString(),\r\n      type: NORMAL_EDGE,\r\n    };\r\n    if (shouldEdgeBeCreated(viewEdge)) {\r\n      setGraphEdges([...(edges ?? []), viewEdge]);\r\n      setSelected(viewEdge);\r\n    }\r\n  };\r\n\r\n  const onSwapEdge = (\r\n    sourceViewNode: INode,\r\n    targetViewNode: INode,\r\n    viewEdge: IEdge\r\n  ): void => {\r\n    const tmpEdges = edges ?? [];\r\n    const i = getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(tmpEdges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    tmpEdges[i] = edge;\r\n    setGraphEdges([...tmpEdges]);\r\n    setSelected(edge);\r\n  };\r\n\r\n  const onDeleteEdge = (_viewEdge: IEdge, edges: IEdge[]): void => {\r\n    setGraphEdges(edges);\r\n    setSelected(null);\r\n  };\r\n\r\n  const onCopySelected = (): void => {\r\n    if (selected?.source) {\r\n      console.warn(\"Cannot copy selected edges, try selecting a node instead.\");\r\n      return;\r\n    }\r\n    if (selected) {\r\n      const x = selected.x + 20;\r\n      const y = selected.y + 20;\r\n      setCopied({ ...selected, x, y });\r\n    }\r\n  };\r\n\r\n  const onPasteSelected = (): void | null => {\r\n    if (copied) {\r\n      const arrayOfCopies = nodes?.filter((node) => {\r\n        return (\r\n          node.title.elementAfterSplit(copyString) ===\r\n          copied.title.elementAfterSplit(copyString)\r\n        );\r\n      });\r\n\r\n      if (arrayOfCopies && arrayOfCopies.length >= 2) {\r\n        console.warn(\"Node already have a copy\");\r\n        return null;\r\n      }\r\n\r\n      const tmpNodes = nodes;\r\n      const newNode = {\r\n        ...copied,\r\n        id: `${playersId + 1}${separatorString}${copied.id}`,\r\n        title: `${copyString}${copied.title}`,\r\n      };\r\n      setGraphNodes([...(tmpNodes ?? []), newNode]);\r\n      setPlayersId(playersId + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <GraphInputSection\r\n        valueForEdge={valueForEdge}\r\n        setValueForEdge={setValueForEdge}\r\n      />\r\n      <GraphView\r\n        showGraphControls={true}\r\n        gridSize=\"100rem\"\r\n        gridDotSize={1}\r\n        ref={refElement}\r\n        nodeKey={NODE_KEY}\r\n        nodes={nodes ?? []}\r\n        edges={edges ?? []}\r\n        selected={selected}\r\n        nodeTypes={nodeConfig.NodeTypes}\r\n        nodeSubtypes={nodeConfig.NodeSubtypes}\r\n        edgeTypes={nodeConfig.NodeTypes}\r\n        onSelectNode={onSelectNode}\r\n        onCreateNode={onCreateNode}\r\n        onUpdateNode={onUpdateNode}\r\n        onDeleteNode={onDeleteNode}\r\n        onSelectEdge={onSelectEdge}\r\n        onCreateEdge={onCreateEdge}\r\n        onSwapEdge={onSwapEdge}\r\n        onDeleteEdge={onDeleteEdge}\r\n        onCopySelected={onCopySelected}\r\n        onPasteSelected={onPasteSelected}\r\n        readOnly={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayes, edges, nodes } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayes,\r\n    edges,\r\n    nodes,\r\n  };\r\n};\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number | IEdge[] | INode[] }) => any\r\n) => {\r\n  return {\r\n    setGraphNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setGraphNumberOfPlayers(nrOfPlayes)),\r\n    setGraphEdges: (edges: IEdge[]) => dispatch(setGraphEdges(edges)),\r\n    setGraphNodes: (nodes: INode[]) => dispatch(setGraphNodes(nodes)),\r\n  };\r\n};\r\n\r\nexport const Graph = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GraphNotConnected);\r\n\r\nexport default Graph;\r\n","import _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (inp: Array<number>) => {\r\n  const length = inp.length;\r\n  const allCoalitions = [];\r\n\r\n  for (let i = 0; i < Math.pow(2, length); i++) {\r\n    const subset = [];\r\n\r\n    for (var j = 0; j < length; j++) {\r\n      if (i & (1 << j)) {\r\n        subset.push(inp[j]);\r\n      }\r\n    }\r\n    allCoalitions.push(subset);\r\n  }\r\n\r\n  return allCoalitions;\r\n};\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ];\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - valueOfCoalitionWithoutPlayer) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number) =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\nexport const firstMissingPositive = (nums: number[]) => {\r\n  let len = nums.length;\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] < 0) nums[i] = 0;\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    let pos = Math.abs(nums[i]) - 1;\r\n    if (pos >= 0 && pos <= len) {\r\n      if (nums[pos] > 0) nums[pos] = -nums[pos];\r\n      if (nums[pos] === 0) nums[pos] = -Infinity;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] >= 0) return i + 1;\r\n  }\r\n\r\n  return len + 1;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const InformationSection = () => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>To add player, hold shift and click on the grid.</li>\r\n        <li>\r\n          To add edge with value, change the value on the input above, then hold\r\n          shift and click/drag to between players.\r\n        </li>\r\n        <li>To delete a node or edge, click on it and press delete.</li>\r\n        <li>Click and drag nodes to change their position.</li>\r\n        <li>\r\n          To create self edges copy and paste with (Ctrl+C and Ctrl+V) a player\r\n          and create an edge between original and copy.\r\n        </li>\r\n        <li>Note: On Mac computers, use Cmd instead of Ctrl.</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, Collapse, Popover, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setGraphShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, IMCNetsRule, Store } from \"../../../type\";\r\nimport {\r\n  calculateGraphShapleyValues,\r\n  generateCoalitionOfN,\r\n  generateMCNetsRulesFromEdges,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport Graph from \"./graph\";\r\nimport { InformationSection } from \"./information-section\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport \"./calculator-graph.scss\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\ninterface ICalculatorGraphProps extends GraphGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setGraphShapleyValues: (values: number[]) => void;\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\n\r\nexport const CalculatorGraphNotConnected = (props: ICalculatorGraphProps) => {\r\n  const {\r\n    nrOfPlayes,\r\n    edges,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setGraphShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n  } = props;\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\"]);\r\n  const translateGraphToMCNets = () => {\r\n    setMCNetsRules(generateMCNetsRulesFromEdges(edges ?? []));\r\n    setMCNetsNumberOfPlayers(nrOfPlayes ?? 0);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n  return (\r\n    <div className=\"calculator-graph\">\r\n      <Row justify=\"space-around\" style={{ marginBottom: \"16px\" }}>\r\n        <Popover\r\n          content={<InformationSection />}\r\n          title=\"Description\"\r\n          trigger=\"hover\"\r\n        >\r\n          <Button>How to use</Button>\r\n        </Popover>\r\n        <Button\r\n          type=\"primary\"\r\n          disabled={!edges?.length}\r\n          className=\"generate-button\"\r\n          onClick={() => {\r\n            setActiveKeys([\"2\"]);\r\n            setGraphShapleyValues(\r\n              calculateGraphShapleyValues(\r\n                generateCoalitionOfN(nrOfPlayes ?? 0),\r\n                edges ?? []\r\n              )\r\n            );\r\n          }}\r\n        >\r\n          Generate Shapley Values\r\n        </Button>\r\n        <Button\r\n          disabled={!edges?.length}\r\n          className=\"generate-button\"\r\n          onClick={translateGraphToMCNets}\r\n        >\r\n          Translate to MC Nets\r\n        </Button>\r\n      </Row>\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Graph Game Definition\" key=\"1\">\r\n          <Graph />\r\n        </Collapse.Panel>\r\n        <Collapse.Panel header=\"Calculated Shapley Values\" key=\"2\">\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayes, edges, shapleyValues } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayes,\r\n    edges,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setGraphShapleyValues: (values: number[]) =>\r\n      dispatch(setGraphShapleyValues(values)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const CalculatorGraph = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorGraphNotConnected);\r\n\r\nexport default CalculatorGraph;\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport { CalculatorFunctionDefinition } from \"../../../calculators/calculator-function-definition/calculator-function-definition\";\r\nimport { CalculatorCoalitionStructures } from \"../../../calculators/calculator-coalition-structures/calculator-coalition-structures\";\r\nimport { CalculatorMCNets } from \"../../../calculators/calculator-mc-nets/calculator-mc-nets\";\r\nimport { CalculatorGraph } from \"../../../calculators/calculator-graph/calculator-graph\";\r\n\r\nconst { TabPane } = Tabs;\r\nexport type TabsKeys = \"coalition\" | \"function\" | \"mc-nets\";\r\nexport const AppBody = (): JSX.Element => {\r\n  const [activeTabKey, setActiveTabKey] = useState<TabsKeys>(\"coalition\");\r\n  return (\r\n    <Tabs\r\n      activeKey={activeTabKey}\r\n      onTabClick={(key: string) => setActiveTabKey(key as TabsKeys)}\r\n      centered\r\n    >\r\n      <TabPane tab=\"Coalition structures definition\" key=\"coalition\">\r\n        <CalculatorCoalitionStructures setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"Function generating values\" key=\"function\" disabled>\r\n        <CalculatorFunctionDefinition />\r\n      </TabPane>\r\n      <TabPane tab=\"MC-nets game representation\" key=\"mc-nets\">\r\n        <CalculatorMCNets />\r\n      </TabPane>\r\n      <TabPane tab=\"Graph game representation\" key=\"graph\">\r\n        <CalculatorGraph setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default AppBody;\r\n","import React from 'react'\r\nimport { PageHeader } from 'antd';\r\nimport './app-header.css';\r\n\r\nexport const AppHeader = (): JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","import { PLAYER_TYPE } from \"../../components/calculators/calculator-graph/config\";\r\nimport { Store } from \"../../type\";\r\nimport ActionTypes from \"../actionTypes\";\r\n\r\nconst initialState: Store = {\r\n  graph: {\r\n    nodes: [\r\n      {\r\n        id: \"1\",\r\n        title: \"1\",\r\n        type: PLAYER_TYPE,\r\n        x: 300,\r\n        y: 300,\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nexport const aplication = (\r\n  state = initialState,\r\n  action: { type: any; payload: any }\r\n): Store => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          coalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          functionOfCoalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_RULES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          rules: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_EDGES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          edges: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_NODES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nodes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default aplication;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react'\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport AppBody from \"../components/layout/body/app-body/app-body\";\r\nimport AppHeader from \"../components/layout/header/app-header\";\r\nimport store from \"../redux/store\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"app\">\r\n        <AppHeader />\r\n        <AppBody />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}