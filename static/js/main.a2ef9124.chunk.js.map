{"version":3,"sources":["components/calculators/calculator-function-definition/calculator-function-definition.tsx","utilities/calculation-functions.ts","redux/actionTypes.ts","redux/actions.ts","components/calculators/calculator-coalition-structures/coalition-structures-input.tsx","components/shared-components/number-of-players-input.tsx","components/shared-components/display-generated-values.tsx","components/calculators/calculator-coalition-structures/calculator-coalition-structures.tsx","components/calculators/calculator-mc-nets/add-mc-nets-rule/add-mc-nets-rule.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/player-group/players-group.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/mc-nets-rule.tsx","components/calculators/calculator-mc-nets/calculator-mc-nets.tsx","components/calculators/calculator-graph/config.tsx","components/calculators/calculator-graph/graph-input-section.tsx","components/calculators/calculator-graph/graph.tsx","utilities/calculationg-functions.ts","components/calculators/calculator-graph/information-section.tsx","components/calculators/calculator-graph/calculator-graph.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","index.tsx"],"names":["CalculatorFunctionDefinition","className","indexOfArrayInArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","generateCoalitions","arr","reduce","subsets","value","concat","map","set","sort","a","b","length","factorial","n","r","calculateAllShapleyValues","players","coalitions","funcOfCoalitions","shapleyValues","player","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","generateCoalitionOfN","event","Array","from","v","k","calculateMCNetsShapleyValues","rules","nrOfPlayers","values","fill","rule","positive","negative","numberOfPositivePlayers","positivePlayers","numberOfNegativePlayers","negativePlayers","positivePlayersContribution","negativePlayersContribution","calculateNegativePlayersMarginalContribution","parseFloat","calculateGraphShapleyValues","grandCoalition","edges","edgesStructure","edge","source","split","at","target","handleText","generateCoalitionsFromEdges","ActionTypes","SET_COALITIONS_NUMBER_OF_PLAYERS","SET_COALITIONS_COALITIONS","SET_COALITIONS_FUNCTION_OF_COALITIONS","SET_COALITIONS_SHAPLEY_VALUES","SET_MCNETS_NUMBER_OF_PLAYERS","SET_MCNETS_RULES","SET_MCNETS_SHAPLEY_VALUES","SET_GRAPH_NUMBER_OF_PLAYERS","SET_GRAPH_EDGES","SET_GRAPH_NODES","SET_GRAPH_SHAPLEY_VALUES","setCoalitionsNumberOfplayers","nrOfPlayes","type","payload","setCoalitionsCoalitions","setCoalitionsFunctionOfCoalitions","functionOfCoalitions","setMCNetsNumberOfPlayers","setMCNetsRules","CoalitionStructuresInput","connect","state","aplication","dispatch","props","dataSource","key","toString","columns","title","dataIndex","align","render","text","record","defaultValue","onChange","tmpFunction","bordered","size","pagination","scroll","y","column","NumberOfPlayersForm","numberOfPlayers","message","maxValue","handleNumberOfPlayesChange","labelCol","span","wrapperCol","layout","Item","labelAlign","label","min","max","DisplayGeneratedValues","listShapleyValues","tableMaxHeight","shapleuValue","playerNumber","CalculatorCoalitionStructures","setCoalitionsShapleyValues","setActiveTabKey","useState","setGrandCalition","undefined","setMessage","useEffect","newCoalitions","unshift","justify","xs","sm","md","lg","xl","cssClass","onFileLoaded","data","newFunctionOfCoalitions","row","pop","currentCoalition","slice","inputName","parserOptions","header","dynamicTyping","skipEmptyLines","onClick","gameDefinition","csvContent","e","join","window","open","encodeURI","disabled","style","margin","newRules","String","filter","AddMCNetsRule","mcNets","flex","shape","icon","PlusOutlined","PlayersGroup","options","Group","width","MCNetsRule","plainOptions","wrap","placeholder","tmpRules","checkedValues","val","MinusOutlined","CalculatorMCNets","setMCNetsShapleyValues","activeKeys","setActiveKeys","activeKey","keys","Panel","marginBottom","tmpActiveKeys","reles","nrOfCoalitions","console","log","generateFunctionOfCoalitionsFromMCNets","marginLeft","_rule","playerShape","viewBox","id","cx","cy","nodeConfig","EdgeTypes","normalEdge","transform","x","height","shapeId","NodeSubtypes","NodeTypes","typeText","GraphInputSection","valueForEdge","setValueForEdge","prototype","elementAfterSplit","separator","this","Graph","graph","nodes","setGraphNumberOfPlayers","setGraphEdges","setGraphNodes","selected","setSelected","copied","setCopied","refElement","useRef","showGraphControls","gridSize","gridDotSize","ref","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","onSelectNode","viewNode","onCreateNode","tmpNodes","newPlayerNr","nums","len","i","pos","Math","abs","Infinity","firstMissingPositive","element","onUpdateNode","searchNode","findIndex","node","onDeleteNode","_nodeId","nodeArr","newEdges","onSelectEdge","viewEdge","onCreateEdge","sourceViewNode","targetViewNode","viewEdgeRealSource","viewEdgeRealTarget","isConnectionDefined","some","edgeSourceRealTitle","edgeTargetRealTitle","isSourceCopy","isTargetCopy","isConnectionValid","shouldEdgeBeCreated","onSwapEdge","searchEdge","tmpEdges","JSON","parse","stringify","onDeleteEdge","_viewEdge","onCopySelected","warn","onPasteSelected","arrayOfCopies","newNode","readOnly","InformationSection","CalculatorGraph","setGraphShapleyValues","content","trigger","generateMCNetsRulesFromEdges","generateFunctionOfCoalitionsFromEdges","TabPane","Tabs","AppBody","activeTabKey","onTabClick","centered","tab","AppHeader","subTitle","initialState","action","combineReducers","createStore","rootReducer","App","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2ef9124.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const CalculatorFunctionDefinition = (): JSX.Element => {\r\n  return <div className=\"calculator-coalition-definition\"></div>;\r\n};\r\n\r\nexport default CalculatorFunctionDefinition;\r\n","import { IEdge } from \"react-digraph\";\r\nimport _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const separatorString = \"-copy-of-\";\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (arr: Array<number>) =>\r\n  arr\r\n    .reduce(\r\n      (subsets: number[][], value: number) =>\r\n        subsets.concat(subsets.map((set) => [...set, value])),\r\n      [[]]\r\n    )\r\n    .sort((a, b) => a.length - b.length);\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ] ?? 0;\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - (valueOfCoalitionWithoutPlayer ?? 0)) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number): number[] =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\n\r\nexport const generateCoalitionsFromEdges = (\r\n  edges: IEdge[]\r\n): Array<{ value: number; coalition: number[] }> => {\r\n  return edges.map((edge) => {\r\n    const source = parseFloat(edge.source.split(separatorString).at(-1) ?? \"\");\r\n    const target = parseFloat(edge.target.split(separatorString).at(-1) ?? \"\");\r\n    const value = parseFloat(edge.handleText ?? \"\");\r\n    return {\r\n      value,\r\n      coalition: source === target ? [source] : [source, target],\r\n    };\r\n  });\r\n};\r\n\r\nexport const calculateGraphShapleyValues = (\r\n  grandCoalition: number[],\r\n  edges: IEdge[]\r\n): number[] => {\r\n  const edgesStructure = generateCoalitionsFromEdges(edges);\r\n  return grandCoalition.map((player) => {\r\n    let value = 0;\r\n    edgesStructure.forEach((edge) => {\r\n      value += edge.coalition.includes(player)\r\n        ? edge.value / (edge.coalition.length === 2 ? 2 : 1)\r\n        : 0;\r\n    });\r\n    return value;\r\n  });\r\n};\r\n\r\nexport const generateMCNetsRulesFromEdges = (edges: IEdge[]): IMCNetsRule[] => {\r\n  return edges.map((edge) => {\r\n    const source = edge.source.split(separatorString).at(-1) ?? \"\";\r\n    const target = edge.target.split(separatorString).at(-1) ?? \"\";\r\n    const value = parseFloat(edge.handleText ?? \"\");\r\n    return {\r\n      value,\r\n      positivePlayers: source === target ? [source] : [source, target],\r\n      negativePlayers: [],\r\n    };\r\n  });\r\n};\r\n\r\nexport const generateCoalitionsCoalitionsFromEdges = (\r\n  edges: IEdge[]\r\n): number[][] => {\r\n  return edges.map((edge) => {\r\n    const source = parseFloat(edge.source.split(separatorString).at(-1) ?? \"\");\r\n    const target = parseFloat(edge.target.split(separatorString).at(-1) ?? \"\");\r\n    return source === target ? [source] : [source, target];\r\n  });\r\n};\r\n\r\nexport const generateFunctionOfCoalitionsFromEdges = (\r\n  coalitions: number[][],\r\n  edges: IEdge[]\r\n) =>\r\n  coalitions.map((coalition) => {\r\n    let value = 0;\r\n    edges?.forEach((edge) => {\r\n      const coalitionContainSourceAndTarget =\r\n        coalition.includes(\r\n          parseFloat(edge.source.elementAfterSplit(separatorString) ?? \"0\")\r\n        ) &&\r\n        coalition.includes(\r\n          parseFloat(edge.target.elementAfterSplit(separatorString) ?? \"0\")\r\n        );\r\n      if (coalitionContainSourceAndTarget) {\r\n        value += parseFloat(edge.handleText ?? \"0\");\r\n      }\r\n    });\r\n    return value;\r\n  });\r\nexport const generateFunctionOfCoalitionsFromMCNets = (\r\n  reles: IMCNetsRule[],\r\n  nrOfCoalitions: number\r\n): number[] => {\r\n  const functionOfCoalitions = Array(nrOfCoalitions).fill(0);\r\n  console.log(functionOfCoalitions);\r\n\r\n  return functionOfCoalitions;\r\n};\r\n","export const ActionTypes = {\r\n  SET_COALITIONS_NUMBER_OF_PLAYERS: \"SET_COALITIONS_NUMBER_OF_PLAYERS\",\r\n  SET_COALITIONS_COALITIONS: \"SET_COALITIONS_COALITIONS\",\r\n  SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n    \"SET_COALITIONS_FUNCTION_OF_COALITIONS\",\r\n  SET_COALITIONS_SHAPLEY_VALUES: \"SET_COALITIONS_SHAPLEY_VALUES\",\r\n  SET_MCNETS_NUMBER_OF_PLAYERS: \"SET_MCNETS_NUMBER_OF_PLAYERS\",\r\n  SET_MCNETS_RULES: \"SET_MCNETS_RULES\",\r\n  SET_MCNETS_SHAPLEY_VALUES: \"SET_MCNETS_SHAPLEY_VALUES\",\r\n  SET_GRAPH_NUMBER_OF_PLAYERS: \"SET_GRAPH_NUMBER_OF_PLAYERS\",\r\n  SET_GRAPH_EDGES: \"SET_GRAPH_EDGES\",\r\n  SET_GRAPH_NODES: \"SET_GRAPH_NODES\",\r\n  SET_GRAPH_SHAPLEY_VALUES: \"SET_GRAPH_SHAPLEY_VALUES\",\r\n};\r\n\r\nexport default ActionTypes;\r\n","import { IEdge, INode } from \"react-digraph\";\r\nimport { IMCNetsRule } from \"../type\";\r\nimport ActionTypes from \"./actionTypes\";\r\n\r\nexport const setCoalitionsNumberOfplayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setCoalitionsCoalitions = (\r\n  coalitions: number[][]\r\n): {\r\n  type: string;\r\n  payload: number[][];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_COALITIONS,\r\n  payload: coalitions,\r\n});\r\n\r\nexport const setCoalitionsFunctionOfCoalitions = (\r\n  functionOfCoalitions: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS,\r\n  payload: functionOfCoalitions,\r\n});\r\n\r\nexport const setCoalitionsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setMCNetsNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => {\r\n  return {\r\n    type: ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS,\r\n    payload: nrOfPlayes,\r\n  };\r\n};\r\n\r\nexport const setMCNetsRules = (\r\n  rules: IMCNetsRule[]\r\n): {\r\n  type: string;\r\n  payload: IMCNetsRule[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_RULES,\r\n  payload: rules,\r\n});\r\n\r\nexport const setMCNetsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setGraphNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setGraphNodes = (\r\n  nodes: INode[]\r\n): {\r\n  type: string;\r\n  payload: INode[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NODES,\r\n  payload: nodes,\r\n});\r\n\r\nexport const setGraphEdges = (\r\n  edges: IEdge[]\r\n): {\r\n  type: string;\r\n  payload: IEdge[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_EDGES,\r\n  payload: edges,\r\n});\r\n\r\nexport const setGraphShapleyValues = (\r\n  values: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_SHAPLEY_VALUES,\r\n  payload: values,\r\n});\r\n","import React from \"react\";\r\nimport { Table, InputNumber } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCoalitionsFunctionOfCoalitions } from \"../../../redux/actions\";\r\nimport { Store } from \"../../../type\";\r\n\r\nexport interface ICoalitionStructuresInputProps {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => void;\r\n}\r\n\r\nexport const CoalitionStructuresInputNotConnected = (\r\n  props: ICoalitionStructuresInputProps\r\n): JSX.Element => {\r\n  const {\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const dataSource = coalitions?.map((coalition, index) => ({\r\n    key: index,\r\n    coalition: coalition.length ? coalition.toString() : \"Ø\",\r\n    value: 0,\r\n  }));\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Coalition\",\r\n      dataIndex: \"coalition\",\r\n      key: \"coalition\",\r\n      align: \"right\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (text: string, record: any) => (\r\n        <InputNumber\r\n          value={functionOfCoalitions?.[record.key]}\r\n          defaultValue={0}\r\n          onChange={(event: number) => {\r\n            const tmpFunction = functionOfCoalitions\r\n              ? [...functionOfCoalitions]\r\n              : [];\r\n            tmpFunction[record.key] = event;\r\n            setCoalitionsFunctionOfCoalitions(tmpFunction);\r\n          }}\r\n        />\r\n      ),\r\n      align: \"left\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"coalition-structures-input\"\r\n    >\r\n      {columns.map((column) => (\r\n        <Column {...column} />\r\n      ))}\r\n    </Table>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: {\r\n  aplication: Store;\r\n}): {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n} => {\r\n  return {\r\n    coalitions: state.aplication.coalitions?.coalitions,\r\n    functionOfCoalitions: state.aplication.coalitions?.functionOfCoalitions,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number[] }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CoalitionStructuresInput = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CoalitionStructuresInputNotConnected);\r\nexport default CoalitionStructuresInput;\r\n","import React from 'react'\r\nimport { Form, InputNumber } from \"antd\"\r\nexport interface INumberOfPlayersForm {\r\n  numberOfPlayers?: number\r\n  message?: string\r\n  maxValue: number\r\n  handleNumberOfPlayesChange?: (event: number) => void\r\n}\r\nexport const NumberOfPlayersForm = (props: INumberOfPlayersForm): JSX.Element => {\r\n  const { numberOfPlayers, message, maxValue, handleNumberOfPlayesChange } = props\r\n  return <Form\r\n    labelCol={{ span: 12 }}\r\n    wrapperCol={{ span: 12 }}\r\n    layout=\"horizontal\"\r\n    size=\"middle\"\r\n    className=\"number-of-players-input\"\r\n  >\r\n    <div className=\"error-message\">{message}</div>\r\n    <Form.Item labelAlign=\"right\" label=\"Number of players\">\r\n      <InputNumber\r\n        min={0}\r\n        max={maxValue - 1}\r\n        defaultValue={0}\r\n        value={numberOfPlayers}\r\n        onChange={handleNumberOfPlayesChange}\r\n      />\r\n    </Form.Item>\r\n  </Form>\r\n}\r\n\r\nexport default NumberOfPlayersForm","import React from 'react'\r\nimport { Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface IDisplayGeneratedValuesProps {\r\n  listShapleyValues: number[]\r\n  tableMaxHeight?: number\r\n}\r\n\r\nexport const DisplayGeneratedValues = (props: IDisplayGeneratedValuesProps): JSX.Element => {\r\n  const { listShapleyValues, tableMaxHeight } = props\r\n  const dataSource = listShapleyValues.map((shapleuValue, index) => {\r\n    return {\r\n      key: index,\r\n      value: shapleuValue,\r\n      playerNumber: index + 1\r\n    }\r\n  })\r\n\r\n  const columns = [{\r\n    title: 'Player number',\r\n    dataIndex: 'playerNumber',\r\n    key: 'playerNumber',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }, {\r\n    title: 'Player Shapley Value',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }]\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: tableMaxHeight ?? 300 }}\r\n      className=\"display-generated-values\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default DisplayGeneratedValues\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Row } from \"antd\";\r\nimport \"./calculator-coalition-structures.scss\";\r\nimport {\r\n  calculateAllShapleyValues,\r\n  generateCoalitions,\r\n  generateCoalitionOfN,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport CoalitionStructuresInput from \"./coalition-structures-input\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setCoalitionsShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\nimport { CoalitionsGame, IMCNetsRule, Store } from \"../../../type\";\r\n\r\ninterface ICalculatorCoalitionStructuresProps extends CoalitionsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setCoalitionsShapleyValues: (content: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  };\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nconst CalculatorCoalitionStructuresNotConnected = (\r\n  props: ICalculatorCoalitionStructuresProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n    setCoalitionsShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n  } = props;\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>(\r\n    nrOfPlayes ? generateCoalitionOfN(nrOfPlayes) : []\r\n  );\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const maxValue = 10;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < maxValue) {\r\n      setCoalitionsNumberOfplayers(event);\r\n      setGrandCalition(generateCoalitionOfN(event));\r\n      setCoalitionsFunctionOfCoalitions(Array(2 ** event).fill(0));\r\n      setCoalitionsShapleyValues([]);\r\n      setMessage(undefined);\r\n    } else setMessage(\"Number of coalition members exceded!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      const newCoalitions = generateCoalitions(grandCoalition);\r\n      newCoalitions[0].unshift(0);\r\n      setCoalitionsCoalitions(newCoalitions);\r\n    }\r\n  }, [grandCoalition, setCoalitionsCoalitions]);\r\n\r\n  useEffect(() => {\r\n    setGrandCalition(generateCoalitionOfN(nrOfPlayes ?? 0));\r\n  }, [nrOfPlayes]);\r\n\r\n  const handleForce = (data: any) => {\r\n    const newCoalitions: number[][] = [];\r\n    const newFunctionOfCoalitions: number[] = [];\r\n    let numberOfPlayers = 0;\r\n\r\n    data.forEach((row: number[]) => {\r\n      row.pop();\r\n      const currentCoalition = row.slice(0, -1);\r\n      numberOfPlayers =\r\n        currentCoalition.length > numberOfPlayers\r\n          ? currentCoalition.length\r\n          : numberOfPlayers;\r\n      newCoalitions.push(currentCoalition);\r\n      newFunctionOfCoalitions.push(row.slice(-1).pop() ?? 0);\r\n    });\r\n\r\n    setCoalitionsNumberOfplayers(numberOfPlayers);\r\n    setCoalitionsCoalitions(newCoalitions);\r\n    setCoalitionsFunctionOfCoalitions(newFunctionOfCoalitions);\r\n  };\r\n\r\n  const handleDownloadGameDefinition = () => {\r\n    const gameDefinition: number[][] = coalitions?.map((coalition, index) => {\r\n      return [...coalition, functionOfCoalitions?.[index] ?? 0];\r\n    }) ?? [[0]];\r\n    // gameDefinition[0].unshift(0);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,\" +\r\n      gameDefinition?.map((e) => e.join(\",\") + \",\").join(\"\\n\");\r\n\r\n    window.open(encodeURI(csvContent));\r\n  };\r\n\r\n  const translateToMCNets = () => {\r\n    const newRules: IMCNetsRule[] = [];\r\n    functionOfCoalitions?.forEach((value, index) => {\r\n      if (value) {\r\n        newRules.push({\r\n          positivePlayers: coalitions?.[index]?.map(String) ?? [],\r\n          negativePlayers:\r\n            grandCoalition\r\n              .filter((player) => !coalitions?.[index]?.includes(player))\r\n              .map(String) ?? [],\r\n          value: value ?? 0,\r\n        });\r\n      }\r\n    });\r\n    setMCNetsNumberOfPlayers(grandCoalition.length);\r\n    setMCNetsRules(newRules);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-structures\">\r\n      <NumberOfPlayersForm\r\n        numberOfPlayers={nrOfPlayes}\r\n        maxValue={maxValue}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      <Row justify=\"center\">\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <CoalitionStructuresInput />\r\n          <div className=\"upload\">\r\n            <CSVReader\r\n              cssClass=\"react-csv-input\"\r\n              label={<span>Upload game definition from .csv file </span>}\r\n              onFileLoaded={handleForce}\r\n              inputName=\"input2\"\r\n              parserOptions={{\r\n                header: false,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"download\">\r\n            <Button onClick={handleDownloadGameDefinition}>\r\n              Download Game Definition\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n        <Col className=\"buttons-col\" xs={24} sm={24} md={24} lg={4} xl={4}>\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={!nrOfPlayes}\r\n            style={{ margin: \"8px\" }}\r\n            className=\"generate-button\"\r\n            onClick={() =>\r\n              setCoalitionsShapleyValues(\r\n                calculateAllShapleyValues(\r\n                  grandCoalition,\r\n                  coalitions ?? [],\r\n                  functionOfCoalitions ?? []\r\n                )\r\n              )\r\n            }\r\n          >\r\n            Generate Shapley Values\r\n          </Button>\r\n          <Button\r\n            disabled={!nrOfPlayes}\r\n            className=\"generate-button\"\r\n            onClick={translateToMCNets}\r\n          >\r\n            Translate to MC Nets\r\n          </Button>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): CoalitionsGame => {\r\n  const { nrOfPlayes, coalitions, functionOfCoalitions, shapleyValues } =\r\n    state.aplication.coalitions || {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    coalitions: coalitions,\r\n    functionOfCoalitions: functionOfCoalitions,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n    setCoalitionsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setCoalitionsShapleyValues(shapleyValues)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n  };\r\n};\r\nexport const CalculatorCoalitionStructures = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorCoalitionStructuresNotConnected);\r\nexport default CalculatorCoalitionStructures;\r\n","import React from \"react\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { IMCNetsRule, McNetsGame, Store } from \"../../../../type\";\r\n\r\nexport interface IAddMCNetsRuleProps {\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\n\r\nexport const AddMCNetsRuleNotConnected = (\r\n  props: IAddMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { rules, setMCNetsRules } = props;\r\n\r\n  return (\r\n    <div className=\"add-mc-nets-rule\">\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col flex=\"64px\">Add Rule</Col>\r\n        <Col flex=\"40px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() =>\r\n              setMCNetsRules([\r\n                ...(rules ?? []),\r\n                {\r\n                  positivePlayers: [],\r\n                  negativePlayers: [],\r\n                  value: 0,\r\n                },\r\n              ])\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  return {\r\n    rules: state.aplication.mcNets?.rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const AddMCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddMCNetsRuleNotConnected);\r\n\r\nexport default AddMCNetsRule;\r\n","import React from 'react'\r\nimport { Checkbox } from \"antd\"\r\nimport './player-group.css'\r\n\r\ninterface IPlayersGroupprops {\r\n  options: string[]\r\n  value: string[]\r\n  onChange: (checkedValues: any) => void\r\n}\r\n\r\nexport const PlayersGroup = (props: IPlayersGroupprops) => {\r\n  const { options, value, onChange } = props\r\n  return (\r\n    <div className=\"player-group\">\r\n      <Checkbox.Group options={options} value={value} onChange={onChange} style={{ width: `calc(${options.length} * 52px)` }} />\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { MinusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, InputNumber, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { generateCoalitionOfN } from \"../../../../utilities/calculation-functions\";\r\nimport { PlayersGroup } from \"./player-group/players-group\";\r\nimport { Store, IMCNetsRule, McNetsGame } from \"../../../../type\";\r\nexport interface IMCNetsRuleProps {\r\n  index: number;\r\n  nrOfPlayes?: number;\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\nexport const MCNetsRuleNotConnected = (\r\n  props: IMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { index, nrOfPlayes, rules, setMCNetsRules } = props;\r\n  const onPositiveChange = (checkedValues: string[]) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].positivePlayers = checkedValues;\r\n    tmpRules[index].negativePlayers = tmpRules[index].negativePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n  const onNegativeChange = (checkedValues: any) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].negativePlayers = checkedValues;\r\n    tmpRules[index].positivePlayers = tmpRules[index].positivePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n\r\n  const plainOptions = generateCoalitionOfN(nrOfPlayes ?? 0).map(String);\r\n  return (\r\n    <div className=\"mc-nets-rule\">\r\n      <Row wrap={false} justify=\"center\">\r\n        <Col flex=\"100px\" className=\"mc-nets-rule-name\">\r\n          {`Rule nr ${index}`}\r\n          <InputNumber\r\n            placeholder=\"Value\"\r\n            onChange={(event) => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules[index].value = event as number;\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n            value={rules?.[index].value}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <PlayersGroup\r\n            onChange={onPositiveChange}\r\n            value={rules?.[index].positivePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <PlayersGroup\r\n            onChange={onNegativeChange}\r\n            value={rules?.[index].negativePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"48px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<MinusOutlined />}\r\n            style={{ margin: \"0 8px\" }}\r\n            onClick={() => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules.splice(index, 1);\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const MCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MCNetsRuleNotConnected);\r\n\r\nexport default MCNetsRule;\r\n","import { Button, Col, Collapse, Row } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  calculateMCNetsShapleyValues,\r\n  generateCoalitionOfN,\r\n  generateCoalitions,\r\n  generateFunctionOfCoalitionsFromMCNets,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport { AddMCNetsRule } from \"./add-mc-nets-rule/add-mc-nets-rule\";\r\nimport { MCNetsRule } from \"./mc-nets-rule/mc-nets-rule\";\r\nimport \"./calculator-mc-nets.scss\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsShapleyValues,\r\n} from \"../../../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Store, McNetsGame, IMCNetsRule } from \"../../../type\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\n\r\ninterface ICalculatorMCNetsProps extends McNetsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nexport const CalculatorMCNetsNotConnected = (\r\n  props: ICalculatorMCNetsProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsShapleyValues,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    setMCNetsNumberOfPlayers(event);\r\n    setMCNetsShapleyValues([]);\r\n  };\r\n\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\"]);\r\n  const translateMCNetsToCoalitions = () => {\r\n    const coalitions = generateCoalitions(\r\n      generateCoalitionOfN(nrOfPlayes ?? 0)\r\n    );\r\n    setCoalitionsNumberOfplayers(nrOfPlayes ?? 0);\r\n    setCoalitionsCoalitions(coalitions);\r\n    setCoalitionsFunctionOfCoalitions(\r\n      generateFunctionOfCoalitionsFromMCNets(rules ?? [], coalitions.length)\r\n    );\r\n    setActiveTabKey(\"coalition\");\r\n  };\r\n  return (\r\n    <div className=\"calculator-mc-nets\">\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Game Definition\" key=\"1\">\r\n          <Row justify=\"center\" style={{ marginBottom: \"16px\" }}>\r\n            <Col span={8}>\r\n              <NumberOfPlayersForm\r\n                maxValue={20}\r\n                numberOfPlayers={nrOfPlayes}\r\n                handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n              />\r\n            </Col>\r\n            <Col span={8}>\r\n              <Button\r\n                type=\"primary\"\r\n                disabled={!nrOfPlayes}\r\n                className=\"generate-button\"\r\n                onClick={() => {\r\n                  setMCNetsShapleyValues(\r\n                    calculateMCNetsShapleyValues(rules ?? [], nrOfPlayes ?? 0)\r\n                  );\r\n                  const tmpActiveKeys = activeKeys.includes(\"2\")\r\n                    ? activeKeys\r\n                    : [...activeKeys, \"2\"];\r\n                  setActiveKeys(tmpActiveKeys);\r\n                }}\r\n              >\r\n                Generate Shapley Values\r\n              </Button>\r\n              <Button\r\n                disabled={!nrOfPlayes}\r\n                className=\"generate-button\"\r\n                onClick={translateMCNetsToCoalitions}\r\n                style={{ marginLeft: \"16px\" }}\r\n              >\r\n                Translate to Coalitions\r\n              </Button>\r\n            </Col>\r\n            <Col span={8}>\r\n              <AddMCNetsRule />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"mc-nets-rules\">\r\n            {rules?.length ? (\r\n              <Row align=\"middle\" wrap={false} justify=\"center\">\r\n                <Col flex=\"100px\" className=\"mc-nets-rule-name\"></Col>\r\n\r\n                <Col flex=\"auto\">\r\n                  <div className=\"player-group-name\">Positive Players</div>\r\n                </Col>\r\n                <Col flex=\"auto\">\r\n                  <div className=\"player-group-name\">Negative Players</div>\r\n                </Col>\r\n              </Row>\r\n            ) : null}\r\n            {rules?.map((_rule, index) => {\r\n              return <MCNetsRule key={index} index={index} />;\r\n            })}\r\n          </div>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"Shapley Values\"\r\n          key=\"2\"\r\n          className=\"values-panel\"\r\n        >\r\n          <DisplayGeneratedValues\r\n            listShapleyValues={shapleyValues ?? []}\r\n            tableMaxHeight={200}\r\n          />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules, shapleyValues } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setMCNetsShapleyValues(shapleyValues)),\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CalculatorMCNets = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorMCNetsNotConnected);\r\n\r\nexport default CalculatorMCNets;\r\n","import React from \"react\";\r\n\r\nexport const NODE_KEY = \"id\";\r\nexport const PLAYER_TYPE = \"player\";\r\nexport const NORMAL_EDGE = \"normalEdge\";\r\nexport const nodeTypes = [PLAYER_TYPE];\r\nexport const edgeTypes = [NORMAL_EDGE];\r\n\r\nconst playerShape = (\r\n  <symbol viewBox=\"0 0 200 200\" id=\"player\">\r\n    <circle cx=\"100\" cy=\"100\" r=\"50\" />\r\n  </symbol>\r\n);\r\n\r\nconst normalEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"normalEdge\">\r\n    <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nexport const nodeConfig = {\r\n  EdgeTypes: {\r\n    normalEdge: {\r\n      shape: normalEdgeShape,\r\n      shapeId: \"#normalEdge\",\r\n    },\r\n  },\r\n  NodeSubtypes: {},\r\n  NodeTypes: {\r\n    player: {\r\n      shape: playerShape,\r\n      shapeId: \"#player\",\r\n      typeText: \"Player\",\r\n    },\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport { Form, InputNumber } from \"antd\";\r\ninterface IGraphInputSectionProps {\r\n  valueForEdge: number;\r\n  setValueForEdge: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\nexport const GraphInputSection = (props: IGraphInputSectionProps) => {\r\n  const { valueForEdge, setValueForEdge } = props;\r\n  return (\r\n    <div className=\"graph-input-section\">\r\n      <Form\r\n        layout=\"horizontal\"\r\n        size=\"middle\"\r\n        className=\"number-of-players-input\"\r\n      >\r\n        <Form.Item labelAlign=\"right\" label=\"Edge value\">\r\n          <InputNumber\r\n            value={valueForEdge}\r\n            onChange={(e) => setValueForEdge(e)}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component, useRef, useState } from \"react\";\r\nimport { firstMissingPositive } from \"../../../utilities/calculationg-functions\";\r\nimport { GraphView, IEdge, IGraphViewProps, INode } from \"react-digraph\";\r\nimport { nodeConfig, PLAYER_TYPE, NODE_KEY, NORMAL_EDGE } from \"./config\";\r\nimport {\r\n  setGraphNumberOfPlayers,\r\n  setGraphNodes,\r\n  setGraphEdges,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, Store } from \"../../../type\";\r\nimport { connect } from \"react-redux\";\r\nimport { GraphInputSection } from \"./graph-input-section\";\r\nimport { separatorString } from \"../../../utilities/calculation-functions\";\r\n\r\ninterface IGraphProps extends GraphGame {\r\n  setGraphNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setGraphNodes: (nodes: INode[]) => void;\r\n  setGraphEdges: (edges: IEdge[]) => void;\r\n}\r\nString.prototype.elementAfterSplit = function (\r\n  separator: string\r\n): string | undefined {\r\n  return this.split(separator).at(-1);\r\n};\r\nexport const GraphNotConnected = (props: IGraphProps) => {\r\n  const {\r\n    nrOfPlayes,\r\n    edges,\r\n    nodes,\r\n    setGraphNumberOfPlayers,\r\n    setGraphEdges,\r\n    setGraphNodes,\r\n  } = props;\r\n  const copyString = \"copied \";\r\n  const [valueForEdge, setValueForEdge] = useState(0);\r\n  const [selected, setSelected] = useState<IEdge | INode | null>(null);\r\n  const [copied, setCopied] = useState<IEdge | INode | null>(null);\r\n  const refElement = useRef<Component<IGraphViewProps>>(null);\r\n\r\n  const getNodeIndex = (searchNode: { [x: string]: string }): number => {\r\n    return nodes\r\n      ? nodes.findIndex((node) => {\r\n          return node[NODE_KEY] === searchNode[NODE_KEY];\r\n        })\r\n      : -1;\r\n  };\r\n\r\n  const getEdgeIndex = (searchEdge: {\r\n    source: string | number;\r\n    target: string | number;\r\n  }): number => {\r\n    return edges\r\n      ? edges.findIndex((edge) => {\r\n          return (\r\n            edge.source === searchEdge.source &&\r\n            edge.target === searchEdge.target\r\n          );\r\n        })\r\n      : -1;\r\n  };\r\n\r\n  const onUpdateNode = (viewNode: INode): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const i = getNodeIndex(viewNode);\r\n    tmpNodes[i] = viewNode;\r\n    setGraphNodes(tmpNodes ?? []);\r\n  };\r\n\r\n  const onSelectNode = (viewNode: INode | null): void => {\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onSelectEdge = (viewEdge: IEdge): void => {\r\n    setSelected(viewEdge);\r\n  };\r\n\r\n  const onCreateNode = (x: number, y: number): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const playersNumbers = tmpNodes\r\n      .map((element) => element.title.elementAfterSplit(copyString))\r\n      .filter(String)\r\n      .map(Number);\r\n    const newPlayerNr = firstMissingPositive(playersNumbers);\r\n    const viewNode = {\r\n      id: `${newPlayerNr}`,\r\n      title: `${newPlayerNr}`,\r\n      type: PLAYER_TYPE,\r\n      x,\r\n      y,\r\n    };\r\n    tmpNodes.push(viewNode);\r\n    setGraphNumberOfPlayers(newPlayerNr);\r\n    setGraphNodes(tmpNodes);\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onDeleteNode = (\r\n    viewNode: INode,\r\n    _nodeId: number | string,\r\n    nodeArr: INode[]\r\n  ): void => {\r\n    const newEdges = edges?.filter((edge, i) => {\r\n      return (\r\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\r\n      );\r\n    });\r\n    if (!viewNode.title.includes(copyString)) {\r\n      setGraphNumberOfPlayers(nrOfPlayes ? nrOfPlayes - 1 : 0);\r\n    }\r\n    setGraphNodes(nodeArr);\r\n    setGraphEdges(newEdges ?? []);\r\n    setSelected(null);\r\n  };\r\n\r\n  const shouldEdgeBeCreated = (viewEdge: IEdge): boolean => {\r\n    const viewEdgeRealSource =\r\n      viewEdge.source?.elementAfterSplit(separatorString);\r\n    const viewEdgeRealTarget =\r\n      viewEdge.target?.elementAfterSplit(separatorString);\r\n\r\n    const isConnectionDefined = edges?.some((edge) => {\r\n      const edgeSourceRealTitle =\r\n        edge?.source?.elementAfterSplit(separatorString);\r\n      const edgeTargetRealTitle =\r\n        edge?.target?.elementAfterSplit(separatorString);\r\n\r\n      if (\r\n        viewEdgeRealSource === edgeSourceRealTitle &&\r\n        viewEdgeRealTarget === edgeTargetRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      if (\r\n        viewEdgeRealSource === edgeTargetRealTitle &&\r\n        viewEdgeRealTarget === edgeSourceRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n    const isSourceCopy = viewEdge.source.includes(separatorString);\r\n    const isTargetCopy = viewEdge.target.includes(separatorString);\r\n    const isTargetOriginal = viewEdgeRealTarget === viewEdgeRealSource;\r\n    const isConnectionValid = !(isSourceCopy && !isTargetOriginal);\r\n    return (\r\n      //is the same\r\n      viewEdge.source !== viewEdge.target &&\r\n      //is already defined\r\n      !isConnectionDefined &&\r\n      // apply to game rules\r\n      isConnectionValid &&\r\n      !isTargetCopy\r\n    );\r\n  };\r\n\r\n  const onCreateEdge = (sourceViewNode: INode, targetViewNode: INode): void => {\r\n    const viewEdge: IEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      handleText: valueForEdge.toString(),\r\n      type: NORMAL_EDGE,\r\n    };\r\n    if (shouldEdgeBeCreated(viewEdge)) {\r\n      setGraphEdges([...(edges ?? []), viewEdge]);\r\n      setSelected(viewEdge);\r\n    }\r\n  };\r\n\r\n  const onSwapEdge = (\r\n    sourceViewNode: INode,\r\n    targetViewNode: INode,\r\n    viewEdge: IEdge\r\n  ): void => {\r\n    const tmpEdges = edges ?? [];\r\n    const i = getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(tmpEdges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    tmpEdges[i] = edge;\r\n    setGraphEdges([...tmpEdges]);\r\n    setSelected(edge);\r\n  };\r\n\r\n  const onDeleteEdge = (_viewEdge: IEdge, edges: IEdge[]): void => {\r\n    setGraphEdges(edges);\r\n    setSelected(null);\r\n  };\r\n\r\n  const onCopySelected = (): void => {\r\n    if (selected?.source) {\r\n      console.warn(\"Cannot copy selected edges, try selecting a node instead.\");\r\n      return;\r\n    }\r\n    if (selected) {\r\n      const x = selected.x + 20;\r\n      const y = selected.y + 20;\r\n      setCopied({ ...selected, x, y });\r\n    }\r\n  };\r\n\r\n  const onPasteSelected = (): void | null => {\r\n    if (copied) {\r\n      const arrayOfCopies = nodes?.filter((node) => {\r\n        return (\r\n          node.title.elementAfterSplit(copyString) ===\r\n          copied.title.elementAfterSplit(copyString)\r\n        );\r\n      });\r\n\r\n      if (arrayOfCopies && arrayOfCopies.length >= 2) {\r\n        console.warn(\"Node already have a copy\");\r\n        return null;\r\n      }\r\n\r\n      const tmpNodes = nodes;\r\n      const newNode = {\r\n        ...copied,\r\n        id: `${(nrOfPlayes ?? 0) + 1}${separatorString}${copied.id}`,\r\n        title: `${copyString}${copied.title}`,\r\n      };\r\n      setGraphNodes([...(tmpNodes ?? []), newNode]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <GraphInputSection\r\n        valueForEdge={valueForEdge}\r\n        setValueForEdge={setValueForEdge}\r\n      />\r\n      <GraphView\r\n        showGraphControls={true}\r\n        gridSize=\"100rem\"\r\n        gridDotSize={1}\r\n        ref={refElement}\r\n        nodeKey={NODE_KEY}\r\n        nodes={nodes ?? []}\r\n        edges={edges ?? []}\r\n        selected={selected}\r\n        nodeTypes={nodeConfig.NodeTypes}\r\n        nodeSubtypes={nodeConfig.NodeSubtypes}\r\n        edgeTypes={nodeConfig.NodeTypes}\r\n        onSelectNode={onSelectNode}\r\n        onCreateNode={onCreateNode}\r\n        onUpdateNode={onUpdateNode}\r\n        onDeleteNode={onDeleteNode}\r\n        onSelectEdge={onSelectEdge}\r\n        onCreateEdge={onCreateEdge}\r\n        onSwapEdge={onSwapEdge}\r\n        onDeleteEdge={onDeleteEdge}\r\n        onCopySelected={onCopySelected}\r\n        onPasteSelected={onPasteSelected}\r\n        readOnly={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayes, edges, nodes } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayes,\r\n    edges,\r\n    nodes,\r\n  };\r\n};\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number | IEdge[] | INode[] }) => any\r\n) => {\r\n  return {\r\n    setGraphNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setGraphNumberOfPlayers(nrOfPlayes)),\r\n    setGraphEdges: (edges: IEdge[]) => dispatch(setGraphEdges(edges)),\r\n    setGraphNodes: (nodes: INode[]) => dispatch(setGraphNodes(nodes)),\r\n  };\r\n};\r\n\r\nexport const Graph = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GraphNotConnected);\r\n\r\nexport default Graph;\r\n","import _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (inp: Array<number>) => {\r\n  const length = inp.length;\r\n  const allCoalitions = [];\r\n\r\n  for (let i = 0; i < Math.pow(2, length); i++) {\r\n    const subset = [];\r\n\r\n    for (var j = 0; j < length; j++) {\r\n      if (i & (1 << j)) {\r\n        subset.push(inp[j]);\r\n      }\r\n    }\r\n    allCoalitions.push(subset);\r\n  }\r\n\r\n  return allCoalitions;\r\n};\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ];\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - valueOfCoalitionWithoutPlayer) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number) =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\nexport const firstMissingPositive = (nums: number[]) => {\r\n  let len = nums.length;\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] < 0) nums[i] = 0;\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    let pos = Math.abs(nums[i]) - 1;\r\n    if (pos >= 0 && pos <= len) {\r\n      if (nums[pos] > 0) nums[pos] = -nums[pos];\r\n      if (nums[pos] === 0) nums[pos] = -Infinity;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] >= 0) return i + 1;\r\n  }\r\n\r\n  return len + 1;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const InformationSection = () => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>To add player, hold shift and click on the grid.</li>\r\n        <li>\r\n          To add edge with value, change the value on the 'Edge value' input,\r\n          then hold shift and click/drag to between players.\r\n        </li>\r\n        <li>To delete a node or edge, click on it and press delete.</li>\r\n        <li>Click and drag nodes to change their position.</li>\r\n        <li>\r\n          To create self edges copy and paste with (Ctrl+C and Ctrl+V) a player\r\n          and create an edge between original and copy.\r\n        </li>\r\n        <li>Note: On Mac computers, use Cmd instead of Ctrl.</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, Collapse, Popover, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setGraphShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, IMCNetsRule, Store } from \"../../../type\";\r\nimport {\r\n  calculateGraphShapleyValues,\r\n  generateCoalitionOfN,\r\n  generateCoalitions,\r\n  generateFunctionOfCoalitionsFromEdges,\r\n  generateMCNetsRulesFromEdges,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport Graph from \"./graph\";\r\nimport { InformationSection } from \"./information-section\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport \"./calculator-graph.scss\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\ninterface ICalculatorGraphProps extends GraphGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setGraphShapleyValues: (values: number[]) => void;\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nexport const CalculatorGraphNotConnected = (props: ICalculatorGraphProps) => {\r\n  const {\r\n    nrOfPlayes,\r\n    edges,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setGraphShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\"]);\r\n  const translateGraphToMCNets = () => {\r\n    setMCNetsRules(generateMCNetsRulesFromEdges(edges ?? []));\r\n    setMCNetsNumberOfPlayers(nrOfPlayes ?? 0);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n  const translateGraphToCoalitions = () => {\r\n    const coalitions = generateCoalitions(\r\n      generateCoalitionOfN(nrOfPlayes ?? 0)\r\n    );\r\n    setCoalitionsNumberOfplayers(nrOfPlayes ?? 0);\r\n    setCoalitionsCoalitions(coalitions);\r\n    setCoalitionsFunctionOfCoalitions(\r\n      generateFunctionOfCoalitionsFromEdges(coalitions, edges ?? [])\r\n    );\r\n    setActiveTabKey(\"coalition\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-graph\">\r\n      <Row justify=\"space-around\" style={{ marginBottom: \"16px\" }}>\r\n        <Popover\r\n          content={<InformationSection />}\r\n          title=\"Description\"\r\n          trigger=\"hover\"\r\n        >\r\n          <Button>How to use</Button>\r\n        </Popover>\r\n        <Button\r\n          type=\"primary\"\r\n          disabled={!edges?.length}\r\n          className=\"generate-button\"\r\n          onClick={() => {\r\n            setActiveKeys([\"2\"]);\r\n            setGraphShapleyValues(\r\n              calculateGraphShapleyValues(\r\n                generateCoalitionOfN(nrOfPlayes ?? 0),\r\n                edges ?? []\r\n              )\r\n            );\r\n          }}\r\n        >\r\n          Generate Shapley Values\r\n        </Button>\r\n        <Button\r\n          disabled={!edges?.length}\r\n          className=\"generate-button\"\r\n          onClick={translateGraphToMCNets}\r\n        >\r\n          Translate to MC Nets\r\n        </Button>\r\n        <Button\r\n          disabled={!edges?.length || (nrOfPlayes ?? 0) > 9}\r\n          className=\"generate-button\"\r\n          onClick={translateGraphToCoalitions}\r\n        >\r\n          Translate to Coalitions\r\n        </Button>\r\n      </Row>\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Graph Game Definition\" key=\"1\">\r\n          <Graph />\r\n        </Collapse.Panel>\r\n        <Collapse.Panel header=\"Calculated Shapley Values\" key=\"2\">\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayes, edges, shapleyValues } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayes,\r\n    edges,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setGraphShapleyValues: (values: number[]) =>\r\n      dispatch(setGraphShapleyValues(values)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\n\r\nexport const CalculatorGraph = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorGraphNotConnected);\r\n\r\nexport default CalculatorGraph;\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport { CalculatorFunctionDefinition } from \"../../../calculators/calculator-function-definition/calculator-function-definition\";\r\nimport { CalculatorCoalitionStructures } from \"../../../calculators/calculator-coalition-structures/calculator-coalition-structures\";\r\nimport { CalculatorMCNets } from \"../../../calculators/calculator-mc-nets/calculator-mc-nets\";\r\nimport { CalculatorGraph } from \"../../../calculators/calculator-graph/calculator-graph\";\r\n\r\nconst { TabPane } = Tabs;\r\nexport type TabsKeys = \"coalition\" | \"function\" | \"mc-nets\";\r\nexport const AppBody = (): JSX.Element => {\r\n  const [activeTabKey, setActiveTabKey] = useState<TabsKeys>(\"coalition\");\r\n  return (\r\n    <Tabs\r\n      activeKey={activeTabKey}\r\n      onTabClick={(key: string) => setActiveTabKey(key as TabsKeys)}\r\n      centered\r\n    >\r\n      <TabPane tab=\"Coalition structures definition\" key=\"coalition\">\r\n        <CalculatorCoalitionStructures setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"Function generating values\" key=\"function\" disabled>\r\n        <CalculatorFunctionDefinition />\r\n      </TabPane>\r\n      <TabPane tab=\"MC-nets game representation\" key=\"mc-nets\">\r\n        <CalculatorMCNets setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"Graph game representation\" key=\"graph\">\r\n        <CalculatorGraph setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default AppBody;\r\n","import React from 'react'\r\nimport { PageHeader } from 'antd';\r\nimport './app-header.css';\r\n\r\nexport const AppHeader = (): JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","import { PLAYER_TYPE } from \"../../components/calculators/calculator-graph/config\";\r\nimport { Store } from \"../../type\";\r\nimport ActionTypes from \"../actionTypes\";\r\n\r\nconst initialState: Store = {\r\n  graph: {\r\n    nrOfPlayes: 1,\r\n    nodes: [\r\n      {\r\n        id: \"1\",\r\n        title: \"1\",\r\n        type: PLAYER_TYPE,\r\n        x: 300,\r\n        y: 300,\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nexport const aplication = (\r\n  state = initialState,\r\n  action: { type: any; payload: any }\r\n): Store => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          coalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          functionOfCoalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_RULES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          rules: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_EDGES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          edges: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_NODES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nodes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default aplication;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react'\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport AppBody from \"../components/layout/body/app-body/app-body\";\r\nimport AppHeader from \"../components/layout/header/app-header\";\r\nimport store from \"../redux/store\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"app\">\r\n        <AppHeader />\r\n        <AppBody />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}