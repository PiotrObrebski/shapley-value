{"version":3,"sources":["components/shared/number-of-players-input.tsx","components/calculators/calculator-function-definition/function-definition-input.tsx","components/calculators/calculator-function-definition/calculator-function-definition.tsx","utilities/calculationg-functions.ts","components/calculators/calculator-coalition-structures/coalition-structures-input.tsx","components/shared/display-generated-values.tsx","components/calculators/calculator-coalition-structures/calculator-coalition-structures.tsx","components/calculators/calculator-mc-nets/add-mc-nets-rule/add-mc-nets-rule.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/mc-nets-rule.tsx","components/calculators/calculator-mc-nets/calculator-mc-nets.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/actionTypes.ts","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberOfPlayersForm","props","message","handleNumberOfPlayesChange","labelCol","span","wrapperCol","layout","size","className","Item","labelAlign","label","min","max","defaultValue","onChange","FunctionDefinitionInput","CalculatorFunctionDefinition","useState","setGrandCalition","undefined","setMessage","setShapleyValues","setFunctionOfCoalitions","event","Array","from","length","v","k","generateCoalitionOfN","fill","indexOfArrayInArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","factorial","n","r","calculateAllShapleyValues","players","coalitions","funcOfCoalitions","shapleyValues","player","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","CoalitionStructuresInput","coalitionsArray","functionOfCoalitions","dataSource","map","key","toString","value","columns","title","dataIndex","align","render","text","record","tmpFunction","bordered","pagination","scroll","y","column","DisplayGeneratedValues","listShapleyValues","shapleuValue","playerNumber","CalculatorCoalitionStructures","grandCoalition","setCoalitionsArray","useEffect","inp","allCoalitions","i","Math","pow","subset","j","generateCoalitions","justify","xs","sm","md","lg","xl","type","disabled","onClick","AddMCNetsRule","rules","setRules","flex","shape","icon","PlusOutlined","posisitePlayers","negativePlayers","MCNetsRule","placeholder","CalculatorMCNets","rule","TabPane","Tabs","AppBody","centered","tab","AppHeader","subTitle","ActionTypes","SET_CONTENT_KEY","initialState","applicationKey","aplication","state","action","payload","combineReducers","createStore","rootReducer","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"oUA0BeA,EArBoB,SAACC,GAClC,IAAQC,EAAwCD,EAAxCC,QAASC,EAA+BF,EAA/BE,2BACjB,OAAO,eAAC,IAAD,CACLC,SAAU,CAAEC,KAAM,IAClBC,WAAY,CAAED,KAAM,IACpBE,OAAO,aACPC,KAAK,SACLC,UAAU,0BALL,UAOL,qBAAKA,UAAU,gBAAf,SAAgCP,IAChC,cAAC,IAAKQ,KAAN,CAAWC,WAAW,QAAQC,MAAM,oBAApC,SACE,cAAC,IAAD,CACEC,IAAK,EACLC,IAAK,GACLC,aAAc,EACdC,SAAUb,UCpBLc,EAA0B,WACrC,OACE,qBAAKR,UAAU,+BCCNS,EAA+B,WAC1C,MAA2CC,mBAAmB,IAA9D,mBAAuBC,GAAvB,WACA,EAA8CD,mBAAqB,IAAnE,mBACA,GADA,UAC8BA,wBAA6BE,IAA3D,mBAAOnB,EAAP,KAAgBoB,EAAhB,KACA,EAA0CH,mBAAmB,IAA7D,mBAAsBI,GAAtB,WACA,EAAwDJ,mBAAmB,IAA3E,mBAA6BK,GAA7B,WAEA,EAAkDL,mBAAmB,IAArE,6BAWA,OACE,sBAAKV,UAAU,kCAAf,UACE,cAAC,EAAD,CACEP,QAASA,EACTC,2BAb6B,SAACsB,GAC9BA,EAAQ,IACVL,EALyB,SAACK,GAAD,OAAmBC,MAAMC,KAAK,CAAEC,OAAQH,IAAS,SAACI,EAAGC,GAAJ,OAAUA,EAAI,KAKvEC,CAAqBN,IACtCD,EAAwBE,MAAM,KAAD,IAAC,EAAKD,IAAOO,KAAK,IAC/CT,EAAiB,IACjBD,OAAWD,IACNC,EAAW,2CAUhB,cAAC,EAAD,Q,oDC1BOW,EAAsB,SAACC,EAA2BC,GAC7D,IAAIC,GAAgB,EAMpB,OALAF,EAAcG,SAAQ,SAACC,EAAOC,GACxBC,IAAEC,QAAQH,EAAOH,KACnBC,EAAeG,MAGZH,GAqBIM,EAAY,SAACC,GACxB,IADsD,IAAnBC,EAAkB,uDAAN,EACxCD,EAAI,GAAGC,GAAKD,IACnB,OAAOC,GAqBIC,EAA4B,SAACC,EAAmBC,EAAwBC,GACnF,IAAMC,EAA0B,GAKhC,OAJAH,EAAQT,SAAQ,SAACa,GACf,IAAMC,EArBoC,SAACD,EAAgBJ,EAAmBC,EAAwBC,GACxG,IAAII,EAAe,EAcnB,OAbAL,EAAWV,SAAQ,SAACgB,GAClB,GAAIA,EAAUC,SAASJ,GAAS,CAC9B,IAAMK,EAA6BP,EAAiBf,EAAoBc,EAAYM,IAC9EG,EAAsB,YAAOH,GACnCG,EAAuBC,OAAOJ,EAAUK,QAAQR,GAAS,GACzD,IAAMS,EAAgCX,EAAiBf,EAAoBc,EAAYS,IACjFI,EAAwBlB,EAAUc,EAAuB5B,QAEzDiC,EADwBnB,EAAUI,EAAQlB,OAAS4B,EAAuB5B,OAAS,GAC9CgC,EAAwBlB,EAAUI,EAAQlB,QACrFwB,IAAiBG,EAA6BI,GAAiCE,MAI5EC,OAAOV,EAAaW,QAAQ,IAMNC,CAA+Bd,EAAQJ,EAASC,EAAYC,GACvFC,EAAcgB,KAAKd,MAEdF,G,kCCJMiB,EA9CyB,SAACjE,GACvC,IAAQkE,EAAmElE,EAAnEkE,gBAAiBC,EAAkDnE,EAAlDmE,qBAAsB5C,EAA4BvB,EAA5BuB,wBACzC6C,EAAU,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAiBG,KAAI,SAACjB,EAAWd,GAAZ,MAAuB,CAC7DgC,IAAKhC,EACLc,UAAWA,EAAUzB,OAASyB,EAAUmB,WAAa,OACrDC,MAAO,MAGHC,EAAU,CACd,CACEC,MAAO,sBACPC,UAAW,YACXL,IAAK,YACLM,MAAO,SAET,CACEF,MAAO,QACPC,UAAW,QACXL,IAAK,QACLO,OAAQ,SAACC,EAAcC,GAAf,OACN,cAAC,IAAD,CACEP,MAAOL,EAAqBY,EAAOT,KACnCxD,aAAc,EACdC,SAAU,SAACS,GACT,IAAMwD,EAAW,YAAOb,GACxBa,EAAYD,EAAOT,KAAO9C,EAC1BD,EAAwByD,OAE9BJ,MAAO,SAIX,OACE,cAAC,IAAD,CACEK,UAAU,EACV1E,KAAK,QACL6D,WAAYA,EACZc,YAAY,EACZC,OAAQ,CAAEC,EAAG,KACb5E,UAAU,6BANZ,SAQGiE,EAAQJ,KAAI,SAACgB,GAAD,OAAY,cAAC,IAAD,eAAYA,UCR5BC,EAlCuB,SAACtF,GACrC,IACMoE,EADwBpE,EAAtBuF,kBAC6BlB,KAAI,SAACmB,EAAclD,GAAf,MAA0B,CACjEgC,IAAKhC,EACLkC,MAAOgB,EACPC,aAAcnD,EAAQ,MAexB,OACE,cAAC,IAAD,CACE2C,UAAU,EACV1E,KAAK,QACL6D,WAAYA,EACZc,YAAY,EACZC,OAAQ,CAAEC,EAAG,KACb5E,UAAU,2BANZ,SAbc,CAAC,CACfkE,MAAO,gBACPC,UAAW,QACXL,IAAK,QACLM,MAAO,UACN,CACDF,MAAO,uBACPC,UAAW,QACXL,IAAK,QACLM,MAAO,WAYIP,KAAI,SAACgB,GAAD,OAAY,cAAC,IAAD,eAAYA,UC7B9BK,EAAgC,WAC3C,MAA2CxE,mBAAmB,IAA9D,mBAAOyE,EAAP,KAAuBxE,EAAvB,KACA,EAA8CD,mBAAqB,IAAnE,mBAAOgD,EAAP,KAAwB0B,EAAxB,KACA,EAA8B1E,wBAA6BE,GAA3D,mBAAOnB,EAAP,KAAgBoB,EAAhB,KACA,EAA0CH,mBAAmB,IAA7D,mBAAO8B,EAAP,KAAsB1B,EAAtB,KACA,EAAwDJ,mBAAmB,IAA3E,mBAAOiD,EAAP,KAA6B5C,EAA7B,KAmBA,OAPAsE,qBAAU,WACJF,GACFC,EHf4B,SAACE,GAIjC,IAHA,IAAMnE,EAASmE,EAAInE,OACboE,EAAgB,GAEbC,EAAI,EAAGA,EAAKC,KAAKC,IAAI,EAAGvE,GAAUqE,IAAK,CAG9C,IAFA,IAAMG,EAAS,GAENC,EAAI,EAAGA,EAAIzE,EAAQyE,IACtBJ,EAAK,GAAKI,GACZD,EAAOnC,KAAK8B,EAAIM,IAGpBL,EAAc/B,KAAKmC,GAGrB,OAAOJ,EGAgBM,CAAmBV,MAEvC,CAACA,IAIF,sBAAKnF,UAAU,kCAAf,UACE,cAAC,EAAD,CACEP,QAASA,EACTC,2BApB6B,SAACsB,GAC9BA,EAAQ,IACVL,EAJyB,SAACK,GAAD,OAAmBC,MAAMC,KAAK,CAAEC,OAAQH,IAAS,SAACI,EAAGC,GAAJ,OAAUA,EAAI,KAIvEC,CAAqBN,IACtCD,EAAwBE,MAAM,KAAD,IAAC,EAAKD,IAAOO,KAAK,IAC/CT,EAAiB,IACjBD,OAAWD,IACNC,EAAW,2CAgBhB,eAAC,IAAD,CAAKiF,QAAQ,SAAb,UACE,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzC,SACE,cAAC,EAAD,CACEzC,gBAAiBA,EACjBC,qBAAsBA,EACtB5C,wBAAyBA,MAG7B,cAAC,IAAD,CAAKgF,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAxC,SACE,cAAC,IAAD,CACEC,KAAK,UACLC,UAAWlB,EAAehE,OAC1BnB,UAAU,kBACVsG,QAAS,kBAAMxF,EACbsB,EAA0B+C,EAAgBzB,EAAiBC,KAL/D,wBAUF,cAAC,IAAD,CAAKoC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzC,SACE,cAAC,EAAD,CAAwBpB,kBAAmBvC,a,SCnDxC+D,EAAgB,SAAC/G,GAC5B,IAAQgH,EAAoBhH,EAApBgH,MAAOC,EAAajH,EAAbiH,SACf,OACE,qBAAKzG,UAAU,mBAAf,SACE,cAAC,IAAD,CAAK8F,QAAQ,MAAb,SACE,cAAC,IAAD,CAAKY,KAAK,OAAV,SACE,cAAC,IAAD,CACEN,KAAK,UACLO,MAAM,SACNC,KAAM,cAACC,EAAA,EAAD,IACNP,QAAS,kBACPG,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAClBM,gBAAiB,GACjBC,gBAAiB,GACjB/C,MAAO,gB,SCfVgD,EAAa,SAACxH,GACzB,OACE,qBAAKQ,UAAU,eAAf,SACE,eAAC,IAAD,CAAK8F,QAAQ,SAAb,UACE,cAAC,IAAD,CAAKY,KAAK,SAGV,cAAC,IAAD,CAAKA,KAAK,QAAV,SACE,cAAC,IAAD,CAAOO,YAAY,kBCLhBC,EAAmB,WAC9B,IACA,EAA0BxG,mBAAwB,IAAlD,mBAAO8F,EAAP,KAAcC,EAAd,KACA,OACE,sBAAKzG,UAAU,qBAAf,UACE,cAAC,EAAD,CACEN,2BAL6B,SAACsB,OAO/BwF,EAAM3C,KAAI,SAACsD,EAAMrF,GAChB,OAAO,cAAC,EAAD,CAAwBqF,KAAMA,EAAMV,SAAUA,GAA7B3E,MAE1B,cAAC,EAAD,CAAe0E,MAAOA,EAAOC,SAAUA,QCXrCW,EAAYC,IAAZD,QAmBOE,EAjBQ,WAErB,OACE,eAAC,IAAD,CAAMC,UAAQ,EAAd,UACE,cAACH,EAAD,CAASI,IAAI,kCAAb,SACE,cAAC,EAAD,KADiD,aAGnD,cAACJ,EAAD,CAASI,IAAI,6BAAb,SACE,cAAC,EAAD,KAD4C,YAG9C,cAACJ,EAAD,CAASI,IAAI,8BAAb,SACE,cAAC,EAAD,KAD6C,e,kBCTtCC,EAPU,WACvB,OAAO,cAAC,IAAD,CACLvD,MAAM,2BACNwD,SAAS,+B,SCJEC,EAJa,CAC1BC,gBAAiB,mBCCbC,EAAe,CACnBC,eAAgB,YAeHC,EAZW,WAAkF,IAAjFC,EAAgF,uDAAxEH,EAAcI,EAA0D,uCACzG,OAAQA,EAAO7B,OACRuB,EAAYC,gBACR,2BACFI,GADL,IAEEF,eAAgBG,EAAOC,UAGlBF,GCVEG,cAAgB,CAAEJ,eCAlBK,cAAYC,GCgBZC,EAZH,WAEV,OACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACA,sBAAKvI,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCASwI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAAS5E,OACP,cAAC,IAAM6E,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.93c8e3b7.chunk.js","sourcesContent":["import { Form, InputNumber } from \"antd\"\r\nexport interface INumberOfPlayersForm {\r\n  message?: string\r\n  handleNumberOfPlayesChange?: (event: number) => void\r\n}\r\nexport const NumberOfPlayersForm = (props: INumberOfPlayersForm): JSX.Element => {\r\n  const { message, handleNumberOfPlayesChange } = props\r\n  return <Form\r\n    labelCol={{ span: 12 }}\r\n    wrapperCol={{ span: 12 }}\r\n    layout=\"horizontal\"\r\n    size=\"middle\"\r\n    className=\"number-of-players-input\"\r\n  >\r\n    <div className=\"error-message\">{message}</div>\r\n    <Form.Item labelAlign=\"right\" label=\"Number of players\">\r\n      <InputNumber\r\n        min={0}\r\n        max={10}\r\n        defaultValue={0}\r\n        onChange={handleNumberOfPlayesChange}\r\n      />\r\n    </Form.Item>\r\n  </Form>\r\n}\r\n\r\nexport default NumberOfPlayersForm","export const FunctionDefinitionInput = (): JSX.Element => {\r\n  return (\r\n    <div className=\"function-definition-input\">\r\n\r\n    </div>\r\n  )\r\n}","import { useState } from 'react';\r\nimport NumberOfPlayersForm from '../../shared/number-of-players-input';\r\nimport { FunctionDefinitionInput } from './function-definition-input';\r\nexport const CalculatorFunctionDefinition = (): JSX.Element => {\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>([]);\r\n  const [coalitionsArray, setCoalitionsArray] = useState<number[][]>([]);\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const [shapleyValues, setShapleyValues] = useState<number[]>([])\r\n  const [functionOfCoalitions, setFunctionOfCoalitions] = useState<number[]>([])\r\n  const generateCoalitionOfN = (event: number) => Array.from({ length: event }, (v, k) => k + 1)\r\n  const [listShapleyValues, setListShapleyValues] = useState<string[]>([])\r\n\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < 10) {\r\n      setGrandCalition(generateCoalitionOfN(event))\r\n      setFunctionOfCoalitions(Array(2 ** event).fill(0))\r\n      setShapleyValues([])\r\n      setMessage(undefined)\r\n    } else setMessage('Number of coalition members exceded!')\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-definition\">\r\n      <NumberOfPlayersForm\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      \r\n      <FunctionDefinitionInput\r\n        // grandCoalition={grandCoalition}\r\n        // coalitionsArray={coalitionsArray}\r\n        // functionOfCoalitions={functionOfCoalitions}\r\n        // setFunctionOfCoalitions={setFunctionOfCoalitions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorFunctionDefinition;\r\n","import _ from \"underscore\"\r\n\r\nexport const indexOfArrayInArray = (arrayOfArrays: number[][], arrayToFind: number[]): number => {\r\n  let indexOfArray = -1\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index\r\n    }\r\n  })\r\n  return indexOfArray\r\n}\r\n\r\nexport const generateCoalitions = (inp: Array<number>) => {\r\n  const length = inp.length;\r\n  const allCoalitions = [];\r\n\r\n  for (let i = 0; i < (Math.pow(2, length)); i++) {\r\n    const subset = [];\r\n\r\n    for (var j = 0; j < length; j++) {\r\n      if (i & (1 << j)) {\r\n        subset.push(inp[j]);\r\n      }\r\n    }\r\n    allCoalitions.push(subset);\r\n  }\r\n\r\n  return allCoalitions;\r\n}\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n}\r\n\r\nexport const coalitionsGenerateShapleyValue = (player: number, players: number[], coalitions: number[][], funcOfCoalitions: number[]) => {\r\n  let shapleyValue = 0\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer = funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)]\r\n      const coalitionWithoutPlayer = [...coalition]\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1)\r\n      const valueOfCoalitionWithoutPlayer = funcOfCoalitions[indexOfArrayInArray(coalitions, coalitionWithoutPlayer)]\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length)\r\n      const numberOfPermutationsA = factorial(players.length - coalitionWithoutPlayer.length - 1)\r\n      const contrCount = numberOfPermutationsA * numberOfPermutationsC / factorial(players.length)\r\n      shapleyValue += (valueOfCoalitionWithPlayer - valueOfCoalitionWithoutPlayer) * contrCount\r\n    }\r\n  })\r\n\r\n  return Number(shapleyValue.toFixed(2))\r\n}\r\n\r\nexport const calculateAllShapleyValues = (players: number[], coalitions: number[][], funcOfCoalitions: number[]) => {\r\n  const shapleyValues: number[] = []\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(player, players, coalitions, funcOfCoalitions)\r\n    shapleyValues.push(playerShapleyValue)\r\n  })\r\n  return shapleyValues\r\n}","import { Table, InputNumber } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface ICoalitionStructuresInputProps {\r\n  coalitionsArray: number[][]\r\n  functionOfCoalitions: number[]\r\n  setFunctionOfCoalitions: React.Dispatch<React.SetStateAction<number[]>>\r\n}\r\n\r\nexport const CoalitionStructuresInput = (props: ICoalitionStructuresInputProps): JSX.Element => {\r\n  const { coalitionsArray, functionOfCoalitions, setFunctionOfCoalitions } = props\r\n  const dataSource = coalitionsArray?.map((coalition, index) => ({\r\n    key: index,\r\n    coalition: coalition.length ? coalition.toString() : 'Ø',\r\n    value: 0,\r\n  }))\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Coalition Structure',\r\n      dataIndex: 'coalition',\r\n      key: 'coalition',\r\n      align: 'right' as 'left' | 'right' | 'center',\r\n    },\r\n    {\r\n      title: 'Value',\r\n      dataIndex: 'value',\r\n      key: 'value',\r\n      render: (text: string, record: any) =>\r\n        <InputNumber\r\n          value={functionOfCoalitions[record.key]}\r\n          defaultValue={0}\r\n          onChange={(event: number) => {\r\n            const tmpFunction = [...functionOfCoalitions]\r\n            tmpFunction[record.key] = event\r\n            setFunctionOfCoalitions(tmpFunction)\r\n          }} />,\r\n      align: 'left' as 'left' | 'right' | 'center',\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"coalition-structures-input\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default CoalitionStructuresInput\r\n","\r\nimport { Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface IDisplayGeneratedValuesProps {\r\n  listShapleyValues: number[]\r\n}\r\n\r\nexport const DisplayGeneratedValues = (props: IDisplayGeneratedValuesProps): JSX.Element => {\r\n  const { listShapleyValues } = props\r\n  const dataSource = listShapleyValues.map((shapleuValue, index) => ({\r\n    key: index,\r\n    value: shapleuValue,\r\n    playerNumber: index + 1\r\n  }))\r\n\r\n  const columns = [{\r\n    title: 'Player number',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }, {\r\n    title: 'Player Shapley Value',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }]\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"display-generated-values\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default DisplayGeneratedValues\r\n","import { Button, Col, Row } from 'antd';\r\nimport { useEffect, useState } from 'react';\r\nimport './calculator-coalition-structures.scss';\r\nimport { calculateAllShapleyValues, generateCoalitions } from '../../../utilities/calculationg-functions';\r\nimport CoalitionStructuresInput from './coalition-structures-input';\r\nimport NumberOfPlayersForm from '../../shared/number-of-players-input';\r\nimport DisplayGeneratedValues from '../../shared/display-generated-values';\r\n\r\nexport const CalculatorCoalitionStructures = (): JSX.Element => {\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>([]);\r\n  const [coalitionsArray, setCoalitionsArray] = useState<number[][]>([]);\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const [shapleyValues, setShapleyValues] = useState<number[]>([])\r\n  const [functionOfCoalitions, setFunctionOfCoalitions] = useState<number[]>([])\r\n  const generateCoalitionOfN = (event: number) => Array.from({ length: event }, (v, k) => k + 1)\r\n\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < 10) {\r\n      setGrandCalition(generateCoalitionOfN(event))\r\n      setFunctionOfCoalitions(Array(2 ** event).fill(0))\r\n      setShapleyValues([])\r\n      setMessage(undefined)\r\n    } else setMessage('Number of coalition members exceded!')\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      setCoalitionsArray(generateCoalitions(grandCoalition))\r\n    }\r\n  }, [grandCoalition])\r\n\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-structures\">\r\n      <NumberOfPlayersForm\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      <Row justify=\"center\">\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <CoalitionStructuresInput\r\n            coalitionsArray={coalitionsArray}\r\n            functionOfCoalitions={functionOfCoalitions}\r\n            setFunctionOfCoalitions={setFunctionOfCoalitions}\r\n          />\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={4} xl={4}>\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={() => setShapleyValues(\r\n              calculateAllShapleyValues(grandCoalition, coalitionsArray, functionOfCoalitions)\r\n            )}>\r\n            Generate\r\n          </Button>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorCoalitionStructures;\r\n","import { PlusOutlined } from \"@ant-design/icons\"\r\nimport { Button, Col, Row } from \"antd\"\r\nimport { IMCNetsRule } from \"../calculator-mc-nets\"\r\nexport interface IAddMCNetsRuleProps {\r\n  rules: IMCNetsRule[]\r\n  setRules: React.Dispatch<React.SetStateAction<IMCNetsRule[]>>\r\n}\r\nexport const AddMCNetsRule = (props: IAddMCNetsRuleProps): JSX.Element => {\r\n  const { rules, setRules } = props\r\n  return (\r\n    <div className=\"add-mc-nets-rule\">\r\n      <Row justify=\"end\">\r\n        <Col flex=\"40px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() =>\r\n              setRules([...rules, {\r\n                posisitePlayers: [],\r\n                negativePlayers: [],\r\n                value: 0\r\n              }])}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}","import { Col, Input, Row } from \"antd\"\r\nimport { IMCNetsRule } from \"../calculator-mc-nets\";\r\nexport interface IMCNetsRuleProps {\r\n  rule: IMCNetsRule\r\n  setRules: React.Dispatch<React.SetStateAction<IMCNetsRule[]>>\r\n}\r\nexport const MCNetsRule = (props: IMCNetsRuleProps): JSX.Element => {\r\n  return (\r\n    <div className=\"mc-nets-rule\">\r\n      <Row justify=\"center\">\r\n        <Col flex=\"auto\">\r\n\r\n        </Col>\r\n        <Col flex=\"110px\">\r\n          <Input placeholder=\"Value\" ></Input>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}","import { useState } from \"react\"\r\nimport NumberOfPlayersForm from \"../../shared/number-of-players-input\"\r\nimport { AddMCNetsRule } from \"./add-mc-nets-rule/add-mc-nets-rule\"\r\nimport { MCNetsRule } from \"./mc-nets-rule/mc-nets-rule\"\r\nexport interface IMCNetsRule {\r\n  posisitePlayers: number[]\r\n  negativePlayers: number[]\r\n  value: number\r\n}\r\nexport const CalculatorMCNets = (): JSX.Element => {\r\n  const handleNumberOfPlayesChange = (event: number) => { }\r\n  const [rules, setRules] = useState<IMCNetsRule[]>([])\r\n  return (\r\n    <div className=\"calculator-mc-nets\">\r\n      <NumberOfPlayersForm\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      {rules.map((rule, index) => {\r\n        return <MCNetsRule key={index} rule={rule} setRules={setRules} />\r\n      })}\r\n      <AddMCNetsRule rules={rules} setRules={setRules} />\r\n    </div>\r\n  )\r\n}","import { Tabs } from 'antd';\r\nimport {\r\n  CalculatorFunctionDefinition,\r\n} from '../../../calculators/calculator-function-definition/calculator-function-definition';\r\nimport {\r\n  CalculatorCoalitionStructures,\r\n} from '../../../calculators/calculator-coalition-structures/calculator-coalition-structures';\r\nimport { CalculatorMCNets } from '../../../calculators/calculator-mc-nets/calculator-mc-nets';\r\n\r\nconst { TabPane } = Tabs\r\n\r\nexport const AppBody = (): JSX.Element => {\r\n\r\n  return (\r\n    <Tabs centered>\r\n      <TabPane tab=\"Coalition structures definition\" key=\"coalition\">\r\n        <CalculatorCoalitionStructures />\r\n      </TabPane >\r\n      <TabPane tab=\"Function generating values\" key=\"function\">\r\n        <CalculatorFunctionDefinition />\r\n      </TabPane >\r\n      <TabPane tab=\"MC-nets game representation\" key=\"mc-nets\">\r\n        <CalculatorMCNets />\r\n      </TabPane >\r\n    </Tabs>\r\n  )\r\n};\r\n\r\nexport default AppBody;\r\n","import './app-header.css';\r\n\r\nimport { PageHeader } from 'antd';\r\nimport React from 'react';\r\n\r\nexport const AppHeader = ():JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","export const  ActionTypes = {\r\n  SET_CONTENT_KEY: 'SET_CONTENT_KEY'\r\n}\r\n\r\nexport default ActionTypes","import ActionTypes from '../actionTypes';\r\n\r\nconst initialState = {\r\n  applicationKey: 'function'\r\n};\r\n\r\nexport const aplication = (state = initialState, action: { type: string, payload: string }): Aplication => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_CONTENT_KEY: \r\n      return {\r\n        ...state,\r\n        applicationKey: action.payload\r\n      }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default aplication\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport AppBody from '../components/layout/body/app-body/app-body';\r\nimport AppHeader from '../components/layout/header/app-header';\r\nimport store from '../redux/store';\r\n\r\nconst App = (): JSX.Element => {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n    <div className=\"app\">\r\n      <AppHeader/>\r\n      <AppBody/>\r\n    </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}