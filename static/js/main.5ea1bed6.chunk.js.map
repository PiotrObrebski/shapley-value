{"version":3,"sources":["components/shared/number-of-players-input.tsx","components/calculators/calculator-function-definition/function-definition-input.tsx","components/calculators/calculator-function-definition/calculator-function-definition.tsx","utilities/calculationg-functions.ts","components/calculators/calculator-coalition-structures/coalition-structures-input.tsx","components/shared/display-generated-values.tsx","components/calculators/calculator-coalition-structures/calculator-coalition-structures.tsx","components/calculators/calculator-mc-nets/add-mc-nets-rule/add-mc-nets-rule.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/players-group.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/mc-nets-rule.tsx","components/calculators/calculator-mc-nets/calculator-mc-nets.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/actionTypes.ts","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberOfPlayersForm","props","message","maxValue","handleNumberOfPlayesChange","labelCol","span","wrapperCol","layout","size","className","Item","labelAlign","label","min","max","defaultValue","onChange","FunctionDefinitionInput","CalculatorFunctionDefinition","useState","setGrandCalition","undefined","setMessage","setShapleyValues","setFunctionOfCoalitions","event","Array","from","length","v","k","generateCoalitionOfN","fill","indexOfArrayInArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","factorial","n","r","calculateAllShapleyValues","players","coalitions","funcOfCoalitions","shapleyValues","player","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","calculateMCNetsShapleyValues","rules","nrOfPlayers","values","rule","positive","negative","numberOfPositivePlayers","positivePlayers","numberOfNegativePlayers","negativePlayers","positivePlayersContribution","value","negativePlayersContribution","calculateNegativePlayersMarginalContribution","parseFloat","CoalitionStructuresInput","coalitionsArray","functionOfCoalitions","dataSource","map","key","toString","columns","title","dataIndex","align","render","text","record","tmpFunction","bordered","pagination","scroll","y","column","DisplayGeneratedValues","listShapleyValues","tableMaxHeight","shapleuValue","playerNumber","CalculatorCoalitionStructures","grandCoalition","setCoalitionsArray","useEffect","inp","allCoalitions","i","Math","pow","subset","j","generateCoalitions","justify","xs","sm","md","lg","xl","type","disabled","onClick","AddMCNetsRule","setRules","flex","shape","icon","PlusOutlined","PlayersGroup","options","Group","style","width","MCNetsRule","nrPlayers","plainOptions","String","wrap","placeholder","tmpRules","checkedValues","filter","val","MinusOutlined","CalculatorMCNets","setNrPlayers","activeKeys","setActiveKeys","activeKey","keys","Panel","header","showArrow","forceRender","collapsible","gutter","tmpActiveKeys","TabPane","Tabs","AppBody","centered","tab","AppHeader","subTitle","ActionTypes","SET_CONTENT_KEY","initialState","applicationKey","aplication","state","action","payload","combineReducers","createStore","rootReducer","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ea1bed6.chunk.js","sourcesContent":["import { Form, InputNumber } from \"antd\"\r\nexport interface INumberOfPlayersForm {\r\n  message?: string\r\n  maxValue: number\r\n  handleNumberOfPlayesChange?: (event: number) => void\r\n}\r\nexport const NumberOfPlayersForm = (props: INumberOfPlayersForm): JSX.Element => {\r\n  const { message, maxValue, handleNumberOfPlayesChange } = props\r\n  return <Form\r\n    labelCol={{ span: 12 }}\r\n    wrapperCol={{ span: 12 }}\r\n    layout=\"horizontal\"\r\n    size=\"middle\"\r\n    className=\"number-of-players-input\"\r\n  >\r\n    <div className=\"error-message\">{message}</div>\r\n    <Form.Item labelAlign=\"right\" label=\"Number of players\">\r\n      <InputNumber\r\n        min={0}\r\n        max={maxValue - 1}\r\n        defaultValue={0}\r\n        onChange={handleNumberOfPlayesChange}\r\n      />\r\n    </Form.Item>\r\n  </Form>\r\n}\r\n\r\nexport default NumberOfPlayersForm","export const FunctionDefinitionInput = (): JSX.Element => {\r\n  return (\r\n    <div className=\"function-definition-input\">\r\n\r\n    </div>\r\n  )\r\n}","import { useState } from 'react';\r\nimport NumberOfPlayersForm from '../../shared/number-of-players-input';\r\nimport { FunctionDefinitionInput } from './function-definition-input';\r\nexport const CalculatorFunctionDefinition = (): JSX.Element => {\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>([]);\r\n  const [coalitionsArray, setCoalitionsArray] = useState<number[][]>([]);\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const [shapleyValues, setShapleyValues] = useState<number[]>([])\r\n  const [functionOfCoalitions, setFunctionOfCoalitions] = useState<number[]>([])\r\n  const generateCoalitionOfN = (event: number) => Array.from({ length: event }, (v, k) => k + 1)\r\n  const [listShapleyValues, setListShapleyValues] = useState<string[]>([])\r\n\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < 10) {\r\n      setGrandCalition(generateCoalitionOfN(event))\r\n      setFunctionOfCoalitions(Array(2 ** event).fill(0))\r\n      setShapleyValues([])\r\n      setMessage(undefined)\r\n    } else setMessage('Number of coalition members exceded!')\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-definition\">\r\n      <NumberOfPlayersForm\r\n        maxValue={10}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n\r\n      <FunctionDefinitionInput\r\n      // grandCoalition={grandCoalition}\r\n      // coalitionsArray={coalitionsArray}\r\n      // functionOfCoalitions={functionOfCoalitions}\r\n      // setFunctionOfCoalitions={setFunctionOfCoalitions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorFunctionDefinition;\r\n","import _ from \"underscore\"\r\nimport { IMCNetsRule } from \"../components/calculators/calculator-mc-nets/calculator-mc-nets\"\r\n\r\nexport const indexOfArrayInArray = (arrayOfArrays: number[][], arrayToFind: number[]): number => {\r\n  let indexOfArray = -1\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index\r\n    }\r\n  })\r\n  return indexOfArray\r\n}\r\n\r\nexport const generateCoalitions = (inp: Array<number>) => {\r\n  const length = inp.length;\r\n  const allCoalitions = [];\r\n\r\n  for (let i = 0; i < (Math.pow(2, length)); i++) {\r\n    const subset = [];\r\n\r\n    for (var j = 0; j < length; j++) {\r\n      if (i & (1 << j)) {\r\n        subset.push(inp[j]);\r\n      }\r\n    }\r\n    allCoalitions.push(subset);\r\n  }\r\n\r\n  return allCoalitions;\r\n}\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n}\r\n\r\nexport const coalitionsGenerateShapleyValue = (player: number, players: number[], coalitions: number[][], funcOfCoalitions: number[]) => {\r\n  let shapleyValue = 0\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer = funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)]\r\n      const coalitionWithoutPlayer = [...coalition]\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1)\r\n      const valueOfCoalitionWithoutPlayer = funcOfCoalitions[indexOfArrayInArray(coalitions, coalitionWithoutPlayer)]\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length)\r\n      const numberOfPermutationsA = factorial(players.length - coalitionWithoutPlayer.length - 1)\r\n      const contrCount = numberOfPermutationsA * numberOfPermutationsC / factorial(players.length)\r\n      shapleyValue += (valueOfCoalitionWithPlayer - valueOfCoalitionWithoutPlayer) * contrCount\r\n    }\r\n  })\r\n\r\n  return Number(shapleyValue.toFixed(2))\r\n}\r\n\r\nexport const calculateAllShapleyValues = (players: number[], coalitions: number[][], funcOfCoalitions: number[]) => {\r\n  const shapleyValues: number[] = []\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(player, players, coalitions, funcOfCoalitions)\r\n    shapleyValues.push(playerShapleyValue)\r\n  })\r\n  return shapleyValues\r\n}\r\n\r\nexport const generateCoalitionOfN = (event: number) => Array.from({ length: event }, (v, k) => k + 1)\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (positive: number, negative: number, value: number): number => {\r\n  return value * factorial(positive - 1) * factorial(negative) / factorial(positive + negative)\r\n}\r\nexport const calculateNegativePlayersMarginalContribution = (positive: number, negative: number, value: number): number => {\r\n  return -1 * value * (factorial(negative - 1) * factorial(positive)) / factorial(positive + negative)\r\n}\r\n\r\nexport const calculateMCNetsShapleyValues = (rules: IMCNetsRule[], nrOfPlayers: number) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0)\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length\r\n    const numberOfNegativePlayers = rule.negativePlayers.length\r\n    const positivePlayersContribution = calculatePositivePlayersMarginalContribution(numberOfPositivePlayers, numberOfNegativePlayers, rule.value)\r\n    const negativePlayersContribution = calculateNegativePlayersMarginalContribution(numberOfNegativePlayers, numberOfPositivePlayers, rule.value)\r\n\r\n    rule.positivePlayers.forEach(player => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution\r\n    })\r\n\r\n    rule.negativePlayers.forEach(player => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution\r\n    })\r\n  })\r\n  return values\r\n}","import { Table, InputNumber } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface ICoalitionStructuresInputProps {\r\n  coalitionsArray: number[][]\r\n  functionOfCoalitions: number[]\r\n  setFunctionOfCoalitions: React.Dispatch<React.SetStateAction<number[]>>\r\n}\r\n\r\nexport const CoalitionStructuresInput = (props: ICoalitionStructuresInputProps): JSX.Element => {\r\n  const { coalitionsArray, functionOfCoalitions, setFunctionOfCoalitions } = props\r\n  const dataSource = coalitionsArray?.map((coalition, index) => ({\r\n    key: index,\r\n    coalition: coalition.length ? coalition.toString() : 'Ø',\r\n    value: 0,\r\n  }))\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Coalition Structure',\r\n      dataIndex: 'coalition',\r\n      key: 'coalition',\r\n      align: 'right' as 'left' | 'right' | 'center',\r\n    },\r\n    {\r\n      title: 'Value',\r\n      dataIndex: 'value',\r\n      key: 'value',\r\n      render: (text: string, record: any) =>\r\n        <InputNumber\r\n          value={functionOfCoalitions[record.key]}\r\n          defaultValue={0}\r\n          onChange={(event: number) => {\r\n            const tmpFunction = [...functionOfCoalitions]\r\n            tmpFunction[record.key] = event\r\n            setFunctionOfCoalitions(tmpFunction)\r\n          }} />,\r\n      align: 'left' as 'left' | 'right' | 'center',\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"coalition-structures-input\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default CoalitionStructuresInput\r\n","\r\nimport { Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface IDisplayGeneratedValuesProps {\r\n  listShapleyValues: number[]\r\n  tableMaxHeight?: number\r\n}\r\n\r\nexport const DisplayGeneratedValues = (props: IDisplayGeneratedValuesProps): JSX.Element => {\r\n  const { listShapleyValues, tableMaxHeight } = props\r\n  const dataSource = listShapleyValues.map((shapleuValue, index) => {\r\n    return {\r\n      key: index,\r\n      value: shapleuValue,\r\n      playerNumber: index + 1\r\n    }\r\n  })\r\n\r\n  const columns = [{\r\n    title: 'Player number',\r\n    dataIndex: 'playerNumber',\r\n    key: 'playerNumber',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }, {\r\n    title: 'Player Shapley Value',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }]\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: tableMaxHeight ?? 300 }}\r\n      className=\"display-generated-values\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default DisplayGeneratedValues\r\n","import { Button, Col, Row } from 'antd';\r\nimport { useEffect, useState } from 'react';\r\nimport './calculator-coalition-structures.scss';\r\nimport { calculateAllShapleyValues, generateCoalitions, generateCoalitionOfN } from '../../../utilities/calculationg-functions';\r\nimport CoalitionStructuresInput from './coalition-structures-input';\r\nimport NumberOfPlayersForm from '../../shared/number-of-players-input';\r\nimport DisplayGeneratedValues from '../../shared/display-generated-values';\r\n\r\nexport const CalculatorCoalitionStructures = (): JSX.Element => {\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>([]);\r\n  const [coalitionsArray, setCoalitionsArray] = useState<number[][]>([]);\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const [shapleyValues, setShapleyValues] = useState<number[]>([])\r\n  const [functionOfCoalitions, setFunctionOfCoalitions] = useState<number[]>([])\r\n  const maxValue = 10\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < maxValue) {\r\n      setGrandCalition(generateCoalitionOfN(event))\r\n      setFunctionOfCoalitions(Array(2 ** event).fill(0))\r\n      setShapleyValues([])\r\n      setMessage(undefined)\r\n    } else setMessage('Number of coalition members exceded!')\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      setCoalitionsArray(generateCoalitions(grandCoalition))\r\n    }\r\n  }, [grandCoalition])\r\n\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-structures\">\r\n      <NumberOfPlayersForm\r\n        maxValue={maxValue}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      <Row justify=\"center\">\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <CoalitionStructuresInput\r\n            coalitionsArray={coalitionsArray}\r\n            functionOfCoalitions={functionOfCoalitions}\r\n            setFunctionOfCoalitions={setFunctionOfCoalitions}\r\n          />\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={4} xl={4}>\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={() => setShapleyValues(\r\n              calculateAllShapleyValues(grandCoalition, coalitionsArray, functionOfCoalitions)\r\n            )}>\r\n            Generate\r\n          </Button>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorCoalitionStructures;\r\n","import { PlusOutlined } from \"@ant-design/icons\"\r\nimport { Button, Col, Row } from \"antd\"\r\nimport { IMCNetsRule } from \"../calculator-mc-nets\"\r\nexport interface IAddMCNetsRuleProps {\r\n  rules: IMCNetsRule[]\r\n  setRules: React.Dispatch<React.SetStateAction<IMCNetsRule[]>>\r\n}\r\nexport const AddMCNetsRule = (props: IAddMCNetsRuleProps): JSX.Element => {\r\n  const { rules, setRules } = props\r\n\r\n  return (\r\n    <div className=\"add-mc-nets-rule\">\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col flex=\"64px\">          Add Rule</Col>\r\n        <Col flex=\"40px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() =>\r\n              setRules([...rules, {\r\n                positivePlayers: [],\r\n                negativePlayers: [],\r\n                value: 0\r\n              }])}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}","import { Checkbox } from \"antd\"\r\ninterface IPlayersGroupprops {\r\n  options: string[]\r\n  value: string[]\r\n  onChange: (checkedValues: any) => void\r\n}\r\nexport const PlayersGroup = (props: IPlayersGroupprops) => {\r\n  const { options, value, onChange } = props\r\n  return (\r\n    <div className=\"player-group\">\r\n      <Checkbox.Group options={options} value={value} onChange={onChange} style={{ width: `calc(${options.length} * 52px)` }} />\r\n    </div>\r\n  )\r\n}","import { MinusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, InputNumber, Row } from \"antd\"\r\nimport { generateCoalitionOfN } from \"../../../../utilities/calculationg-functions\";\r\nimport { IMCNetsRule } from \"../calculator-mc-nets\";\r\nimport { PlayersGroup } from \"./players-group\";\r\nimport './mc-nets-rule.scss'\r\nimport './player-group.scss'\r\nexport interface IMCNetsRuleProps {\r\n  index: number\r\n  nrPlayers: number\r\n  rules: IMCNetsRule[]\r\n  setRules: React.Dispatch<React.SetStateAction<IMCNetsRule[]>>\r\n}\r\nexport const MCNetsRule = (props: IMCNetsRuleProps): JSX.Element => {\r\n  const { index, nrPlayers, rules, setRules } = props\r\n  const onPositiveChange = (checkedValues: string[]) => {\r\n    const tmpRules = [...rules]\r\n    tmpRules[index].positivePlayers = checkedValues\r\n    tmpRules[index].negativePlayers = tmpRules[index].negativePlayers.filter(val => !checkedValues.includes(val));\r\n    setRules(tmpRules)\r\n  }\r\n  const onNegativeChange = (checkedValues: any) => {\r\n    const tmpRules = [...rules]\r\n    tmpRules[index].negativePlayers = checkedValues\r\n    tmpRules[index].positivePlayers = tmpRules[index].positivePlayers.filter(val => !checkedValues.includes(val));\r\n    setRules(tmpRules)\r\n  }\r\n\r\n  const plainOptions = generateCoalitionOfN(nrPlayers).map(String)\r\n  return (\r\n    <div className=\"mc-nets-rule\">\r\n      <Row align=\"middle\" wrap={false} justify=\"center\">\r\n        <Col flex=\"100px\" className=\"mc-nets-rule-name\">{`Rule nr ${index}`}\r\n          <InputNumber\r\n            placeholder=\"Value\"\r\n            onChange={(event) => {\r\n              const tmpRules = [...rules]\r\n              tmpRules[index].value = event as number\r\n              setRules(tmpRules)\r\n            }}\r\n            value={rules[index].value}\r\n          />\r\n        </Col>\r\n        <Col flex='auto' >\r\n          <div className=\"player-group-name\">Positive Players</div>\r\n          <PlayersGroup onChange={onPositiveChange} value={rules[index].positivePlayers} options={plainOptions} />\r\n        </Col>\r\n        <Col flex='auto' >\r\n          <div className=\"player-group-name\">Negative Players</div>\r\n          <PlayersGroup onChange={onNegativeChange} value={rules[index].negativePlayers} options={plainOptions} />\r\n        </Col>\r\n        <Col flex=\"32px\" >\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<MinusOutlined />}\r\n            onClick={() => {\r\n              const tmpRules = [...rules]\r\n              tmpRules.splice(index, 1)\r\n              setRules(tmpRules)\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}","import { Button, Col, Collapse, Row } from \"antd\"\r\nimport { useState } from \"react\"\r\nimport { calculateMCNetsShapleyValues } from \"../../../utilities/calculationg-functions\"\r\nimport DisplayGeneratedValues from \"../../shared/display-generated-values\"\r\nimport NumberOfPlayersForm from \"../../shared/number-of-players-input\"\r\nimport { AddMCNetsRule } from \"./add-mc-nets-rule/add-mc-nets-rule\"\r\nimport { MCNetsRule } from \"./mc-nets-rule/mc-nets-rule\"\r\nimport './calculator-mc-nets.scss'\r\nexport interface IMCNetsRule {\r\n  positivePlayers: string[]\r\n  negativePlayers: string[]\r\n  value: number\r\n}\r\nexport const CalculatorMCNets = (): JSX.Element => {\r\n  const [nrPlayers, setNrPlayers] = useState<number>(0)\r\n  const [rules, setRules] = useState<IMCNetsRule[]>([])\r\n  const [shapleyValues, setShapleyValues] = useState<number[]>([])\r\n  const handleNumberOfPlayesChange = (event: number) => setNrPlayers(event)\r\n  const [activeKeys, setActiveKeys] = useState<string[]>(['1', '2'])\r\n  return (\r\n    <div className=\"calculator-mc-nets\">\r\n      <Collapse activeKey={activeKeys} onChange={(keys) => setActiveKeys(keys as string[])}>\r\n        <Collapse.Panel header=\"Game Definition\" key=\"1\">\r\n          <Row justify=\"center\">\r\n            <Col span={12}>\r\n              <NumberOfPlayersForm\r\n                maxValue={20}\r\n                handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <AddMCNetsRule rules={rules} setRules={setRules} />\r\n            </Col>\r\n          </Row>\r\n\r\n          <div className=\"mc-nets-rules\">\r\n            {rules.map((rule, index) => {\r\n              return <MCNetsRule key={index} index={index} rules={rules} setRules={setRules} nrPlayers={nrPlayers} />\r\n            })}\r\n          </div>\r\n        </Collapse.Panel>\r\n\r\n        <Collapse.Panel showArrow={false} forceRender={true} header=\"\" key=\"2\" collapsible='disabled' className=\"generate-panel\">\r\n          <Row justify=\"center\" gutter={32}>\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={!nrPlayers}\r\n              className=\"generate-button\"\r\n              onClick={() => {\r\n                setShapleyValues(calculateMCNetsShapleyValues(rules, nrPlayers))\r\n                const tmpActiveKeys = activeKeys.includes('3') ? activeKeys : [...activeKeys, '3']\r\n                setActiveKeys(tmpActiveKeys)\r\n              }}>\r\n              Calculate\r\n            </Button></Row>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel header=\"Shapley Values\" key=\"3\" className=\"values-panel\">\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues} tableMaxHeight={200} />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  )\r\n}","import { Tabs } from 'antd';\r\nimport {\r\n  CalculatorFunctionDefinition,\r\n} from '../../../calculators/calculator-function-definition/calculator-function-definition';\r\nimport {\r\n  CalculatorCoalitionStructures,\r\n} from '../../../calculators/calculator-coalition-structures/calculator-coalition-structures';\r\nimport { CalculatorMCNets } from '../../../calculators/calculator-mc-nets/calculator-mc-nets';\r\n\r\nconst { TabPane } = Tabs\r\n\r\nexport const AppBody = (): JSX.Element => {\r\n\r\n  return (\r\n    <Tabs centered>\r\n      <TabPane tab=\"Coalition structures definition\" key=\"coalition\">\r\n        <CalculatorCoalitionStructures />\r\n      </TabPane >\r\n      <TabPane tab=\"Function generating values\" key=\"function\" disabled>\r\n        <CalculatorFunctionDefinition />\r\n      </TabPane >\r\n      <TabPane tab=\"MC-nets game representation\" key=\"mc-nets\">\r\n        <CalculatorMCNets />\r\n      </TabPane >\r\n    </Tabs>\r\n  )\r\n};\r\n\r\nexport default AppBody;\r\n","import './app-header.css';\r\n\r\nimport { PageHeader } from 'antd';\r\nimport React from 'react';\r\n\r\nexport const AppHeader = ():JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","export const  ActionTypes = {\r\n  SET_CONTENT_KEY: 'SET_CONTENT_KEY'\r\n}\r\n\r\nexport default ActionTypes","import ActionTypes from '../actionTypes';\r\n\r\nconst initialState = {\r\n  applicationKey: 'function'\r\n};\r\n\r\nexport const aplication = (state = initialState, action: { type: string, payload: string }): Aplication => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_CONTENT_KEY: \r\n      return {\r\n        ...state,\r\n        applicationKey: action.payload\r\n      }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default aplication\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport AppBody from '../components/layout/body/app-body/app-body';\r\nimport AppHeader from '../components/layout/header/app-header';\r\nimport store from '../redux/store';\r\n\r\nconst App = (): JSX.Element => {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n    <div className=\"app\">\r\n      <AppHeader/>\r\n      <AppBody/>\r\n    </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}