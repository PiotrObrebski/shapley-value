{"version":3,"sources":["redux/actionTypes.ts","redux/actions.ts","utilities/calculation-functions.ts","components/calculators/calculator-graph/config.tsx","components/calculators/game-exaples/examples.ts","components/calculators/game-exaples/input-element.tsx","components/calculators/game-exaples/game-examples.tsx","components/calculators/calculator-coalition-structures/coalition-structures-input.tsx","components/shared-components/number-of-players-input.tsx","components/shared-components/display-generated-values.tsx","components/calculators/calculator-coalition-structures/csv-input.tsx","components/calculators/calculator-coalition-structures/calculator-coalition-structures.tsx","components/calculators/calculator-mc-nets/add-mc-nets-rule/add-mc-nets-rule.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/player-group/players-group.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/mc-nets-rule.tsx","components/calculators/calculator-mc-nets/calculator-mc-nets.tsx","components/calculators/calculator-graph/graph-input-section.tsx","components/calculators/calculator-graph/graph.tsx","utilities/calculationg-functions.ts","components/calculators/calculator-graph/information-section.tsx","components/calculators/calculator-graph/calculator-graph.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","index.tsx"],"names":["ActionTypes","SET_COALITIONS_NUMBER_OF_PLAYERS","SET_COALITIONS_COALITIONS","SET_COALITIONS_FUNCTION_OF_COALITIONS","SET_COALITIONS_SHAPLEY_VALUES","SET_MCNETS_NUMBER_OF_PLAYERS","SET_MCNETS_RULES","SET_MCNETS_SHAPLEY_VALUES","SET_GRAPH_NUMBER_OF_PLAYERS","SET_GRAPH_EDGES","SET_GRAPH_NODES","SET_GRAPH_SHAPLEY_VALUES","setCoalitionsNumberOfplayers","nrOfPlayes","type","payload","setCoalitionsCoalitions","coalitions","setCoalitionsFunctionOfCoalitions","functionOfCoalitions","setMCNetsNumberOfPlayers","setMCNetsRules","rules","setGraphNumberOfPlayers","setGraphNodes","nodes","setGraphEdges","edges","setGraphShapleyValues","values","indexOfArrayInArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","generateCoalitions","arr","reduce","subsets","value","concat","map","set","sort","a","b","length","factorial","n","r","calculateAllShapleyValues","players","funcOfCoalitions","shapleyValues","player","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","generateCoalitionOfN","event","Array","from","v","k","calculateMCNetsShapleyValues","nrOfPlayers","fill","rule","positive","negative","numberOfPositivePlayers","positivePlayers","numberOfNegativePlayers","negativePlayers","positivePlayersContribution","negativePlayersContribution","calculateNegativePlayersMarginalContribution","parseFloat","calculateGraphShapleyValues","grandCoalition","edgesStructure","edge","source","split","at","target","handleText","generateCoalitionsFromEdges","generateMCNetsRulesFromCoalitions","newRules","String","filter","playerShape","viewBox","id","cx","cy","nodeConfig","EdgeTypes","normalEdge","shape","transform","x","y","width","height","shapeId","NodeSubtypes","NodeTypes","typeText","coalitionsExamples","Math","max","min","random","randn_bm","u","num","sqrt","log","cos","PI","generateXCoordinateOfCircle","copy","angle","generateYCoordinateOfCircle","sin","InputElement","props","label","setValue","className","layout","size","Item","labelAlign","onChange","e","GameExamples","connect","state","aplication","graph","dispatch","setActiveTabKey","useState","kVariable","setKVariable","setNrOfPlayers","loadMCNetsGame","chosenGame","example","coalitionExample","mcNetsExamples","loadGraphGame","flatMap","toString","title","graphExamples","columns","dataIndex","key","render","onClick","loadCoalitionStructureGame","disabled","justify","bordered","dataSource","description","pagination","showHeader","column","CoalitionStructuresInput","align","text","record","defaultValue","tmpFunction","scroll","NumberOfPlayersForm","numberOfPlayers","message","maxValue","handleNumberOfPlayesChange","labelCol","span","wrapperCol","DisplayGeneratedValues","listShapleyValues","tableMaxHeight","shapleuValue","playerNumber","CSVInput","accept","cssClass","cssInputClass","cssLabelClass","fileEncoding","inputId","inputName","inputStyle","inputRef","onError","onFileLoaded","parserOptions","strict","htmlFor","name","style","reader","FileReader","files","fileInfo","Error","onload","_event","csvData","PapaParse","result","Object","assign","error","encoding","data","readAsText","ref","CalculatorCoalitionStructures","setCoalitionsShapleyValues","setGrandCalition","undefined","setMessage","useRef","useEffect","newCoalitions","unshift","xs","sm","md","lg","xl","newFunctionOfCoalitions","row","pop","currentCoalition","slice","current","display","header","dynamicTyping","skipEmptyLines","gameDefinition","csvContent","join","window","open","encodeURI","margin","AddMCNetsRule","mcNets","flex","icon","PlusOutlined","PlayersGroup","options","Group","MCNetsRule","plainOptions","wrap","placeholder","tmpRules","checkedValues","val","MinusOutlined","CalculatorMCNets","setMCNetsShapleyValues","activeKeys","setActiveKeys","activeKey","keys","Panel","marginBottom","isDecrement","nrOfPlayersString","tmpActiveKeys","every","some","generateFunctionOfCoalitionsFromMCNets","marginLeft","_rule","GraphInputSection","valueForEdge","setValueForEdge","Graph","selected","setSelected","copied","setCopied","refElement","showGraphControls","gridSize","gridDotSize","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","onSelectNode","viewNode","onCreateNode","tmpNodes","newPlayerNr","nums","len","i","pos","abs","Infinity","firstMissingPositive","element","elementAfterSplit","onUpdateNode","searchNode","findIndex","node","onDeleteNode","_nodeId","nodeArr","newEdges","onSelectEdge","viewEdge","onCreateEdge","sourceViewNode","targetViewNode","viewEdgeRealSource","viewEdgeRealTarget","isConnectionDefined","edgeSourceRealTitle","edgeTargetRealTitle","isSourceCopy","isTargetCopy","isConnectionValid","shouldEdgeBeCreated","onSwapEdge","searchEdge","tmpEdges","JSON","parse","stringify","onDeleteEdge","_viewEdge","onCopySelected","console","warn","onPasteSelected","arrayOfCopies","newNode","readOnly","InformationSection","CalculatorGraph","content","trigger","generateMCNetsRulesFromEdges","generateFunctionOfCoalitionsFromEdges","TabPane","Tabs","AppBody","activeTabKey","onTabClick","centered","tab","AppHeader","subTitle","initialState","action","combineReducers","createStore","rootReducer","App","store","prototype","separator","this","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70df4fae.chunk.js","sourcesContent":["export const ActionTypes = {\r\n  SET_COALITIONS_NUMBER_OF_PLAYERS: \"SET_COALITIONS_NUMBER_OF_PLAYERS\",\r\n  SET_COALITIONS_COALITIONS: \"SET_COALITIONS_COALITIONS\",\r\n  SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n    \"SET_COALITIONS_FUNCTION_OF_COALITIONS\",\r\n  SET_COALITIONS_SHAPLEY_VALUES: \"SET_COALITIONS_SHAPLEY_VALUES\",\r\n  SET_MCNETS_NUMBER_OF_PLAYERS: \"SET_MCNETS_NUMBER_OF_PLAYERS\",\r\n  SET_MCNETS_RULES: \"SET_MCNETS_RULES\",\r\n  SET_MCNETS_SHAPLEY_VALUES: \"SET_MCNETS_SHAPLEY_VALUES\",\r\n  SET_GRAPH_NUMBER_OF_PLAYERS: \"SET_GRAPH_NUMBER_OF_PLAYERS\",\r\n  SET_GRAPH_EDGES: \"SET_GRAPH_EDGES\",\r\n  SET_GRAPH_NODES: \"SET_GRAPH_NODES\",\r\n  SET_GRAPH_SHAPLEY_VALUES: \"SET_GRAPH_SHAPLEY_VALUES\",\r\n};\r\n\r\nexport default ActionTypes;\r\n","import { IEdge, INode } from \"react-digraph\";\r\nimport { IMCNetsRule } from \"../type\";\r\nimport ActionTypes from \"./actionTypes\";\r\n\r\nexport const setCoalitionsNumberOfplayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setCoalitionsCoalitions = (\r\n  coalitions: number[][]\r\n): {\r\n  type: string;\r\n  payload: number[][];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_COALITIONS,\r\n  payload: coalitions,\r\n});\r\n\r\nexport const setCoalitionsFunctionOfCoalitions = (\r\n  functionOfCoalitions: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS,\r\n  payload: functionOfCoalitions,\r\n});\r\n\r\nexport const setCoalitionsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setMCNetsNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => {\r\n  return {\r\n    type: ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS,\r\n    payload: nrOfPlayes,\r\n  };\r\n};\r\n\r\nexport const setMCNetsRules = (\r\n  rules: IMCNetsRule[]\r\n): {\r\n  type: string;\r\n  payload: IMCNetsRule[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_RULES,\r\n  payload: rules,\r\n});\r\n\r\nexport const setMCNetsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setGraphNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setGraphNodes = (\r\n  nodes: INode[]\r\n): {\r\n  type: string;\r\n  payload: INode[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NODES,\r\n  payload: nodes,\r\n});\r\n\r\nexport const setGraphEdges = (\r\n  edges: IEdge[]\r\n): {\r\n  type: string;\r\n  payload: IEdge[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_EDGES,\r\n  payload: edges,\r\n});\r\n\r\nexport const setGraphShapleyValues = (\r\n  values: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_SHAPLEY_VALUES,\r\n  payload: values,\r\n});\r\n","import { IEdge } from \"react-digraph\";\r\nimport _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const separatorString = \"-copy-of-\";\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (arr: Array<number>) =>\r\n  arr\r\n    .reduce(\r\n      (subsets: number[][], value: number) =>\r\n        subsets.concat(subsets.map((set) => [...set, value])),\r\n      [[]]\r\n    )\r\n    .sort((a, b) => a.length - b.length);\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\nexport const randn_bm = (): number => {\r\n  let u = 0,\r\n    v = 0;\r\n  while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n  while (v === 0) v = Math.random();\r\n  let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n  num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n  if (num > 1 || num < 0) return randn_bm(); // resample between 0 and 1\r\n  return num;\r\n};\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ] ?? 0;\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - (valueOfCoalitionWithoutPlayer ?? 0)) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number): number[] =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values.map((value) => Number(value.toFixed(2)));\r\n};\r\n\r\nexport const generateCoalitionsFromEdges = (\r\n  edges: IEdge[]\r\n): Array<{ value: number; coalition: number[] }> => {\r\n  return edges.map((edge) => {\r\n    const source = parseFloat(edge.source.split(separatorString).at(-1) ?? \"\");\r\n    const target = parseFloat(edge.target.split(separatorString).at(-1) ?? \"\");\r\n    const value = parseFloat(edge.handleText ?? \"\");\r\n    return {\r\n      value,\r\n      coalition: source === target ? [source] : [source, target],\r\n    };\r\n  });\r\n};\r\n\r\nexport const calculateGraphShapleyValues = (\r\n  grandCoalition: number[],\r\n  edges: IEdge[]\r\n): number[] => {\r\n  const edgesStructure = generateCoalitionsFromEdges(edges);\r\n  return grandCoalition.map((player) => {\r\n    let value = 0;\r\n    edgesStructure.forEach((edge) => {\r\n      value += edge.coalition.includes(player)\r\n        ? edge.value / (edge.coalition.length === 2 ? 2 : 1)\r\n        : 0;\r\n    });\r\n    return value;\r\n  });\r\n};\r\n\r\nexport const generateMCNetsRulesFromEdges = (edges: IEdge[]): IMCNetsRule[] => {\r\n  return edges.map((edge) => {\r\n    const source = edge.source.split(separatorString).at(-1) ?? \"\";\r\n    const target = edge.target.split(separatorString).at(-1) ?? \"\";\r\n    const value = parseFloat(edge.handleText ?? \"\");\r\n    return {\r\n      value,\r\n      positivePlayers: source === target ? [source] : [source, target],\r\n      negativePlayers: [],\r\n    };\r\n  });\r\n};\r\n\r\nexport const generateCoalitionsCoalitionsFromEdges = (\r\n  edges: IEdge[]\r\n): number[][] => {\r\n  return edges.map((edge) => {\r\n    const source = parseFloat(edge.source.split(separatorString).at(-1) ?? \"\");\r\n    const target = parseFloat(edge.target.split(separatorString).at(-1) ?? \"\");\r\n    return source === target ? [source] : [source, target];\r\n  });\r\n};\r\n\r\nexport const generateFunctionOfCoalitionsFromEdges = (\r\n  coalitions: number[][],\r\n  edges: IEdge[]\r\n) =>\r\n  coalitions.map((coalition) => {\r\n    let value = 0;\r\n    edges?.forEach((edge) => {\r\n      const coalitionContainSourceAndTarget =\r\n        coalition.includes(\r\n          parseFloat(edge.source.elementAfterSplit(separatorString) ?? \"0\")\r\n        ) &&\r\n        coalition.includes(\r\n          parseFloat(edge.target.elementAfterSplit(separatorString) ?? \"0\")\r\n        );\r\n      if (coalitionContainSourceAndTarget) {\r\n        value += parseFloat(edge.handleText ?? \"0\");\r\n      }\r\n    });\r\n    return value;\r\n  });\r\n\r\nexport const generateFunctionOfCoalitionsFromMCNets = (\r\n  rules: IMCNetsRule[],\r\n  coalitions: number[][]\r\n): number[] => {\r\n  const functionOfCoalitions = Array(coalitions.length).fill(0);\r\n  coalitions.forEach((coalition) => {\r\n    rules.forEach((rule) => {\r\n      if (\r\n        rule.positivePlayers.every((player) =>\r\n          coalition.includes(parseFloat(player))\r\n        ) &&\r\n        !rule.negativePlayers.some((player) =>\r\n          coalition.includes(parseFloat(player))\r\n        )\r\n      ) {\r\n        functionOfCoalitions[indexOfArrayInArray(coalitions, coalition)] +=\r\n          rule.value;\r\n      }\r\n    });\r\n  });\r\n  return functionOfCoalitions;\r\n};\r\nexport const generateMCNetsRulesFromCoalitions = (\r\n  coalitions: number[][],\r\n  grandCoalition: number[],\r\n  functionOfCoalitions: number[]\r\n) => {\r\n  const newRules: IMCNetsRule[] = [];\r\n  functionOfCoalitions?.forEach((value, index) => {\r\n    if (value) {\r\n      newRules.push({\r\n        positivePlayers: coalitions?.[index]?.map(String) ?? [],\r\n        negativePlayers:\r\n          grandCoalition\r\n            .filter((player) => !coalitions?.[index]?.includes(player))\r\n            .map(String) ?? [],\r\n        value: value ?? 0,\r\n      });\r\n    }\r\n  });\r\n  return newRules;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const NODE_KEY = \"id\";\r\nexport const PLAYER_TYPE = \"player\";\r\nexport const NORMAL_EDGE = \"normalEdge\";\r\nexport const nodeTypes = [PLAYER_TYPE];\r\nexport const edgeTypes = [NORMAL_EDGE];\r\n\r\nconst playerShape = (\r\n  <symbol viewBox=\"0 0 200 200\" id=\"player\">\r\n    <circle cx=\"100\" cy=\"100\" r=\"50\" />\r\n  </symbol>\r\n);\r\n\r\nconst normalEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"normalEdge\">\r\n    <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nexport const nodeConfig = {\r\n  EdgeTypes: {\r\n    normalEdge: {\r\n      shape: normalEdgeShape,\r\n      shapeId: \"#normalEdge\",\r\n    },\r\n  },\r\n  NodeSubtypes: {},\r\n  NodeTypes: {\r\n    player: {\r\n      shape: playerShape,\r\n      shapeId: \"#player\",\r\n      typeText: \"Player\",\r\n    },\r\n  },\r\n};\r\n","import {\r\n  generateCoalitionOfN,\r\n  generateCoalitions,\r\n  generateMCNetsRulesFromCoalitions,\r\n  randn_bm,\r\n  separatorString,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport { PLAYER_TYPE } from \"../calculator-graph/config\";\r\n\r\nexport const coalitionsExamples = (nrOfPlayers: number, k: number) => {\r\n  const grandCoalition = generateCoalitionOfN(nrOfPlayers);\r\n  const coalitions = generateCoalitions(grandCoalition);\r\n  return [\r\n    {\r\n      nrOfPlayers,\r\n      coalitions,\r\n      functionOfCoalitions: coalitions.map((coalition) => k * coalition.length),\r\n    },\r\n    {\r\n      nrOfPlayers,\r\n      coalitions,\r\n      functionOfCoalitions: coalitions.map(\r\n        (coalition) => coalition.length ** k\r\n      ),\r\n    },\r\n    {\r\n      nrOfPlayers,\r\n      coalitions,\r\n      functionOfCoalitions: coalitions.map(\r\n        (coalition) => k * Math.max(...coalition)\r\n      ),\r\n    },\r\n    {\r\n      nrOfPlayers,\r\n      coalitions,\r\n      functionOfCoalitions: coalitions.map(\r\n        (coalition) => k * Math.min(...coalition)\r\n      ),\r\n    },\r\n    {\r\n      nrOfPlayers,\r\n      coalitions,\r\n      functionOfCoalitions: coalitions.map(\r\n        (coalition: number[]) =>\r\n          k *\r\n          parseFloat(\r\n            (function (arr) {\r\n              return arr.reduce((a, b) => a + b, 0) / arr.length;\r\n            })(coalition).toFixed(2)\r\n          )\r\n      ),\r\n    },\r\n    {\r\n      nrOfPlayers,\r\n      coalitions,\r\n      functionOfCoalitions: coalitions.map((coalition: number[]) =>\r\n        parseFloat((k * coalition.length * Math.random()).toFixed(2))\r\n      ),\r\n    },\r\n    {\r\n      nrOfPlayers,\r\n      coalitions,\r\n      functionOfCoalitions: coalitions.map((coalition: number[]) =>\r\n        parseFloat((k * coalition.length * randn_bm()).toFixed(2))\r\n      ),\r\n    },\r\n  ];\r\n};\r\n\r\nexport const mcNetsExamples = (nrOfPlayers: number, k: number) => {\r\n  const instanceCoalitionsExamples = coalitionsExamples(nrOfPlayers, k);\r\n  return instanceCoalitionsExamples.map((coalitionExample) => ({\r\n    nrOfPlayers,\r\n    rules: generateMCNetsRulesFromCoalitions(\r\n      coalitionExample.coalitions,\r\n      generateCoalitionOfN(nrOfPlayers),\r\n      coalitionExample.functionOfCoalitions\r\n    ),\r\n  }));\r\n};\r\nconst generateXCoordinateOfCircle = (\r\n  nrOfPlayers: number,\r\n  player: number,\r\n  copy?: boolean\r\n): number => {\r\n  const angle = (2 * Math.PI * player) / nrOfPlayers;\r\n\r\n  return Math.cos(angle) * (copy ? 400 : 300);\r\n};\r\nconst generateYCoordinateOfCircle = (\r\n  nrOfPlayers: number,\r\n  player: number,\r\n  copy?: boolean\r\n): number => {\r\n  const angle = (2 * Math.PI * player) / nrOfPlayers;\r\n  return Math.sin(angle) * (copy ? 400 : 300);\r\n};\r\nexport const graphExamples = (nrOfPlayers: number, k: number) => {\r\n  const grandCoalition = generateCoalitionOfN(nrOfPlayers);\r\n  return [\r\n    {\r\n      nrOfPlayers,\r\n      nodes: grandCoalition.flatMap((player) => [\r\n        {\r\n          id: player.toString(),\r\n          title: player.toString(),\r\n          type: PLAYER_TYPE,\r\n          x: generateXCoordinateOfCircle(nrOfPlayers, player),\r\n          y: generateYCoordinateOfCircle(nrOfPlayers, player),\r\n        },\r\n        {\r\n          id: `${(nrOfPlayers ?? 0) + 1}${separatorString}${player}`,\r\n          title: `${\"copied \"}${player}`,\r\n          type: PLAYER_TYPE,\r\n          x: generateXCoordinateOfCircle(nrOfPlayers, player, true),\r\n          y: generateYCoordinateOfCircle(nrOfPlayers, player, true),\r\n        },\r\n      ]),\r\n      edges:\r\n        grandCoalition.map((player) => ({\r\n          handleText: k.toString(),\r\n          source: player.toString(),\r\n          target: `${(nrOfPlayers ?? 0) + 1}${separatorString}${player}`,\r\n          type: \"normalEdge\",\r\n        })) ?? [],\r\n    },\r\n  ];\r\n};\r\n","import React from \"react\";\r\nimport { Form, InputNumber } from \"antd\";\r\n\r\ninterface IInputElementProps {\r\n  value: number;\r\n  setValue: React.Dispatch<React.SetStateAction<number>>;\r\n  label?: string;\r\n}\r\nexport const InputElement = (props: IInputElementProps) => {\r\n  const { label, value, setValue } = props;\r\n  return (\r\n    <div className=\"input-section\">\r\n      <Form layout=\"horizontal\" size=\"middle\" className=\"number-input\">\r\n        <Form.Item labelAlign=\"right\" label={label ?? \"Edge value\"}>\r\n          <InputNumber value={value} onChange={(e) => setValue(e)} />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputElement;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Row, Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setGraphEdges,\r\n  setGraphNodes,\r\n  setGraphNumberOfPlayers,\r\n  setGraphShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, IMCNetsRule, Store } from \"../../../type\";\r\nimport { connect } from \"react-redux\";\r\nimport { coalitionsExamples, graphExamples, mcNetsExamples } from \"./examples\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\nimport { IEdge, INode } from \"react-digraph\";\r\nimport \"./game-examples.scss\";\r\nimport InputElement from \"./input-element\";\r\ninterface IGameExamplesProps {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setGraphNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setGraphNodes: (nodes: INode[]) => void;\r\n  setGraphEdges: (edges: IEdge[]) => void;\r\n}\r\n\r\nexport const GameExamplesNotConnected = (\r\n  props: IGameExamplesProps\r\n): JSX.Element => {\r\n  const {\r\n    setActiveTabKey,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n    setGraphNumberOfPlayers,\r\n    setGraphEdges,\r\n    setGraphNodes,\r\n  } = props;\r\n  const [kVariable, setKVariable] = useState(1);\r\n  const [nrOfPlayers, setNrOfPlayers] = useState(1);\r\n  const loadCoalitionStructureGame = (chosenGame: number) => {\r\n    const example = coalitionsExamples(nrOfPlayers, kVariable)[chosenGame];\r\n    setCoalitionsNumberOfplayers(example.nrOfPlayers);\r\n    setCoalitionsCoalitions(example.coalitions);\r\n    setCoalitionsFunctionOfCoalitions(example.functionOfCoalitions);\r\n    setActiveTabKey(\"coalition\");\r\n  };\r\n  const loadMCNetsGame = (chosenGame: number) => {\r\n    const example = mcNetsExamples(nrOfPlayers, kVariable)[chosenGame];\r\n    setMCNetsNumberOfPlayers(example.nrOfPlayers);\r\n    setMCNetsRules(example.rules);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n  const loadGraphGame = (chosenGame: number) => {\r\n    const example = graphExamples(nrOfPlayers, kVariable)[chosenGame];\r\n    setGraphNumberOfPlayers(example.nrOfPlayers);\r\n    setGraphNodes(example.nodes);\r\n    setGraphEdges(example.edges);\r\n    setActiveTabKey(\"graph\");\r\n  };\r\n  const dataSource = [\r\n    {\r\n      description: \"f(C) = k*|C|\",\r\n      example: 0,\r\n    },\r\n    {\r\n      description: \"f(C) = |C|^k\",\r\n      example: 1,\r\n    },\r\n    {\r\n      description: \"f(C) = k*max(i in C)\",\r\n      example: 2,\r\n    },\r\n    {\r\n      description: \"f(C) = k*min(i in C)\",\r\n      example: 3,\r\n    },\r\n    {\r\n      description: \"f(C) = k*avg(i in C)\",\r\n      example: 4,\r\n    },\r\n    {\r\n      description: \"f(C) = k*|C|*uniform(0,1)\",\r\n      example: 5,\r\n    },\r\n    {\r\n      description: \"f(C) = k*|C|*normal(0,1)\",\r\n      example: 6,\r\n    },\r\n  ];\r\n  const columns = [\r\n    {\r\n      title: \"Game description\",\r\n      dataIndex: \"description\",\r\n      key: \"description\",\r\n    },\r\n    {\r\n      title: \"Run example\",\r\n      dataIndex: \"example\",\r\n      key: \"example\",\r\n      width: 280,\r\n      render: (example: number) => (\r\n        <div>\r\n          <Button\r\n            size=\"small\"\r\n            onClick={() => loadCoalitionStructureGame(example)}\r\n          >\r\n            Coalition Structures\r\n          </Button>\r\n          <Button size=\"small\" onClick={() => loadMCNetsGame(example)}>\r\n            MC-Nets\r\n          </Button>\r\n          <Button\r\n            disabled={!!example}\r\n            size=\"small\"\r\n            onClick={() => loadGraphGame(example)}\r\n          >\r\n            Graph\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <div className=\"game-examples\">\r\n      <Row justify=\"space-around\">\r\n        <InputElement\r\n          label=\"k value\"\r\n          value={kVariable}\r\n          setValue={setKVariable}\r\n        />\r\n        <InputElement\r\n          label=\"nr of Players\"\r\n          value={nrOfPlayers}\r\n          setValue={setNrOfPlayers}\r\n        />\r\n      </Row>\r\n      <Table\r\n        bordered={true}\r\n        size=\"small\"\r\n        dataSource={dataSource}\r\n        pagination={false}\r\n        className=\"game-examples-table\"\r\n        showHeader\r\n      >\r\n        {columns.map((column) => (\r\n          <Column {...column} />\r\n        ))}\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayers, edges, shapleyValues } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayers,\r\n    edges,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[] | IEdge[] | INode[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setGraphShapleyValues: (values: number[]) =>\r\n      dispatch(setGraphShapleyValues(values)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n    setGraphNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setGraphNumberOfPlayers(nrOfPlayes)),\r\n    setGraphEdges: (edges: IEdge[]) => dispatch(setGraphEdges(edges)),\r\n    setGraphNodes: (nodes: INode[]) => dispatch(setGraphNodes(nodes)),\r\n  };\r\n};\r\n\r\nexport const GameExamples = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GameExamplesNotConnected);\r\n\r\nexport default GameExamples;\r\n","import React from \"react\";\r\nimport { Table, InputNumber } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCoalitionsFunctionOfCoalitions } from \"../../../redux/actions\";\r\nimport { Store } from \"../../../type\";\r\n\r\nexport interface ICoalitionStructuresInputProps {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => void;\r\n}\r\n\r\nexport const CoalitionStructuresInputNotConnected = (\r\n  props: ICoalitionStructuresInputProps\r\n): JSX.Element => {\r\n  const {\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const dataSource = coalitions?.map((coalition, index) => ({\r\n    key: index,\r\n    coalition: coalition.length ? coalition.toString() : \"Ø\",\r\n    value: 0,\r\n  }));\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Coalition\",\r\n      dataIndex: \"coalition\",\r\n      key: \"coalition\",\r\n      align: \"right\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (text: string, record: any) => (\r\n        <InputNumber\r\n          value={functionOfCoalitions?.[record.key]}\r\n          defaultValue={0}\r\n          disabled={!record.key}\r\n          onChange={(event: number) => {\r\n            const tmpFunction = functionOfCoalitions\r\n              ? [...functionOfCoalitions]\r\n              : [];\r\n            tmpFunction[record.key] = event;\r\n            setCoalitionsFunctionOfCoalitions(tmpFunction);\r\n          }}\r\n        />\r\n      ),\r\n      align: \"left\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"coalition-structures-input\"\r\n    >\r\n      {columns.map((column) => (\r\n        <Column {...column} />\r\n      ))}\r\n    </Table>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: {\r\n  aplication: Store;\r\n}): {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n} => {\r\n  return {\r\n    coalitions: state.aplication.coalitions?.coalitions,\r\n    functionOfCoalitions: state.aplication.coalitions?.functionOfCoalitions,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number[] }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CoalitionStructuresInput = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CoalitionStructuresInputNotConnected);\r\nexport default CoalitionStructuresInput;\r\n","import React from 'react'\r\nimport { Form, InputNumber } from \"antd\"\r\nexport interface INumberOfPlayersForm {\r\n  numberOfPlayers?: number\r\n  message?: string\r\n  maxValue: number\r\n  handleNumberOfPlayesChange?: (event: number) => void\r\n}\r\nexport const NumberOfPlayersForm = (props: INumberOfPlayersForm): JSX.Element => {\r\n  const { numberOfPlayers, message, maxValue, handleNumberOfPlayesChange } = props\r\n  return <Form\r\n    labelCol={{ span: 12 }}\r\n    wrapperCol={{ span: 12 }}\r\n    layout=\"horizontal\"\r\n    size=\"middle\"\r\n    className=\"number-of-players-input\"\r\n  >\r\n    <div className=\"error-message\">{message}</div>\r\n    <Form.Item labelAlign=\"right\" label=\"Number of players\">\r\n      <InputNumber\r\n        min={0}\r\n        max={maxValue - 1}\r\n        defaultValue={0}\r\n        value={numberOfPlayers}\r\n        onChange={handleNumberOfPlayesChange}\r\n      />\r\n    </Form.Item>\r\n  </Form>\r\n}\r\n\r\nexport default NumberOfPlayersForm","import React from 'react'\r\nimport { Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface IDisplayGeneratedValuesProps {\r\n  listShapleyValues: number[]\r\n  tableMaxHeight?: number\r\n}\r\n\r\nexport const DisplayGeneratedValues = (props: IDisplayGeneratedValuesProps): JSX.Element => {\r\n  const { listShapleyValues, tableMaxHeight } = props\r\n  const dataSource = listShapleyValues.map((shapleuValue, index) => {\r\n    return {\r\n      key: index,\r\n      value: shapleuValue,\r\n      playerNumber: index + 1\r\n    }\r\n  })\r\n\r\n  const columns = [{\r\n    title: 'Player number',\r\n    dataIndex: 'playerNumber',\r\n    key: 'playerNumber',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }, {\r\n    title: 'Player Shapley Value',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }]\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: tableMaxHeight ?? 300 }}\r\n      className=\"display-generated-values\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default DisplayGeneratedValues\r\n","import * as React from 'react'\r\nimport * as PapaParse from 'papaparse'\r\n\r\nexport interface IFileInfo {\r\n  name: string\r\n  size: number\r\n  type: string\r\n}\r\n\r\nexport interface CSVInputProps {\r\n  accept?: string\r\n  cssClass?: string\r\n  cssInputClass?: string\r\n  cssLabelClass?: string\r\n  fileEncoding?: string\r\n  inputId?: string\r\n  inputName?: string\r\n  inputStyle?: object\r\n  inputRef?: React.LegacyRef<HTMLInputElement>\r\n  label?: string | React.ReactNode\r\n  onError?: (error: Error) => void\r\n  onFileLoaded: (data: Array<any>, fileInfo: IFileInfo, originalFile?: File) => any\r\n  parserOptions?: PapaParse.ParseConfig\r\n  disabled?: boolean\r\n  strict?: boolean\r\n}\r\n\r\nconst CSVInput: React.FC<CSVInputProps> = ({\r\n  accept = '.csv, text/csv',\r\n  cssClass = 'csv-reader-input',\r\n  cssInputClass = 'csv-input',\r\n  cssLabelClass = 'csv-label',\r\n  fileEncoding = 'UTF-8',\r\n  inputId = 'react-csv-reader-input',\r\n  inputName = 'react-csv-reader-input',\r\n  inputStyle = {},\r\n  inputRef,\r\n  label,\r\n  onError = () => {},\r\n  onFileLoaded,\r\n  parserOptions = {} as PapaParse.ParseConfig,\r\n  disabled = false,\r\n  strict = false,\r\n}) => {\r\n  const handleChangeFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let reader: FileReader = new FileReader()\r\n    const files: FileList = e.target.files!\r\n\r\n    if (files.length > 0) {\r\n      const fileInfo: IFileInfo = {\r\n        name: files[0].name,\r\n        size: files[0].size,\r\n        type: files[0].type,\r\n      }\r\n\r\n      if (strict && accept.indexOf(fileInfo.type) <= 0) {\r\n        onError(new Error(`[strict mode] Accept type not respected: got '${fileInfo.type}' but not in '${accept}'`))\r\n        return\r\n      }\r\n\r\n      reader.onload = (_event: Event) => {\r\n        const csvData = PapaParse.parse(\r\n          reader.result as string,\r\n          Object.assign(parserOptions, {\r\n            error: onError,\r\n            encoding: fileEncoding,\r\n          }),\r\n        )\r\n        onFileLoaded(csvData?.data ?? [], fileInfo, files[0])\r\n      }\r\n\r\n      reader.readAsText(files[0], fileEncoding)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cssClass}>\r\n      {label && (\r\n        <label className={cssLabelClass} htmlFor={inputId}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <input\r\n        className={cssInputClass}\r\n        type=\"file\"\r\n        id={inputId}\r\n        name={inputName}\r\n        style={inputStyle}\r\n        accept={accept}\r\n        onChange={handleChangeFile}\r\n        disabled={disabled}\r\n        ref={inputRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CSVInput\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Button, Col, Row } from \"antd\";\r\nimport \"./calculator-coalition-structures.scss\";\r\nimport {\r\n  calculateAllShapleyValues,\r\n  generateCoalitions,\r\n  generateCoalitionOfN,\r\n  generateMCNetsRulesFromCoalitions,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport CoalitionStructuresInput from \"./coalition-structures-input\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setCoalitionsShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\nimport { CoalitionsGame, IMCNetsRule, Store } from \"../../../type\";\r\nimport CSVInput from \"./csv-input\";\r\n\r\ninterface ICalculatorCoalitionStructuresProps extends CoalitionsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setCoalitionsShapleyValues: (content: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  };\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nconst CalculatorCoalitionStructuresNotConnected = (\r\n  props: ICalculatorCoalitionStructuresProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n    setCoalitionsShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n  } = props;\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>(\r\n    nrOfPlayes ? generateCoalitionOfN(nrOfPlayes) : []\r\n  );\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const maxValue = 10;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < maxValue) {\r\n      setCoalitionsNumberOfplayers(event);\r\n      setGrandCalition(generateCoalitionOfN(event));\r\n      setCoalitionsFunctionOfCoalitions(Array(2 ** event).fill(0));\r\n      setCoalitionsShapleyValues([]);\r\n      setMessage(undefined);\r\n    } else setMessage(\"Number of coalition members exceded!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      const newCoalitions = generateCoalitions(grandCoalition);\r\n      newCoalitions[0].unshift(0);\r\n      setCoalitionsCoalitions(newCoalitions);\r\n    }\r\n  }, [grandCoalition, setCoalitionsCoalitions]);\r\n\r\n  useEffect(() => {\r\n    setGrandCalition(generateCoalitionOfN(nrOfPlayes ?? 0));\r\n  }, [nrOfPlayes]);\r\n\r\n  const handleForce = (data: any) => {\r\n    const newCoalitions: number[][] = [];\r\n    const newFunctionOfCoalitions: number[] = [];\r\n    let numberOfPlayers = 0;\r\n\r\n    data.forEach((row: number[]) => {\r\n      row.pop();\r\n      const currentCoalition = row.slice(0, -1);\r\n      numberOfPlayers =\r\n        currentCoalition.length > numberOfPlayers\r\n          ? currentCoalition.length\r\n          : numberOfPlayers;\r\n      newCoalitions.push(currentCoalition);\r\n      newFunctionOfCoalitions.push(row.slice(-1).pop() ?? 0);\r\n    });\r\n\r\n    setCoalitionsNumberOfplayers(numberOfPlayers);\r\n    setCoalitionsCoalitions(newCoalitions);\r\n    setCoalitionsFunctionOfCoalitions(newFunctionOfCoalitions);\r\n    if (inputRef.current) {\r\n      inputRef.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  const handleDownloadGameDefinition = () => {\r\n    const gameDefinition: number[][] = coalitions?.map((coalition, index) => {\r\n      return [...coalition, functionOfCoalitions?.[index] ?? 0];\r\n    }) ?? [[0]];\r\n    // gameDefinition[0].unshift(0);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,\" +\r\n      gameDefinition?.map((e) => e.join(\",\") + \",\").join(\"\\n\");\r\n\r\n    window.open(encodeURI(csvContent));\r\n  };\r\n\r\n  const translateToMCNets = () => {\r\n    setMCNetsNumberOfPlayers(grandCoalition.length);\r\n    setMCNetsRules(\r\n      generateMCNetsRulesFromCoalitions(\r\n        coalitions ?? [[]],\r\n        grandCoalition,\r\n        functionOfCoalitions ?? []\r\n      )\r\n    );\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-structures\">\r\n      <NumberOfPlayersForm\r\n        numberOfPlayers={nrOfPlayes}\r\n        maxValue={maxValue}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      <Row justify=\"center\">\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <CoalitionStructuresInput />\r\n          <div className=\"upload\">\r\n            <CSVInput\r\n              cssClass=\"react-csv-input\"\r\n              label={\r\n                <div className=\"ant-btn ant-btn-default\">\r\n                  <span>Upload game definition from .csv file</span>{\" \"}\r\n                </div>\r\n              }\r\n              onFileLoaded={handleForce}\r\n              inputStyle={{ display: \"none\" }}\r\n              inputName=\"input2\"\r\n              inputRef={inputRef}\r\n              parserOptions={{\r\n                header: false,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"download\">\r\n            <Button onClick={handleDownloadGameDefinition}>\r\n              Download Game Definition\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n        <Col className=\"buttons-col\" xs={24} sm={24} md={24} lg={4} xl={4}>\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={!nrOfPlayes}\r\n            style={{ margin: \"8px\" }}\r\n            className=\"generate-button\"\r\n            onClick={() =>\r\n              setCoalitionsShapleyValues(\r\n                calculateAllShapleyValues(\r\n                  grandCoalition,\r\n                  coalitions ?? [],\r\n                  functionOfCoalitions ?? []\r\n                )\r\n              )\r\n            }\r\n          >\r\n            Generate Shapley Values\r\n          </Button>\r\n          <Button\r\n            disabled={!nrOfPlayes}\r\n            className=\"generate-button\"\r\n            onClick={translateToMCNets}\r\n          >\r\n            Translate to MC Nets\r\n          </Button>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): CoalitionsGame => {\r\n  const { nrOfPlayes, coalitions, functionOfCoalitions, shapleyValues } =\r\n    state.aplication.coalitions || {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    coalitions: coalitions,\r\n    functionOfCoalitions: functionOfCoalitions,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n    setCoalitionsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setCoalitionsShapleyValues(shapleyValues)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n  };\r\n};\r\nexport const CalculatorCoalitionStructures = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorCoalitionStructuresNotConnected);\r\nexport default CalculatorCoalitionStructures;\r\n","import React from \"react\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { IMCNetsRule, McNetsGame, Store } from \"../../../../type\";\r\n\r\nexport interface IAddMCNetsRuleProps {\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\n\r\nexport const AddMCNetsRuleNotConnected = (\r\n  props: IAddMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { rules, setMCNetsRules } = props;\r\n\r\n  return (\r\n    <div className=\"add-mc-nets-rule\">\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col flex=\"64px\">Add Rule</Col>\r\n        <Col flex=\"40px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() =>\r\n              setMCNetsRules([\r\n                ...(rules ?? []),\r\n                {\r\n                  positivePlayers: [],\r\n                  negativePlayers: [],\r\n                  value: 0,\r\n                },\r\n              ])\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  return {\r\n    rules: state.aplication.mcNets?.rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const AddMCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddMCNetsRuleNotConnected);\r\n\r\nexport default AddMCNetsRule;\r\n","import React from 'react'\r\nimport { Checkbox } from \"antd\"\r\nimport './player-group.css'\r\n\r\ninterface IPlayersGroupprops {\r\n  options: string[]\r\n  value: string[]\r\n  onChange: (checkedValues: any) => void\r\n}\r\n\r\nexport const PlayersGroup = (props: IPlayersGroupprops) => {\r\n  const { options, value, onChange } = props\r\n  return (\r\n    <div className=\"player-group\">\r\n      <Checkbox.Group options={options} value={value} onChange={onChange} style={{ width: `calc(${options.length} * 52px)` }} />\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { MinusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, InputNumber, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { generateCoalitionOfN } from \"../../../../utilities/calculation-functions\";\r\nimport { PlayersGroup } from \"./player-group/players-group\";\r\nimport { Store, IMCNetsRule, McNetsGame } from \"../../../../type\";\r\nexport interface IMCNetsRuleProps {\r\n  index: number;\r\n  nrOfPlayes?: number;\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\nexport const MCNetsRuleNotConnected = (\r\n  props: IMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { index, nrOfPlayes, rules, setMCNetsRules } = props;\r\n  const onPositiveChange = (checkedValues: string[]) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].positivePlayers = checkedValues;\r\n    tmpRules[index].negativePlayers = tmpRules[index].negativePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n  const onNegativeChange = (checkedValues: any) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].negativePlayers = checkedValues;\r\n    tmpRules[index].positivePlayers = tmpRules[index].positivePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n\r\n  const plainOptions = generateCoalitionOfN(nrOfPlayes ?? 0).map(String);\r\n\r\n  return (\r\n    <div className=\"mc-nets-rule\">\r\n      <Row wrap={false} justify=\"center\">\r\n        <Col flex=\"100px\" className=\"mc-nets-rule-name\">\r\n          {`Rule nr ${index}`}\r\n          <InputNumber\r\n            placeholder=\"Value\"\r\n            onChange={(event) => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules[index].value = event as number;\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n            value={rules?.[index].value}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <PlayersGroup\r\n            onChange={onPositiveChange}\r\n            value={rules?.[index].positivePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <PlayersGroup\r\n            onChange={onNegativeChange}\r\n            value={rules?.[index].negativePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"48px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<MinusOutlined />}\r\n            style={{ margin: \"0 8px\" }}\r\n            onClick={() => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules.splice(index, 1);\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const MCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MCNetsRuleNotConnected);\r\n\r\nexport default MCNetsRule;\r\n","import { Button, Col, Collapse, Row } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  calculateMCNetsShapleyValues,\r\n  generateCoalitionOfN,\r\n  generateCoalitions,\r\n  generateFunctionOfCoalitionsFromMCNets,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport { AddMCNetsRule } from \"./add-mc-nets-rule/add-mc-nets-rule\";\r\nimport { MCNetsRule } from \"./mc-nets-rule/mc-nets-rule\";\r\nimport \"./calculator-mc-nets.scss\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n  setMCNetsShapleyValues,\r\n} from \"../../../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Store, McNetsGame, IMCNetsRule } from \"../../../type\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\n\r\ninterface ICalculatorMCNetsProps extends McNetsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nexport const CalculatorMCNetsNotConnected = (\r\n  props: ICalculatorMCNetsProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsShapleyValues,\r\n    setMCNetsRules,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    const isDecrement = event < (nrOfPlayes ?? 0);\r\n    setMCNetsNumberOfPlayers(event);\r\n    setMCNetsShapleyValues([]);\r\n    if (isDecrement) {\r\n      setMCNetsRules(\r\n        rules?.map((rule) => {\r\n          const { value, positivePlayers, negativePlayers } = rule;\r\n          const nrOfPlayersString = (nrOfPlayes ?? 0).toString();\r\n          return {\r\n            value,\r\n            positivePlayers: positivePlayers.filter(\r\n              (player) => player !== nrOfPlayersString\r\n            ),\r\n            negativePlayers: negativePlayers.filter(\r\n              (player) => player !== nrOfPlayersString\r\n            ),\r\n          };\r\n        }) ?? []\r\n      );\r\n    }\r\n  };\r\n\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\"]);\r\n  const translateMCNetsToCoalitions = () => {\r\n    const coalitions = generateCoalitions(\r\n      generateCoalitionOfN(nrOfPlayes ?? 0)\r\n    );\r\n    setCoalitionsNumberOfplayers(nrOfPlayes ?? 0);\r\n    setCoalitionsCoalitions(coalitions);\r\n    setCoalitionsFunctionOfCoalitions(\r\n      generateFunctionOfCoalitionsFromMCNets(rules ?? [], coalitions)\r\n    );\r\n    setActiveTabKey(\"coalition\");\r\n  };\r\n  return (\r\n    <div className=\"calculator-mc-nets\">\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Game Definition\" key=\"1\">\r\n          <Row justify=\"center\" style={{ marginBottom: \"16px\" }}>\r\n            <Col span={6}>\r\n              <NumberOfPlayersForm\r\n                maxValue={20}\r\n                numberOfPlayers={nrOfPlayes}\r\n                handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <Row justify=\"center\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  disabled={!nrOfPlayes}\r\n                  className=\"generate-button\"\r\n                  onClick={() => {\r\n                    setMCNetsShapleyValues(\r\n                      calculateMCNetsShapleyValues(rules ?? [], nrOfPlayes ?? 0)\r\n                    );\r\n                    const tmpActiveKeys = activeKeys.includes(\"2\")\r\n                      ? activeKeys\r\n                      : [...activeKeys, \"2\"];\r\n                    setActiveKeys(tmpActiveKeys);\r\n                  }}\r\n                >\r\n                  Generate Shapley Values\r\n                </Button>\r\n                <Button\r\n                  disabled={!nrOfPlayes && (nrOfPlayes ?? 0) < 10}\r\n                  className=\"generate-button\"\r\n                  onClick={translateMCNetsToCoalitions}\r\n                  style={{ marginLeft: \"8px\" }}\r\n                >\r\n                  Translate to Characteristic function\r\n                </Button>\r\n              </Row>\r\n            </Col>\r\n            <Col span={6}>\r\n              <AddMCNetsRule />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"mc-nets-rules\">\r\n            {rules?.length ? (\r\n              <Row align=\"middle\" wrap={false} justify=\"center\">\r\n                <Col flex=\"100px\" className=\"mc-nets-rule-name\"></Col>\r\n\r\n                <Col flex=\"auto\">\r\n                  <div className=\"player-group-name\">Positive Players</div>\r\n                </Col>\r\n                <Col flex=\"auto\">\r\n                  <div className=\"player-group-name\">Negative Players</div>\r\n                </Col>\r\n              </Row>\r\n            ) : null}\r\n            {rules?.map((_rule, index) => {\r\n              return <MCNetsRule key={index} index={index} />;\r\n            })}\r\n          </div>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"Shapley Values\"\r\n          key=\"2\"\r\n          className=\"values-panel\"\r\n        >\r\n          <DisplayGeneratedValues\r\n            listShapleyValues={shapleyValues ?? []}\r\n            tableMaxHeight={200}\r\n          />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules, shapleyValues } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setMCNetsShapleyValues(shapleyValues)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CalculatorMCNets = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorMCNetsNotConnected);\r\n\r\nexport default CalculatorMCNets;\r\n","import React from \"react\";\r\nimport { Form, InputNumber } from \"antd\";\r\ninterface IGraphInputSectionProps {\r\n  valueForEdge: number;\r\n  setValueForEdge: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\nexport const GraphInputSection = (props: IGraphInputSectionProps) => {\r\n  const { valueForEdge, setValueForEdge } = props;\r\n  return (\r\n    <div className=\"graph-input-section\">\r\n      <Form\r\n        layout=\"horizontal\"\r\n        size=\"middle\"\r\n        className=\"number-of-players-input\"\r\n      >\r\n        <Form.Item labelAlign=\"right\" label=\"Edge value\">\r\n          <InputNumber\r\n            value={valueForEdge}\r\n            onChange={(e) => setValueForEdge(e)}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component, useRef, useState } from \"react\";\r\nimport { firstMissingPositive } from \"../../../utilities/calculationg-functions\";\r\nimport { GraphView, IEdge, IGraphViewProps, INode } from \"react-digraph\";\r\nimport { nodeConfig, PLAYER_TYPE, NODE_KEY, NORMAL_EDGE } from \"./config\";\r\nimport {\r\n  setGraphNumberOfPlayers,\r\n  setGraphNodes,\r\n  setGraphEdges,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, Store } from \"../../../type\";\r\nimport { connect } from \"react-redux\";\r\nimport { GraphInputSection } from \"./graph-input-section\";\r\nimport { separatorString } from \"../../../utilities/calculation-functions\";\r\n\r\ninterface IGraphProps extends GraphGame {\r\n  setGraphNumberOfPlayers: (nrOfPlayers: number) => void;\r\n  setGraphNodes: (nodes: INode[]) => void;\r\n  setGraphEdges: (edges: IEdge[]) => void;\r\n}\r\n\r\nexport const GraphNotConnected = (props: IGraphProps) => {\r\n  const {\r\n    nrOfPlayers,\r\n    edges,\r\n    nodes,\r\n    setGraphNumberOfPlayers,\r\n    setGraphEdges,\r\n    setGraphNodes,\r\n  } = props;\r\n  const copyString = \"copied \";\r\n  const [valueForEdge, setValueForEdge] = useState(0);\r\n  const [selected, setSelected] = useState<IEdge | INode | null>(null);\r\n  const [copied, setCopied] = useState<IEdge | INode | null>(null);\r\n  const refElement = useRef<Component<IGraphViewProps>>(null);\r\n\r\n  const getNodeIndex = (searchNode: { [x: string]: string }): number => {\r\n    return nodes\r\n      ? nodes.findIndex((node) => {\r\n          return node[NODE_KEY] === searchNode[NODE_KEY];\r\n        })\r\n      : -1;\r\n  };\r\n\r\n  const getEdgeIndex = (searchEdge: {\r\n    source: string | number;\r\n    target: string | number;\r\n  }): number => {\r\n    return edges\r\n      ? edges.findIndex((edge) => {\r\n          return (\r\n            edge.source === searchEdge.source &&\r\n            edge.target === searchEdge.target\r\n          );\r\n        })\r\n      : -1;\r\n  };\r\n\r\n  const onUpdateNode = (viewNode: INode): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const i = getNodeIndex(viewNode);\r\n    tmpNodes[i] = viewNode;\r\n    setGraphNodes(tmpNodes ?? []);\r\n  };\r\n\r\n  const onSelectNode = (viewNode: INode | null): void => {\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onSelectEdge = (viewEdge: IEdge): void => {\r\n    setSelected(viewEdge);\r\n  };\r\n\r\n  const onCreateNode = (x: number, y: number): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const playersNumbers = tmpNodes\r\n      .map((element) => element.title.elementAfterSplit(copyString))\r\n      .filter(String)\r\n      .map(Number);\r\n    const newPlayerNr = firstMissingPositive(playersNumbers);\r\n    const viewNode = {\r\n      id: `${newPlayerNr}`,\r\n      title: `${newPlayerNr}`,\r\n      type: PLAYER_TYPE,\r\n      x,\r\n      y,\r\n    };\r\n    tmpNodes.push(viewNode);\r\n    setGraphNumberOfPlayers(newPlayerNr);\r\n    setGraphNodes(tmpNodes);\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onDeleteNode = (\r\n    viewNode: INode,\r\n    _nodeId: number | string,\r\n    nodeArr: INode[]\r\n  ): void => {\r\n    const newEdges = edges?.filter((edge, i) => {\r\n      return (\r\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\r\n      );\r\n    });\r\n    if (!viewNode.title.includes(copyString)) {\r\n      setGraphNumberOfPlayers(nrOfPlayers ? nrOfPlayers - 1 : 0);\r\n    }\r\n    setGraphNodes(nodeArr);\r\n    setGraphEdges(newEdges ?? []);\r\n    setSelected(null);\r\n  };\r\n\r\n  const shouldEdgeBeCreated = (viewEdge: IEdge): boolean => {\r\n    const viewEdgeRealSource =\r\n      viewEdge.source?.elementAfterSplit(separatorString);\r\n    const viewEdgeRealTarget =\r\n      viewEdge.target?.elementAfterSplit(separatorString);\r\n\r\n    const isConnectionDefined = edges?.some((edge) => {\r\n      const edgeSourceRealTitle =\r\n        edge?.source?.elementAfterSplit(separatorString);\r\n      const edgeTargetRealTitle =\r\n        edge?.target?.elementAfterSplit(separatorString);\r\n\r\n      if (\r\n        viewEdgeRealSource === edgeSourceRealTitle &&\r\n        viewEdgeRealTarget === edgeTargetRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      if (\r\n        viewEdgeRealSource === edgeTargetRealTitle &&\r\n        viewEdgeRealTarget === edgeSourceRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n    const isSourceCopy = viewEdge.source.includes(separatorString);\r\n    const isTargetCopy = viewEdge.target.includes(separatorString);\r\n    const isTargetOriginal = viewEdgeRealTarget === viewEdgeRealSource;\r\n    const isConnectionValid = !(isSourceCopy && !isTargetOriginal);\r\n    return (\r\n      //is the same\r\n      viewEdge.source !== viewEdge.target &&\r\n      //is already defined\r\n      !isConnectionDefined &&\r\n      // apply to game rules\r\n      isConnectionValid &&\r\n      !isTargetCopy\r\n    );\r\n  };\r\n\r\n  const onCreateEdge = (sourceViewNode: INode, targetViewNode: INode): void => {\r\n    const viewEdge: IEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      handleText: valueForEdge.toString(),\r\n      type: NORMAL_EDGE,\r\n    };\r\n    if (shouldEdgeBeCreated(viewEdge)) {\r\n      setGraphEdges([...(edges ?? []), viewEdge]);\r\n      setSelected(viewEdge);\r\n    }\r\n  };\r\n\r\n  const onSwapEdge = (\r\n    sourceViewNode: INode,\r\n    targetViewNode: INode,\r\n    viewEdge: IEdge\r\n  ): void => {\r\n    const tmpEdges = edges ?? [];\r\n    const i = getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(tmpEdges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    tmpEdges[i] = edge;\r\n    setGraphEdges([...tmpEdges]);\r\n    setSelected(edge);\r\n  };\r\n\r\n  const onDeleteEdge = (_viewEdge: IEdge, edges: IEdge[]): void => {\r\n    setGraphEdges(edges);\r\n    setSelected(null);\r\n  };\r\n\r\n  const onCopySelected = (): void => {\r\n    if (selected?.source) {\r\n      console.warn(\"Cannot copy selected edges, try selecting a node instead.\");\r\n      return;\r\n    }\r\n    if (selected) {\r\n      const x = (selected.x + 20).toString();\r\n      const y = (selected.y + 20).toString();\r\n      setCopied({ ...selected, x, y });\r\n    }\r\n  };\r\n\r\n  const onPasteSelected = (): void | null => {\r\n    if (copied) {\r\n      const arrayOfCopies = nodes?.filter((node) => {\r\n        return (\r\n          node.title.elementAfterSplit(copyString) ===\r\n          copied.title.elementAfterSplit(copyString)\r\n        );\r\n      });\r\n\r\n      if (arrayOfCopies && arrayOfCopies.length >= 2) {\r\n        console.warn(\"Node already have a copy\");\r\n        return null;\r\n      }\r\n\r\n      const tmpNodes = nodes;\r\n      const newNode = {\r\n        ...copied,\r\n        id: `${(nrOfPlayers ?? 0) + 1}${separatorString}${copied.id}`,\r\n        title: `${copyString}${copied.title}`,\r\n      };\r\n      setGraphNodes([...(tmpNodes ?? []), newNode]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <GraphInputSection\r\n        valueForEdge={valueForEdge}\r\n        setValueForEdge={setValueForEdge}\r\n      />\r\n      <GraphView\r\n        showGraphControls={true}\r\n        gridSize={12000}\r\n        gridDotSize={1}\r\n        ref={refElement}\r\n        nodeKey={NODE_KEY}\r\n        nodes={nodes ?? []}\r\n        edges={edges ?? []}\r\n        selected={selected}\r\n        nodeTypes={nodeConfig.NodeTypes}\r\n        nodeSubtypes={nodeConfig.NodeSubtypes}\r\n        edgeTypes={nodeConfig.NodeTypes}\r\n        onSelectNode={onSelectNode}\r\n        onCreateNode={onCreateNode}\r\n        onUpdateNode={onUpdateNode}\r\n        onDeleteNode={onDeleteNode}\r\n        onSelectEdge={onSelectEdge}\r\n        onCreateEdge={onCreateEdge}\r\n        onSwapEdge={onSwapEdge}\r\n        onDeleteEdge={onDeleteEdge}\r\n        onCopySelected={onCopySelected}\r\n        onPasteSelected={onPasteSelected}\r\n        readOnly={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayers, edges, nodes } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayers,\r\n    edges,\r\n    nodes,\r\n  };\r\n};\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number | IEdge[] | INode[] }) => any\r\n) => {\r\n  return {\r\n    setGraphNumberOfPlayers: (nrOfPlayers: number) =>\r\n      dispatch(setGraphNumberOfPlayers(nrOfPlayers)),\r\n    setGraphEdges: (edges: IEdge[]) => dispatch(setGraphEdges(edges)),\r\n    setGraphNodes: (nodes: INode[]) => dispatch(setGraphNodes(nodes)),\r\n  };\r\n};\r\n\r\nexport const Graph = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GraphNotConnected);\r\n\r\nexport default Graph;\r\n","import _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (inp: Array<number>) => {\r\n  const length = inp.length;\r\n  const allCoalitions = [];\r\n\r\n  for (let i = 0; i < Math.pow(2, length); i++) {\r\n    const subset = [];\r\n\r\n    for (var j = 0; j < length; j++) {\r\n      if (i & (1 << j)) {\r\n        subset.push(inp[j]);\r\n      }\r\n    }\r\n    allCoalitions.push(subset);\r\n  }\r\n\r\n  return allCoalitions;\r\n};\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ];\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - valueOfCoalitionWithoutPlayer) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number) =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\nexport const firstMissingPositive = (nums: number[]) => {\r\n  let len = nums.length;\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] < 0) nums[i] = 0;\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    let pos = Math.abs(nums[i]) - 1;\r\n    if (pos >= 0 && pos <= len) {\r\n      if (nums[pos] > 0) nums[pos] = -nums[pos];\r\n      if (nums[pos] === 0) nums[pos] = -Infinity;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] >= 0) return i + 1;\r\n  }\r\n\r\n  return len + 1;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const InformationSection = () => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>To add player, hold shift and click on the grid.</li>\r\n        <li>\r\n          To add edge with value, change the value on the 'Edge value' input,\r\n          then hold shift and click/drag to between players.\r\n        </li>\r\n        <li>To delete a node or edge, click on it and press delete.</li>\r\n        <li>Click and drag nodes to change their position.</li>\r\n        <li>\r\n          To create self edges copy and paste with (Ctrl+C and Ctrl+V) a player\r\n          and create an edge between original and copy.\r\n        </li>\r\n        <li>Note: On Mac computers, use Cmd instead of Ctrl.</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, Collapse, Popover, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setGraphShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, IMCNetsRule, Store } from \"../../../type\";\r\nimport {\r\n  calculateGraphShapleyValues,\r\n  generateCoalitionOfN,\r\n  generateCoalitions,\r\n  generateFunctionOfCoalitionsFromEdges,\r\n  generateMCNetsRulesFromEdges,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport Graph from \"./graph\";\r\nimport { InformationSection } from \"./information-section\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport \"./calculator-graph.scss\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\ninterface ICalculatorGraphProps extends GraphGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setGraphShapleyValues: (values: number[]) => void;\r\n  setMCNetsNumberOfPlayers: (nrOfPlayers: number) => void;\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayers: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nexport const CalculatorGraphNotConnected = (props: ICalculatorGraphProps) => {\r\n  const {\r\n    nrOfPlayers,\r\n    edges,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setGraphShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\"]);\r\n  const translateGraphToMCNets = () => {\r\n    setMCNetsRules(generateMCNetsRulesFromEdges(edges ?? []));\r\n    setMCNetsNumberOfPlayers(nrOfPlayers ?? 0);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n  const translateGraphToCoalitions = () => {\r\n    const coalitions = generateCoalitions(\r\n      generateCoalitionOfN(nrOfPlayers ?? 0)\r\n    );\r\n    setCoalitionsNumberOfplayers(nrOfPlayers ?? 0);\r\n    setCoalitionsCoalitions(coalitions);\r\n    setCoalitionsFunctionOfCoalitions(\r\n      generateFunctionOfCoalitionsFromEdges(coalitions, edges ?? [])\r\n    );\r\n    setActiveTabKey(\"coalition\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-graph\">\r\n      <Row justify=\"space-around\" style={{ marginBottom: \"16px\" }}>\r\n        <Popover\r\n          content={<InformationSection />}\r\n          title=\"Description\"\r\n          trigger=\"hover\"\r\n        >\r\n          <Button>How to use</Button>\r\n        </Popover>\r\n        <Button\r\n          type=\"primary\"\r\n          disabled={!edges?.length}\r\n          className=\"generate-button\"\r\n          onClick={() => {\r\n            setActiveKeys([\"2\"]);\r\n            setGraphShapleyValues(\r\n              calculateGraphShapleyValues(\r\n                generateCoalitionOfN(nrOfPlayers ?? 0),\r\n                edges ?? []\r\n              )\r\n            );\r\n          }}\r\n        >\r\n          Generate Shapley Values\r\n        </Button>\r\n        <Button\r\n          disabled={!edges?.length}\r\n          className=\"generate-button\"\r\n          onClick={translateGraphToMCNets}\r\n        >\r\n          Translate to MC Nets\r\n        </Button>\r\n        <Button\r\n          disabled={!edges?.length || (nrOfPlayers ?? 0) > 10}\r\n          className=\"generate-button\"\r\n          onClick={translateGraphToCoalitions}\r\n        >\r\n          Translate to Characteristic function\r\n        </Button>\r\n      </Row>\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Graph Game Definition\" key=\"1\">\r\n          <Graph />\r\n        </Collapse.Panel>\r\n        <Collapse.Panel header=\"Calculated Shapley Values\" key=\"2\">\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayers, edges, shapleyValues } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayers,\r\n    edges,\r\n    shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setGraphShapleyValues: (values: number[]) =>\r\n      dispatch(setGraphShapleyValues(values)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayers: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayers)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setCoalitionsNumberOfplayers: (nrOfPlayers: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayers)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\n\r\nexport const CalculatorGraph = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorGraphNotConnected);\r\n\r\nexport default CalculatorGraph;\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport GameExamples from \"../../../calculators/game-exaples/game-examples\";\r\nimport { CalculatorCoalitionStructures } from \"../../../calculators/calculator-coalition-structures/calculator-coalition-structures\";\r\nimport { CalculatorMCNets } from \"../../../calculators/calculator-mc-nets/calculator-mc-nets\";\r\nimport { CalculatorGraph } from \"../../../calculators/calculator-graph/calculator-graph\";\r\n\r\nconst { TabPane } = Tabs;\r\nexport type TabsKeys = \"coalition\" | \"example\" | \"mc-nets\" | \"graph\";\r\nexport const AppBody = (): JSX.Element => {\r\n  const [activeTabKey, setActiveTabKey] = useState<TabsKeys>(\"coalition\");\r\n  return (\r\n    <Tabs\r\n      activeKey={activeTabKey}\r\n      onTabClick={(key: string) => setActiveTabKey(key as TabsKeys)}\r\n      centered\r\n    >\r\n      <TabPane tab=\"Characteristic function\" key=\"coalition\">\r\n        <CalculatorCoalitionStructures setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"Function generating values\" key=\"example\">\r\n        <GameExamples setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"MC-nets game representation\" key=\"mc-nets\">\r\n        <CalculatorMCNets setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"Graph game representation\" key=\"graph\">\r\n        <CalculatorGraph setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default AppBody;\r\n","import React from 'react'\r\nimport { PageHeader } from 'antd';\r\nimport './app-header.css';\r\n\r\nexport const AppHeader = (): JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","import { PLAYER_TYPE } from \"../../components/calculators/calculator-graph/config\";\r\nimport { Store } from \"../../type\";\r\nimport ActionTypes from \"../actionTypes\";\r\n\r\nconst initialState: Store = {\r\n  graph: {\r\n    nrOfPlayers: 1,\r\n    nodes: [\r\n      {\r\n        id: \"1\",\r\n        title: \"1\",\r\n        type: PLAYER_TYPE,\r\n        x: 300,\r\n        y: 300,\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nexport const aplication = (\r\n  state = initialState,\r\n  action: { type: any; payload: any }\r\n): Store => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          coalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          functionOfCoalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_RULES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          rules: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nrOfPlayers: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_EDGES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          edges: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_NODES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nodes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default aplication;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react'\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport AppBody from \"../components/layout/body/app-body/app-body\";\r\nimport AppHeader from \"../components/layout/header/app-header\";\r\nimport store from \"../redux/store\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"app\">\r\n        <AppHeader />\r\n        <AppBody />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./app/App\";\r\n\r\nString.prototype.elementAfterSplit = function (\r\n  separator: string\r\n): string | undefined {\r\n  return this.split(separator).at(-1);\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}