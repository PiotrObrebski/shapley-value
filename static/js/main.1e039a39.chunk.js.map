{"version":3,"sources":["components/calculators/calculator-function-definition/calculator-function-definition.tsx","utilities/calculation-functions.ts","redux/actionTypes.ts","redux/actions.ts","components/calculators/calculator-coalition-structures/coalition-structures-input.tsx","components/shared-components/number-of-players-input.tsx","components/shared-components/display-generated-values.tsx","components/calculators/calculator-coalition-structures/calculator-coalition-structures.tsx","components/calculators/calculator-mc-nets/add-mc-nets-rule/add-mc-nets-rule.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/player-group/players-group.tsx","components/calculators/calculator-mc-nets/mc-nets-rule/mc-nets-rule.tsx","components/calculators/calculator-mc-nets/calculator-mc-nets.tsx","components/calculators/calculator-graph/config.tsx","components/calculators/calculator-graph/graph.tsx","utilities/calculationg-functions.ts","components/calculators/calculator-graph/graph-input-section.tsx","components/calculators/calculator-graph/information-section.tsx","components/calculators/calculator-graph/calculator-graph.tsx","components/layout/body/app-body/app-body.tsx","components/layout/header/app-header.tsx","redux/reducers/aplication.ts","redux/reducers/index.ts","redux/store.ts","app/App.tsx","index.tsx"],"names":["CalculatorFunctionDefinition","className","indexOfArrayInArray","arrayOfArrays","arrayToFind","indexOfArray","forEach","array","index","_","isEqual","factorial","n","r","calculateAllShapleyValues","players","coalitions","funcOfCoalitions","shapleyValues","player","playerShapleyValue","shapleyValue","coalition","includes","valueOfCoalitionWithPlayer","coalitionWithoutPlayer","splice","indexOf","valueOfCoalitionWithoutPlayer","numberOfPermutationsC","length","contrCount","Number","toFixed","coalitionsGenerateShapleyValue","push","generateCoalitionOfN","event","Array","from","v","k","calculateMCNetsShapleyValues","rules","nrOfPlayers","values","fill","rule","positive","negative","numberOfPositivePlayers","positivePlayers","numberOfNegativePlayers","negativePlayers","positivePlayersContribution","value","negativePlayersContribution","calculateNegativePlayersMarginalContribution","parseFloat","ActionTypes","SET_COALITIONS_NUMBER_OF_PLAYERS","SET_COALITIONS_COALITIONS","SET_COALITIONS_FUNCTION_OF_COALITIONS","SET_COALITIONS_SHAPLEY_VALUES","SET_MCNETS_NUMBER_OF_PLAYERS","SET_MCNETS_RULES","SET_MCNETS_SHAPLEY_VALUES","SET_GRAPH_NUMBER_OF_PLAYERS","SET_GRAPH_EDGES","SET_GRAPH_NODES","SET_GRAPH_SHAPLEY_VALUES","setCoalitionsFunctionOfCoalitions","functionOfCoalitions","type","payload","setMCNetsNumberOfPlayers","nrOfPlayes","setMCNetsRules","CoalitionStructuresInput","connect","state","aplication","dispatch","props","dataSource","map","key","toString","columns","title","dataIndex","align","render","text","record","defaultValue","onChange","tmpFunction","bordered","size","pagination","scroll","y","column","NumberOfPlayersForm","numberOfPlayers","message","maxValue","handleNumberOfPlayesChange","labelCol","span","wrapperCol","layout","Item","labelAlign","label","min","max","DisplayGeneratedValues","listShapleyValues","tableMaxHeight","shapleuValue","playerNumber","CalculatorCoalitionStructures","setCoalitionsNumberOfplayers","setCoalitionsCoalitions","setCoalitionsShapleyValues","setActiveTabKey","useState","grandCoalition","setGrandCalition","undefined","setMessage","useEffect","newCoalitions","reduce","subsets","concat","set","sort","a","b","unshift","justify","xs","sm","md","lg","xl","cssClass","onFileLoaded","data","newFunctionOfCoalitions","row","pop","currentCoalition","slice","inputName","parserOptions","header","dynamicTyping","skipEmptyLines","onClick","gameDefinition","csvContent","e","join","window","open","encodeURI","disabled","newRules","newNumberOfPlayers","highestPlayerInCoalition","Math","String","AddMCNetsRule","mcNets","flex","shape","icon","PlusOutlined","PlayersGroup","options","Group","style","width","MCNetsRule","plainOptions","wrap","placeholder","tmpRules","checkedValues","filter","val","MinusOutlined","CalculatorMCNets","setMCNetsShapleyValues","activeKeys","setActiveKeys","activeKey","keys","Panel","_rule","showArrow","forceRender","collapsible","gutter","tmpActiveKeys","playerShape","viewBox","id","cx","cy","height","nodeConfig","EdgeTypes","normalEdge","transform","x","shapeId","NodeSubtypes","NodeTypes","typeText","Graph","graph","edges","nodes","setGraphNumberOfPlayers","setGraphEdges","setGraphNodes","valueForEdge","selected","setSelected","copied","setCopied","playersId","setPlayersId","refElement","useRef","showGraphControls","gridSize","gridDotSize","ref","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","onSelectNode","viewNode","onCreateNode","tmpNodes","newPlayerNr","nums","len","i","pos","abs","Infinity","firstMissingPositive","element","split","at","onUpdateNode","searchNode","findIndex","node","onDeleteNode","_nodeId","nodeArr","newEdges","edge","source","target","onSelectEdge","viewEdge","onCreateEdge","sourceViewNode","targetViewNode","handleText","viewEdgeRealSource","viewEdgeRealTarget","isConnectionDefined","some","edgeSourceRealTitle","edgeTargetRealTitle","isConnectionValid","shouldEdgeBeCreated","onSwapEdge","searchEdge","tmpEdges","JSON","parse","stringify","onDeleteEdge","_viewEdge","onCopySelected","console","warn","onPasteSelected","arrayOfCopies","newNode","readOnly","GraphInputSection","setValueForEdge","InformationSection","CalculatorGraph","TabPane","Tabs","AppBody","activeTabKey","onTabClick","centered","tab","AppHeader","subTitle","initialState","action","combineReducers","createStore","rootReducer","App","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e039a39.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const CalculatorFunctionDefinition = (): JSX.Element => {\r\n  return <div className=\"calculator-coalition-definition\"></div>;\r\n};\r\n\r\nexport default CalculatorFunctionDefinition;\r\n","import _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (arr: Array<number>) =>\r\n  arr\r\n    .reduce(\r\n      (subsets: number[][], value: number) =>\r\n        subsets.concat(subsets.map((set) => [...set, value])),\r\n      [[]]\r\n    )\r\n    .sort((a, b) => a.length - b.length);\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ] ?? 0;\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - (valueOfCoalitionWithoutPlayer ?? 0)) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number) =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\n","export const ActionTypes = {\r\n  SET_COALITIONS_NUMBER_OF_PLAYERS: \"SET_COALITIONS_NUMBER_OF_PLAYERS\",\r\n  SET_COALITIONS_COALITIONS: \"SET_COALITIONS_COALITIONS\",\r\n  SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n    \"SET_COALITIONS_FUNCTION_OF_COALITIONS\",\r\n  SET_COALITIONS_SHAPLEY_VALUES: \"SET_COALITIONS_SHAPLEY_VALUES\",\r\n  SET_MCNETS_NUMBER_OF_PLAYERS: \"SET_MCNETS_NUMBER_OF_PLAYERS\",\r\n  SET_MCNETS_RULES: \"SET_MCNETS_RULES\",\r\n  SET_MCNETS_SHAPLEY_VALUES: \"SET_MCNETS_SHAPLEY_VALUES\",\r\n  SET_GRAPH_NUMBER_OF_PLAYERS: \"SET_GRAPH_NUMBER_OF_PLAYERS\",\r\n  SET_GRAPH_EDGES: \"SET_GRAPH_EDGES\",\r\n  SET_GRAPH_NODES: \"SET_GRAPH_NODES\",\r\n  SET_GRAPH_SHAPLEY_VALUES: \"SET_GRAPH_SHAPLEY_VALUES\",\r\n};\r\n\r\nexport default ActionTypes;\r\n","import { IEdge, INode } from \"react-digraph\";\r\nimport { IMCNetsRule } from \"../type\";\r\nimport ActionTypes from \"./actionTypes\";\r\n\r\nexport const setCoalitionsNumberOfplayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setCoalitionsCoalitions = (\r\n  coalitions: number[][]\r\n): {\r\n  type: string;\r\n  payload: number[][];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_COALITIONS,\r\n  payload: coalitions,\r\n});\r\n\r\nexport const setCoalitionsFunctionOfCoalitions = (\r\n  functionOfCoalitions: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS,\r\n  payload: functionOfCoalitions,\r\n});\r\n\r\nexport const setCoalitionsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_COALITIONS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setMCNetsNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => {\r\n  return {\r\n    type: ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS,\r\n    payload: nrOfPlayes,\r\n  };\r\n};\r\n\r\nexport const setMCNetsRules = (\r\n  rules: IMCNetsRule[]\r\n): {\r\n  type: string;\r\n  payload: IMCNetsRule[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_RULES,\r\n  payload: rules,\r\n});\r\n\r\nexport const setMCNetsShapleyValues = (\r\n  shapleyValues: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_MCNETS_SHAPLEY_VALUES,\r\n  payload: shapleyValues,\r\n});\r\n\r\nexport const setGraphNumberOfPlayers = (\r\n  nrOfPlayes: number\r\n): {\r\n  type: string;\r\n  payload: number;\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS,\r\n  payload: nrOfPlayes,\r\n});\r\n\r\nexport const setGraphNodes = (\r\n  nodes: INode[]\r\n): {\r\n  type: string;\r\n  payload: INode[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_NODES,\r\n  payload: nodes,\r\n});\r\n\r\nexport const setGraphEdges = (\r\n  edges: IEdge[]\r\n): {\r\n  type: string;\r\n  payload: IEdge[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_EDGES,\r\n  payload: edges,\r\n});\r\n\r\nexport const setGraphShapleyValues = (\r\n  values: number[]\r\n): {\r\n  type: string;\r\n  payload: number[];\r\n} => ({\r\n  type: ActionTypes.SET_GRAPH_SHAPLEY_VALUES,\r\n  payload: values,\r\n});\r\n","import React from \"react\";\r\nimport { Table, InputNumber } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCoalitionsFunctionOfCoalitions } from \"../../../redux/actions\";\r\nimport { Store } from \"../../../type\";\r\n\r\nexport interface ICoalitionStructuresInputProps {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => void;\r\n}\r\n\r\nexport const CoalitionStructuresInputNotConnected = (\r\n  props: ICoalitionStructuresInputProps\r\n): JSX.Element => {\r\n  const {\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n  } = props;\r\n  const dataSource = coalitions?.map((coalition, index) => ({\r\n    key: index,\r\n    coalition: coalition.length ? coalition.toString() : \"Ø\",\r\n    value: 0,\r\n  }));\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Coalition\",\r\n      dataIndex: \"coalition\",\r\n      key: \"coalition\",\r\n      align: \"right\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (text: string, record: any) => (\r\n        <InputNumber\r\n          value={functionOfCoalitions?.[record.key]}\r\n          defaultValue={0}\r\n          onChange={(event: number) => {\r\n            const tmpFunction = functionOfCoalitions\r\n              ? [...functionOfCoalitions]\r\n              : [];\r\n            tmpFunction[record.key] = event;\r\n            setCoalitionsFunctionOfCoalitions(tmpFunction);\r\n          }}\r\n        />\r\n      ),\r\n      align: \"left\" as \"left\" | \"right\" | \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: 300 }}\r\n      className=\"coalition-structures-input\"\r\n    >\r\n      {columns.map((column) => (\r\n        <Column {...column} />\r\n      ))}\r\n    </Table>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: {\r\n  aplication: Store;\r\n}): {\r\n  coalitions?: number[][];\r\n  functionOfCoalitions?: number[];\r\n} => {\r\n  return {\r\n    coalitions: state.aplication.coalitions?.coalitions,\r\n    functionOfCoalitions: state.aplication.coalitions?.functionOfCoalitions,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number[] }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n  };\r\n};\r\nexport const CoalitionStructuresInput = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CoalitionStructuresInputNotConnected);\r\nexport default CoalitionStructuresInput;\r\n","import React from 'react'\r\nimport { Form, InputNumber } from \"antd\"\r\nexport interface INumberOfPlayersForm {\r\n  numberOfPlayers?: number\r\n  message?: string\r\n  maxValue: number\r\n  handleNumberOfPlayesChange?: (event: number) => void\r\n}\r\nexport const NumberOfPlayersForm = (props: INumberOfPlayersForm): JSX.Element => {\r\n  const { numberOfPlayers, message, maxValue, handleNumberOfPlayesChange } = props\r\n  return <Form\r\n    labelCol={{ span: 12 }}\r\n    wrapperCol={{ span: 12 }}\r\n    layout=\"horizontal\"\r\n    size=\"middle\"\r\n    className=\"number-of-players-input\"\r\n  >\r\n    <div className=\"error-message\">{message}</div>\r\n    <Form.Item labelAlign=\"right\" label=\"Number of players\">\r\n      <InputNumber\r\n        min={0}\r\n        max={maxValue - 1}\r\n        defaultValue={0}\r\n        value={numberOfPlayers}\r\n        onChange={handleNumberOfPlayesChange}\r\n      />\r\n    </Form.Item>\r\n  </Form>\r\n}\r\n\r\nexport default NumberOfPlayersForm","import React from 'react'\r\nimport { Table } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\n\r\nexport interface IDisplayGeneratedValuesProps {\r\n  listShapleyValues: number[]\r\n  tableMaxHeight?: number\r\n}\r\n\r\nexport const DisplayGeneratedValues = (props: IDisplayGeneratedValuesProps): JSX.Element => {\r\n  const { listShapleyValues, tableMaxHeight } = props\r\n  const dataSource = listShapleyValues.map((shapleuValue, index) => {\r\n    return {\r\n      key: index,\r\n      value: shapleuValue,\r\n      playerNumber: index + 1\r\n    }\r\n  })\r\n\r\n  const columns = [{\r\n    title: 'Player number',\r\n    dataIndex: 'playerNumber',\r\n    key: 'playerNumber',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }, {\r\n    title: 'Player Shapley Value',\r\n    dataIndex: 'value',\r\n    key: 'value',\r\n    align: 'center' as 'left' | 'right' | 'center',\r\n  }]\r\n\r\n  return (\r\n    <Table\r\n      bordered={true}\r\n      size=\"small\"\r\n      dataSource={dataSource}\r\n      pagination={false}\r\n      scroll={{ y: tableMaxHeight ?? 300 }}\r\n      className=\"display-generated-values\"\r\n    >\r\n      {columns.map((column) => <Column {...column} />)}\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default DisplayGeneratedValues\r\n","import { Button, Col, Row } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./calculator-coalition-structures.css\";\r\nimport {\r\n  calculateAllShapleyValues,\r\n  generateCoalitions,\r\n  generateCoalitionOfN,\r\n} from \"../../../utilities/calculation-functions\";\r\nimport CoalitionStructuresInput from \"./coalition-structures-input\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCoalitionsCoalitions,\r\n  setCoalitionsFunctionOfCoalitions,\r\n  setCoalitionsNumberOfplayers,\r\n  setCoalitionsShapleyValues,\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsRules,\r\n} from \"../../../redux/actions\";\r\nimport { TabsKeys } from \"../../layout/body/app-body/app-body\";\r\nimport { CoalitionsGame, IMCNetsRule, Store } from \"../../../type\";\r\n\r\ninterface ICalculatorCoalitionStructuresProps extends CoalitionsGame {\r\n  setActiveTabKey: React.Dispatch<React.SetStateAction<TabsKeys>>;\r\n  setCoalitionsNumberOfplayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number;\r\n  };\r\n  setCoalitionsCoalitions: (coalitions: number[][]) => {\r\n    type: string;\r\n    payload: number[][];\r\n  };\r\n  setCoalitionsFunctionOfCoalitions: (values: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setCoalitionsShapleyValues: (content: number[]) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => {\r\n    type: string;\r\n    payload: IMCNetsRule[];\r\n  };\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => {\r\n    type: string;\r\n    payload: number[];\r\n  };\r\n}\r\n\r\nconst CalculatorCoalitionStructuresNotConnected = (\r\n  props: ICalculatorCoalitionStructuresProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    coalitions,\r\n    functionOfCoalitions,\r\n    shapleyValues,\r\n    setActiveTabKey,\r\n    setCoalitionsNumberOfplayers,\r\n    setCoalitionsCoalitions,\r\n    setCoalitionsFunctionOfCoalitions,\r\n    setCoalitionsShapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsRules,\r\n  } = props;\r\n  const [grandCoalition, setGrandCalition] = useState<number[]>(\r\n    nrOfPlayes ? generateCoalitionOfN(nrOfPlayes) : []\r\n  );\r\n  const [message, setMessage] = useState<string | undefined>(undefined);\r\n  const maxValue = 10;\r\n  const handleNumberOfPlayesChange = (event: number) => {\r\n    if (event < maxValue) {\r\n      setCoalitionsNumberOfplayers(event);\r\n      setGrandCalition(generateCoalitionOfN(event));\r\n      setCoalitionsFunctionOfCoalitions(Array(2 ** event).fill(0));\r\n      setCoalitionsShapleyValues([]);\r\n      setMessage(undefined);\r\n    } else setMessage(\"Number of coalition members exceded!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (grandCoalition) {\r\n      const newCoalitions = generateCoalitions(grandCoalition);\r\n      newCoalitions[0].unshift(0);\r\n      setCoalitionsCoalitions(newCoalitions);\r\n    }\r\n  }, [grandCoalition, setCoalitionsCoalitions]);\r\n\r\n  const handleForce = (data: any) => {\r\n    const newCoalitions: number[][] = [];\r\n    const newFunctionOfCoalitions: number[] = [];\r\n    let numberOfPlayers = 0;\r\n\r\n    data.forEach((row: number[]) => {\r\n      row.pop();\r\n      const currentCoalition = row.slice(0, -1);\r\n      numberOfPlayers =\r\n        currentCoalition.length > numberOfPlayers\r\n          ? currentCoalition.length\r\n          : numberOfPlayers;\r\n      newCoalitions.push(currentCoalition);\r\n      newFunctionOfCoalitions.push(row.slice(-1).pop() ?? 0);\r\n    });\r\n\r\n    setCoalitionsNumberOfplayers(numberOfPlayers);\r\n    setCoalitionsCoalitions(newCoalitions);\r\n    setCoalitionsFunctionOfCoalitions(newFunctionOfCoalitions);\r\n  };\r\n\r\n  const handleDownloadGameDefinition = () => {\r\n    const gameDefinition: number[][] = coalitions?.map((coalition, index) => {\r\n      return [...coalition, functionOfCoalitions?.[index] ?? 0];\r\n    }) ?? [[0]];\r\n    // gameDefinition[0].unshift(0);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,\" +\r\n      gameDefinition?.map((e) => e.join(\",\") + \",\").join(\"\\n\");\r\n\r\n    window.open(encodeURI(csvContent));\r\n  };\r\n\r\n  const translateToMCNets = () => {\r\n    const newRules: IMCNetsRule[] = [];\r\n    let newNumberOfPlayers = 0;\r\n    functionOfCoalitions?.forEach((value, index) => {\r\n      if (value) {\r\n        const highestPlayerInCoalition = Math.max(\r\n          ...(coalitions?.[index] ?? [])\r\n        );\r\n        newNumberOfPlayers =\r\n          highestPlayerInCoalition > newNumberOfPlayers\r\n            ? highestPlayerInCoalition\r\n            : newNumberOfPlayers;\r\n        newRules.push({\r\n          positivePlayers: coalitions?.[index]?.map(String) ?? [],\r\n          negativePlayers: [],\r\n          value: value,\r\n        });\r\n      }\r\n    });\r\n    setMCNetsNumberOfPlayers(newNumberOfPlayers);\r\n    setMCNetsRules(newRules);\r\n    setActiveTabKey(\"mc-nets\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator-coalition-structures\">\r\n      <NumberOfPlayersForm\r\n        numberOfPlayers={nrOfPlayes}\r\n        maxValue={maxValue}\r\n        message={message}\r\n        handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n      />\r\n      <Row justify=\"center\">\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <CoalitionStructuresInput />\r\n          <div className=\"upload\">\r\n            <CSVReader\r\n              cssClass=\"react-csv-input\"\r\n              label={<span>Upload game definition from .csv file </span>}\r\n              onFileLoaded={handleForce}\r\n              inputName=\"input2\"\r\n              parserOptions={{\r\n                header: false,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"download\">\r\n            <Button onClick={handleDownloadGameDefinition}>\r\n              Download Game Definition\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n        <Col className=\"buttons-col\" xs={24} sm={24} md={24} lg={4} xl={4}>\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={() =>\r\n              setCoalitionsShapleyValues(\r\n                calculateAllShapleyValues(\r\n                  grandCoalition,\r\n                  coalitions ?? [],\r\n                  functionOfCoalitions ?? []\r\n                )\r\n              )\r\n            }\r\n          >\r\n            Generate Shapley Values\r\n          </Button>\r\n          <Button\r\n            disabled={!grandCoalition.length}\r\n            className=\"generate-button\"\r\n            onClick={translateToMCNets}\r\n          >\r\n            Translate to MC Nets\r\n          </Button>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\r\n          <DisplayGeneratedValues listShapleyValues={shapleyValues ?? []} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): CoalitionsGame => {\r\n  const { nrOfPlayes, coalitions, functionOfCoalitions, shapleyValues } =\r\n    state.aplication.coalitions || {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    coalitions: coalitions,\r\n    functionOfCoalitions: functionOfCoalitions,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | number[][] | IMCNetsRule[];\r\n  }) => any\r\n) => {\r\n  return {\r\n    setCoalitionsNumberOfplayers: (nrOfPlayes: number) =>\r\n      dispatch(setCoalitionsNumberOfplayers(nrOfPlayes)),\r\n    setCoalitionsCoalitions: (coalitions: number[][]) =>\r\n      dispatch(setCoalitionsCoalitions(coalitions)),\r\n    setCoalitionsFunctionOfCoalitions: (values: number[]) =>\r\n      dispatch(setCoalitionsFunctionOfCoalitions(values)),\r\n    setCoalitionsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setCoalitionsShapleyValues(shapleyValues)),\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n  };\r\n};\r\nexport const CalculatorCoalitionStructures = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorCoalitionStructuresNotConnected);\r\nexport default CalculatorCoalitionStructures;\r\n","import React from \"react\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { IMCNetsRule, McNetsGame, Store } from \"../../../../type\";\r\n\r\nexport interface IAddMCNetsRuleProps {\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\n\r\nexport const AddMCNetsRuleNotConnected = (\r\n  props: IAddMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { rules, setMCNetsRules } = props;\r\n\r\n  return (\r\n    <div className=\"add-mc-nets-rule\">\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col flex=\"64px\">Add Rule</Col>\r\n        <Col flex=\"40px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() =>\r\n              setMCNetsRules([\r\n                ...(rules ?? []),\r\n                {\r\n                  positivePlayers: [],\r\n                  negativePlayers: [],\r\n                  value: 0,\r\n                },\r\n              ])\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  return {\r\n    rules: state.aplication.mcNets?.rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const AddMCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddMCNetsRuleNotConnected);\r\n\r\nexport default AddMCNetsRule;\r\n","import React from 'react'\r\nimport { Checkbox } from \"antd\"\r\nimport './player-group.css'\r\n\r\ninterface IPlayersGroupprops {\r\n  options: string[]\r\n  value: string[]\r\n  onChange: (checkedValues: any) => void\r\n}\r\n\r\nexport const PlayersGroup = (props: IPlayersGroupprops) => {\r\n  const { options, value, onChange } = props\r\n  return (\r\n    <div className=\"player-group\">\r\n      <Checkbox.Group options={options} value={value} onChange={onChange} style={{ width: `calc(${options.length} * 52px)` }} />\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { MinusOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, InputNumber, Row } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMCNetsRules } from \"../../../../redux/actions\";\r\nimport { generateCoalitionOfN } from \"../../../../utilities/calculation-functions\";\r\nimport \"./mc-nets-rule.css\";\r\nimport { PlayersGroup } from \"./player-group/players-group\";\r\nimport { Store, IMCNetsRule, McNetsGame } from \"../../../../type\";\r\nexport interface IMCNetsRuleProps {\r\n  index: number;\r\n  nrOfPlayes?: number;\r\n  rules?: IMCNetsRule[];\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n}\r\nexport const MCNetsRuleNotConnected = (\r\n  props: IMCNetsRuleProps\r\n): JSX.Element => {\r\n  const { index, nrOfPlayes, rules, setMCNetsRules } = props;\r\n  const onPositiveChange = (checkedValues: string[]) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].positivePlayers = checkedValues;\r\n    tmpRules[index].negativePlayers = tmpRules[index].negativePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n  const onNegativeChange = (checkedValues: any) => {\r\n    const tmpRules = [...(rules ?? [])];\r\n    tmpRules[index].negativePlayers = checkedValues;\r\n    tmpRules[index].positivePlayers = tmpRules[index].positivePlayers.filter(\r\n      (val) => !checkedValues.includes(val)\r\n    );\r\n    setMCNetsRules(tmpRules);\r\n  };\r\n\r\n  const plainOptions = generateCoalitionOfN(nrOfPlayes ?? 0).map(String);\r\n  return (\r\n    <div className=\"mc-nets-rule\">\r\n      <Row align=\"middle\" wrap={false} justify=\"center\">\r\n        <Col flex=\"100px\" className=\"mc-nets-rule-name\">\r\n          {`Rule nr ${index}`}\r\n          <InputNumber\r\n            placeholder=\"Value\"\r\n            onChange={(event) => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules[index].value = event as number;\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n            value={rules?.[index].value}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <div className=\"player-group-name\">Positive Players</div>\r\n          <PlayersGroup\r\n            onChange={onPositiveChange}\r\n            value={rules?.[index].positivePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <div className=\"player-group-name\">Negative Players</div>\r\n          <PlayersGroup\r\n            onChange={onNegativeChange}\r\n            value={rules?.[index].negativePlayers ?? []}\r\n            options={plainOptions}\r\n          />\r\n        </Col>\r\n        <Col flex=\"32px\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            icon={<MinusOutlined />}\r\n            onClick={() => {\r\n              const tmpRules = [...(rules ?? [])];\r\n              tmpRules.splice(index, 1);\r\n              setMCNetsRules(tmpRules);\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: IMCNetsRule[] }) => any\r\n): {\r\n  setMCNetsRules: (rules: IMCNetsRule[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsRules: (rules: IMCNetsRule[]) => dispatch(setMCNetsRules(rules)),\r\n  };\r\n};\r\n\r\nexport const MCNetsRule = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MCNetsRuleNotConnected);\r\n\r\nexport default MCNetsRule;\r\n","import { Button, Col, Collapse, Row } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { calculateMCNetsShapleyValues } from \"../../../utilities/calculation-functions\";\r\nimport DisplayGeneratedValues from \"../../shared-components/display-generated-values\";\r\nimport NumberOfPlayersForm from \"../../shared-components/number-of-players-input\";\r\nimport { AddMCNetsRule } from \"./add-mc-nets-rule/add-mc-nets-rule\";\r\nimport { MCNetsRule } from \"./mc-nets-rule/mc-nets-rule\";\r\nimport \"./calculator-mc-nets.css\";\r\nimport {\r\n  setMCNetsNumberOfPlayers,\r\n  setMCNetsShapleyValues,\r\n} from \"../../../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Store, McNetsGame, IMCNetsRule } from \"../../../type\";\r\n\r\ninterface ICalculatorMCNetsProps extends McNetsGame {\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n}\r\n\r\nexport const CalculatorMCNetsNotConnected = (\r\n  props: ICalculatorMCNetsProps\r\n): JSX.Element => {\r\n  const {\r\n    nrOfPlayes,\r\n    rules,\r\n    shapleyValues,\r\n    setMCNetsNumberOfPlayers,\r\n    setMCNetsShapleyValues,\r\n  } = props;\r\n  const handleNumberOfPlayesChange = (event: number) =>\r\n    setMCNetsNumberOfPlayers(event);\r\n  const [activeKeys, setActiveKeys] = useState<string[]>([\"1\", \"2\"]);\r\n  return (\r\n    <div className=\"calculator-mc-nets\">\r\n      <Collapse\r\n        activeKey={activeKeys}\r\n        onChange={(keys) => setActiveKeys(keys as string[])}\r\n      >\r\n        <Collapse.Panel header=\"Game Definition\" key=\"1\">\r\n          <Row justify=\"center\">\r\n            <Col span={12}>\r\n              <NumberOfPlayersForm\r\n                maxValue={20}\r\n                numberOfPlayers={nrOfPlayes}\r\n                handleNumberOfPlayesChange={handleNumberOfPlayesChange}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <AddMCNetsRule />\r\n            </Col>\r\n          </Row>\r\n\r\n          <div className=\"mc-nets-rules\">\r\n            {rules?.map((_rule, index) => {\r\n              return <MCNetsRule key={index} index={index} />;\r\n            })}\r\n          </div>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"\"\r\n          key=\"2\"\r\n          showArrow={false}\r\n          forceRender={true}\r\n          collapsible=\"disabled\"\r\n          className=\"generate-panel\"\r\n        >\r\n          <Row justify=\"center\" gutter={32}>\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={!nrOfPlayes}\r\n              className=\"generate-button\"\r\n              onClick={() => {\r\n                setMCNetsShapleyValues(\r\n                  calculateMCNetsShapleyValues(rules ?? [], nrOfPlayes ?? 0)\r\n                );\r\n                const tmpActiveKeys = activeKeys.includes(\"3\")\r\n                  ? activeKeys\r\n                  : [...activeKeys, \"3\"];\r\n                setActiveKeys(tmpActiveKeys);\r\n              }}\r\n            >\r\n              Calculate\r\n            </Button>\r\n          </Row>\r\n        </Collapse.Panel>\r\n        <Collapse.Panel\r\n          header=\"Shapley Values\"\r\n          key=\"3\"\r\n          className=\"values-panel\"\r\n        >\r\n          <DisplayGeneratedValues\r\n            listShapleyValues={shapleyValues ?? []}\r\n            tableMaxHeight={200}\r\n          />\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): McNetsGame => {\r\n  const { nrOfPlayes, rules, shapleyValues } = state.aplication.mcNets ?? {};\r\n  return {\r\n    nrOfPlayes: nrOfPlayes,\r\n    rules: rules,\r\n    shapleyValues: shapleyValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: {\r\n    type: string;\r\n    payload: number | number[] | IMCNetsRule[];\r\n  }) => any\r\n): {\r\n  setMCNetsNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setMCNetsShapleyValues: (shapleyValues: number[]) => void;\r\n} => {\r\n  return {\r\n    setMCNetsNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setMCNetsNumberOfPlayers(nrOfPlayes)),\r\n    setMCNetsShapleyValues: (shapleyValues: number[]) =>\r\n      dispatch(setMCNetsShapleyValues(shapleyValues)),\r\n  };\r\n};\r\nexport const CalculatorMCNets = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CalculatorMCNetsNotConnected);\r\n\r\nexport default CalculatorMCNets;\r\n","import React from \"react\";\r\n\r\nexport const NODE_KEY = \"id\";\r\nexport const PLAYER_TYPE = \"player\";\r\nexport const NORMAL_EDGE = \"normalEdge\";\r\nexport const nodeTypes = [PLAYER_TYPE];\r\nexport const edgeTypes = [NORMAL_EDGE];\r\n\r\nconst playerShape = (\r\n  <symbol viewBox=\"0 0 200 200\" id=\"player\">\r\n    <circle cx=\"100\" cy=\"100\" r=\"50\" />\r\n    <g>\r\n      <foreignObject width=\"100%\" height=\"100%\">\r\n        <div>test</div>\r\n      </foreignObject>\r\n    </g>\r\n  </symbol>\r\n);\r\n\r\nconst normalEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"normalEdge\">\r\n    <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nexport const nodeConfig = {\r\n  EdgeTypes: {\r\n    normalEdge: {\r\n      shape: normalEdgeShape,\r\n      shapeId: \"#normalEdge\",\r\n    },\r\n  },\r\n  NodeSubtypes: {},\r\n  NodeTypes: {\r\n    player: {\r\n      shape: playerShape,\r\n      shapeId: \"#player\",\r\n      typeText: \"Player\",\r\n    },\r\n  },\r\n};\r\n","import React, { Component, useRef, useState } from \"react\";\r\nimport { firstMissingPositive } from \"../../../utilities/calculationg-functions\";\r\nimport { GraphView, IEdge, IGraphViewProps, INode } from \"react-digraph\";\r\nimport { nodeConfig, PLAYER_TYPE, NODE_KEY, NORMAL_EDGE } from \"./config\";\r\nimport {\r\n  setGraphNumberOfPlayers,\r\n  setGraphNodes,\r\n  setGraphEdges,\r\n} from \"../../../redux/actions\";\r\nimport { GraphGame, Store } from \"../../../type\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface IGraphProps extends GraphGame {\r\n  valueForEdge: string;\r\n  setGraphNumberOfPlayers: (nrOfPlayes: number) => void;\r\n  setGraphNodes: (nodes: INode[]) => void;\r\n  setGraphEdges: (edges: IEdge[]) => void;\r\n}\r\nexport const GraphNotConnected = (props: IGraphProps) => {\r\n  const {\r\n    valueForEdge,\r\n    nrOfPlayes,\r\n    edges,\r\n    nodes,\r\n    setGraphNumberOfPlayers,\r\n    setGraphEdges,\r\n    setGraphNodes,\r\n  } = props;\r\n  const separatorString = \"-copy-of-\";\r\n  const copyString = \"copied \";\r\n  const [selected, setSelected] = useState<IEdge | INode | null>(null);\r\n  const [copied, setCopied] = useState<IEdge | INode | null>(null);\r\n  const [playersId, setPlayersId] = useState<number>(1);\r\n  const refElement = useRef<Component<IGraphViewProps>>(null);\r\n\r\n  function getNodeIndex(searchNode: { [x: string]: string }): number {\r\n    return nodes\r\n      ? nodes.findIndex((node) => {\r\n          return node[NODE_KEY] === searchNode[NODE_KEY];\r\n        })\r\n      : -1;\r\n  }\r\n\r\n  const getEdgeIndex = (searchEdge: {\r\n    source: string | number;\r\n    target: string | number;\r\n  }): number => {\r\n    return edges\r\n      ? edges.findIndex((edge) => {\r\n          return (\r\n            edge.source === searchEdge.source &&\r\n            edge.target === searchEdge.target\r\n          );\r\n        })\r\n      : -1;\r\n  };\r\n\r\n  const onUpdateNode = (viewNode: INode): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const i = getNodeIndex(viewNode);\r\n    tmpNodes[i] = viewNode;\r\n    setGraphNodes(tmpNodes ?? []);\r\n  };\r\n\r\n  const onSelectNode = (viewNode: INode | null): void => {\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onSelectEdge = (viewEdge: IEdge): void => {\r\n    setSelected(viewEdge);\r\n  };\r\n\r\n  const onCreateNode = (x: number, y: number): void => {\r\n    const tmpNodes = nodes ?? [];\r\n    const playersNumbers = tmpNodes\r\n      .map((element) => element.title.split(copyString).at(-1))\r\n      .filter(String)\r\n      .map(Number);\r\n    const newPlayerNr = firstMissingPositive(playersNumbers);\r\n    const viewNode = {\r\n      id: `${playersId + 1}`,\r\n      title: `${newPlayerNr}`,\r\n      type: PLAYER_TYPE,\r\n      x,\r\n      y,\r\n    };\r\n    tmpNodes.push(viewNode);\r\n    setGraphNumberOfPlayers(newPlayerNr);\r\n    setPlayersId(playersId + 1);\r\n    setGraphNodes(tmpNodes);\r\n    setSelected(viewNode);\r\n  };\r\n\r\n  const onDeleteNode = (\r\n    viewNode: INode,\r\n    _nodeId: number | string,\r\n    nodeArr: INode[]\r\n  ): void => {\r\n    const newEdges = edges?.filter((edge, i) => {\r\n      return (\r\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\r\n      );\r\n    });\r\n    setGraphNumberOfPlayers(nrOfPlayes ? nrOfPlayes - 1 : 0);\r\n    setGraphNodes(nodeArr);\r\n    setGraphEdges(newEdges ?? []);\r\n    setSelected(null);\r\n  };\r\n\r\n  const shouldEdgeBeCreated = (viewEdge: IEdge): boolean => {\r\n    const viewEdgeRealSource = viewEdge.source?.split(separatorString).at(-1);\r\n    const viewEdgeRealTarget = viewEdge.target?.split(separatorString).at(-1);\r\n    const isConnectionDefined = edges?.some((edge) => {\r\n      const edgeSourceRealTitle = edge?.source?.split(separatorString).at(-1);\r\n      const edgeTargetRealTitle = edge?.target?.split(separatorString).at(-1);\r\n      if (\r\n        viewEdgeRealSource === edgeSourceRealTitle &&\r\n        viewEdgeRealTarget === edgeTargetRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n      if (\r\n        viewEdgeRealSource === edgeTargetRealTitle &&\r\n        viewEdgeRealTarget === edgeSourceRealTitle\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    const isSourceCopy = viewEdge.source.includes(separatorString);\r\n    const isTargetOriginal = viewEdgeRealTarget === viewEdgeRealSource;\r\n    const isConnectionValid = !(isSourceCopy && !isTargetOriginal);\r\n    return (\r\n      viewEdge.source !== viewEdge.target &&\r\n      !isConnectionDefined &&\r\n      isConnectionValid\r\n    );\r\n  };\r\n  const onCreateEdge = (sourceViewNode: INode, targetViewNode: INode): void => {\r\n    const viewEdge: IEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      handleText: valueForEdge,\r\n      type: NORMAL_EDGE,\r\n    };\r\n    if (shouldEdgeBeCreated(viewEdge)) {\r\n      setGraphEdges([...(edges ?? []), viewEdge]);\r\n      setSelected(viewEdge);\r\n    }\r\n  };\r\n\r\n  const onSwapEdge = (\r\n    sourceViewNode: INode,\r\n    targetViewNode: INode,\r\n    viewEdge: IEdge\r\n  ): void => {\r\n    const tmpEdges = edges ?? [];\r\n    const i = getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(tmpEdges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    tmpEdges[i] = edge;\r\n    setGraphEdges([...tmpEdges]);\r\n    setSelected(edge);\r\n  };\r\n\r\n  // Called when an edge is deleted\r\n  const onDeleteEdge = (_viewEdge: IEdge, edges: IEdge[]): void => {\r\n    setGraphEdges(edges);\r\n    setSelected(null);\r\n  };\r\n\r\n  const onCopySelected = (): void => {\r\n    if (selected?.source) {\r\n      console.warn(\"Cannot copy selected edges, try selecting a node instead.\");\r\n      return;\r\n    }\r\n    if (selected) {\r\n      const x = selected.x + 20;\r\n      const y = selected.y + 20;\r\n      setCopied({ ...selected, x, y });\r\n    }\r\n  };\r\n\r\n  const onPasteSelected = (): void | null => {\r\n    if (copied) {\r\n      const arrayOfCopies = nodes?.filter((node) => {\r\n        return (\r\n          node.title.split(copyString).at(-1) ===\r\n          copied.title.split(copyString).at(-1)\r\n        );\r\n      });\r\n\r\n      if (arrayOfCopies && arrayOfCopies.length >= 2) {\r\n        console.warn(\"Node already have a copy\");\r\n        return null;\r\n      }\r\n\r\n      const tmpNodes = nodes;\r\n      const newNode = {\r\n        ...copied,\r\n        id: `${playersId + 1}${separatorString}${copied.id}`,\r\n        title: `${copyString}${copied.title}`,\r\n      };\r\n      setGraphNodes([...(tmpNodes ?? []), newNode]);\r\n      setPlayersId(playersId + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"graph\" style={{ height: \"50rem\" }}>\r\n      <GraphView\r\n        showGraphControls={true}\r\n        gridSize=\"100rem\"\r\n        gridDotSize={1}\r\n        ref={refElement}\r\n        nodeKey={NODE_KEY}\r\n        nodes={nodes ?? []}\r\n        edges={edges ?? []}\r\n        selected={selected}\r\n        nodeTypes={nodeConfig.NodeTypes}\r\n        nodeSubtypes={nodeConfig.NodeSubtypes}\r\n        edgeTypes={nodeConfig.NodeTypes}\r\n        onSelectNode={onSelectNode}\r\n        onCreateNode={onCreateNode}\r\n        onUpdateNode={onUpdateNode}\r\n        onDeleteNode={onDeleteNode}\r\n        onSelectEdge={onSelectEdge}\r\n        onCreateEdge={onCreateEdge}\r\n        onSwapEdge={onSwapEdge}\r\n        onDeleteEdge={onDeleteEdge}\r\n        onCopySelected={onCopySelected}\r\n        onPasteSelected={onPasteSelected}\r\n        readOnly={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { aplication: Store }): GraphGame => {\r\n  const { nrOfPlayes, edges, nodes } = state.aplication.graph || {};\r\n  return {\r\n    nrOfPlayes,\r\n    edges,\r\n    nodes,\r\n  };\r\n};\r\nconst mapDispatchToProps = (\r\n  dispatch: (arg0: { type: string; payload: number | IEdge[] | INode[] }) => any\r\n) => {\r\n  return {\r\n    setGraphNumberOfPlayers: (nrOfPlayes: number) =>\r\n      dispatch(setGraphNumberOfPlayers(nrOfPlayes)),\r\n    setGraphEdges: (edges: IEdge[]) => dispatch(setGraphEdges(edges)),\r\n    setGraphNodes: (nodes: INode[]) => dispatch(setGraphNodes(nodes)),\r\n  };\r\n};\r\n\r\nexport const Graph = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GraphNotConnected);\r\n\r\nexport default Graph;\r\n","import _ from \"underscore\";\r\nimport { IMCNetsRule } from \"../type\";\r\n\r\nexport const indexOfArrayInArray = (\r\n  arrayOfArrays: number[][],\r\n  arrayToFind: number[]\r\n): number => {\r\n  let indexOfArray = -1;\r\n  arrayOfArrays.forEach((array, index) => {\r\n    if (_.isEqual(array, arrayToFind)) {\r\n      indexOfArray = index;\r\n    }\r\n  });\r\n  return indexOfArray;\r\n};\r\n\r\nexport const generateCoalitions = (inp: Array<number>) => {\r\n  const length = inp.length;\r\n  const allCoalitions = [];\r\n\r\n  for (let i = 0; i < Math.pow(2, length); i++) {\r\n    const subset = [];\r\n\r\n    for (var j = 0; j < length; j++) {\r\n      if (i & (1 << j)) {\r\n        subset.push(inp[j]);\r\n      }\r\n    }\r\n    allCoalitions.push(subset);\r\n  }\r\n\r\n  return allCoalitions;\r\n};\r\n\r\nexport const factorial = (n: number, r: number = 1) => {\r\n  while (n > 0) r *= n--;\r\n  return r;\r\n};\r\n\r\nexport const coalitionsGenerateShapleyValue = (\r\n  player: number,\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  let shapleyValue = 0;\r\n  coalitions.forEach((coalition: number[]) => {\r\n    if (coalition.includes(player)) {\r\n      const valueOfCoalitionWithPlayer =\r\n        funcOfCoalitions[indexOfArrayInArray(coalitions, coalition)];\r\n      const coalitionWithoutPlayer = [...coalition];\r\n      coalitionWithoutPlayer.splice(coalition.indexOf(player), 1);\r\n      const valueOfCoalitionWithoutPlayer =\r\n        funcOfCoalitions[\r\n          indexOfArrayInArray(coalitions, coalitionWithoutPlayer)\r\n        ];\r\n      const numberOfPermutationsC = factorial(coalitionWithoutPlayer.length);\r\n      const numberOfPermutationsA = factorial(\r\n        players.length - coalitionWithoutPlayer.length - 1\r\n      );\r\n      const contrCount =\r\n        (numberOfPermutationsA * numberOfPermutationsC) /\r\n        factorial(players.length);\r\n      shapleyValue +=\r\n        (valueOfCoalitionWithPlayer - valueOfCoalitionWithoutPlayer) *\r\n        contrCount;\r\n    }\r\n  });\r\n\r\n  return Number(shapleyValue.toFixed(2));\r\n};\r\n\r\nexport const calculateAllShapleyValues = (\r\n  players: number[],\r\n  coalitions: number[][],\r\n  funcOfCoalitions: number[]\r\n) => {\r\n  const shapleyValues: number[] = [];\r\n  players.forEach((player: number) => {\r\n    const playerShapleyValue = coalitionsGenerateShapleyValue(\r\n      player,\r\n      players,\r\n      coalitions,\r\n      funcOfCoalitions\r\n    );\r\n    shapleyValues.push(playerShapleyValue);\r\n  });\r\n  return shapleyValues;\r\n};\r\n\r\nexport const generateCoalitionOfN = (event: number) =>\r\n  Array.from({ length: event }, (v, k) => k + 1);\r\n\r\nexport const calculatePositivePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (value * factorial(positive - 1) * factorial(negative)) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateNegativePlayersMarginalContribution = (\r\n  positive: number,\r\n  negative: number,\r\n  value: number\r\n): number => {\r\n  return (\r\n    (-1 * value * (factorial(negative - 1) * factorial(positive))) /\r\n    factorial(positive + negative)\r\n  );\r\n};\r\n\r\nexport const calculateMCNetsShapleyValues = (\r\n  rules: IMCNetsRule[],\r\n  nrOfPlayers: number\r\n) => {\r\n  const values: number[] = Array(nrOfPlayers).fill(0);\r\n  rules.forEach((rule) => {\r\n    const numberOfPositivePlayers = rule.positivePlayers.length;\r\n    const numberOfNegativePlayers = rule.negativePlayers.length;\r\n    const positivePlayersContribution =\r\n      calculatePositivePlayersMarginalContribution(\r\n        numberOfPositivePlayers,\r\n        numberOfNegativePlayers,\r\n        rule.value\r\n      );\r\n    const negativePlayersContribution =\r\n      calculateNegativePlayersMarginalContribution(\r\n        numberOfNegativePlayers,\r\n        numberOfPositivePlayers,\r\n        rule.value\r\n      );\r\n\r\n    rule.positivePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += positivePlayersContribution;\r\n    });\r\n\r\n    rule.negativePlayers.forEach((player) => {\r\n      values[parseFloat(player) - 1] += negativePlayersContribution;\r\n    });\r\n  });\r\n  return values;\r\n};\r\nexport const firstMissingPositive = (nums: number[]) => {\r\n  let len = nums.length;\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] < 0) nums[i] = 0;\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    let pos = Math.abs(nums[i]) - 1;\r\n    if (pos >= 0 && pos <= len) {\r\n      if (nums[pos] > 0) nums[pos] = -nums[pos];\r\n      if (nums[pos] === 0) nums[pos] = -Infinity;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (nums[i] >= 0) return i + 1;\r\n  }\r\n\r\n  return len + 1;\r\n};\r\n","import React from \"react\";\r\nimport { Form, InputNumber } from \"antd\";\r\ninterface IGraphInputSectionProps {\r\n  valueForEdge: number;\r\n  setValueForEdge: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\nexport const GraphInputSection = (props: IGraphInputSectionProps) => {\r\n  const { valueForEdge, setValueForEdge } = props;\r\n  return (\r\n    <div className=\"graph-input-section\">\r\n      <Form\r\n        labelCol={{ span: 12 }}\r\n        wrapperCol={{ span: 12 }}\r\n        layout=\"horizontal\"\r\n        size=\"middle\"\r\n        className=\"number-of-players-input\"\r\n      >\r\n        <Form.Item\r\n          labelAlign=\"right\"\r\n          label=\"Before creating an edge set it's value\"\r\n        >\r\n          <InputNumber\r\n            value={valueForEdge}\r\n            onChange={(e) => setValueForEdge(e)}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const InformationSection = () => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>To add player, hold shift and click on the grid.</li>\r\n        <li>\r\n          To add edge with value, change the value on the input above, then hold\r\n          shift and click/drag to between players.\r\n        </li>\r\n        <li>To delete a node or edge, click on it and press delete.</li>\r\n        <li>Click and drag nodes to change their position.</li>\r\n        <li>\r\n          To create self edges copy and paste with (Ctrl+C and Ctrl+V) a player\r\n          and create an edge between original and copy.\r\n        </li>\r\n        <li>Note: On Mac computers, use Cmd instead of Ctrl.</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import { Collapse } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Graph from \"./graph\";\r\nimport { GraphInputSection } from \"./graph-input-section\";\r\nimport { InformationSection } from \"./information-section\";\r\n\r\nexport const CalculatorGraph = () => {\r\n  const [valueForEdge, setValueForEdge] = useState(0);\r\n  return (\r\n    <div className=\"calculator-graph\">\r\n      <Collapse>\r\n        <Collapse.Panel header=\"How to use it\" key=\"1\">\r\n          <InformationSection />\r\n        </Collapse.Panel>\r\n        <GraphInputSection\r\n          valueForEdge={valueForEdge}\r\n          setValueForEdge={setValueForEdge}\r\n        />\r\n      </Collapse>\r\n      <Graph valueForEdge={valueForEdge.toString()} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport { CalculatorFunctionDefinition } from \"../../../calculators/calculator-function-definition/calculator-function-definition\";\r\nimport { CalculatorCoalitionStructures } from \"../../../calculators/calculator-coalition-structures/calculator-coalition-structures\";\r\nimport { CalculatorMCNets } from \"../../../calculators/calculator-mc-nets/calculator-mc-nets\";\r\nimport { CalculatorGraph } from \"../../../calculators/calculator-graph/calculator-graph\";\r\n\r\nconst { TabPane } = Tabs;\r\nexport type TabsKeys = \"coalition\" | \"function\" | \"mc-nets\";\r\nexport const AppBody = (): JSX.Element => {\r\n  const [activeTabKey, setActiveTabKey] = useState<TabsKeys>(\"coalition\");\r\n  return (\r\n    <Tabs\r\n      activeKey={activeTabKey}\r\n      onTabClick={(key: string) => setActiveTabKey(key as TabsKeys)}\r\n      centered\r\n    >\r\n      <TabPane tab=\"Coalition structures definition\" key=\"coalition\">\r\n        <CalculatorCoalitionStructures setActiveTabKey={setActiveTabKey} />\r\n      </TabPane>\r\n      <TabPane tab=\"Function generating values\" key=\"function\" disabled>\r\n        <CalculatorFunctionDefinition />\r\n      </TabPane>\r\n      <TabPane tab=\"MC-nets game representation\" key=\"mc-nets\">\r\n        <CalculatorMCNets />\r\n      </TabPane>\r\n      <TabPane tab=\"Graph game representation\" key=\"graph\">\r\n        <CalculatorGraph />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default AppBody;\r\n","import React from 'react'\r\nimport { PageHeader } from 'antd';\r\nimport './app-header.css';\r\n\r\nexport const AppHeader = (): JSX.Element => {\r\n  return <PageHeader\r\n    title=\"Shapley Value Calculator\"\r\n    subTitle=\"Pick your game definition\"\r\n  />\r\n}\r\n\r\nexport default AppHeader\r\n","import { PLAYER_TYPE } from \"../../components/calculators/calculator-graph/config\";\r\nimport { Store } from \"../../type\";\r\nimport ActionTypes from \"../actionTypes\";\r\n\r\nconst initialState: Store = {\r\n  graph: {\r\n    nodes: [\r\n      {\r\n        id: \"1\",\r\n        title: \"1\",\r\n        type: PLAYER_TYPE,\r\n        x: 300,\r\n        y: 300,\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nexport const aplication = (\r\n  state = initialState,\r\n  action: { type: any; payload: any }\r\n): Store => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_COALITIONS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          coalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_FUNCTION_OF_COALITIONS:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          functionOfCoalitions: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_COALITIONS_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        coalitions: {\r\n          ...state.coalitions,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_RULES:\r\n      return {\r\n        ...state,\r\n        mcNets: {\r\n          ...state.mcNets,\r\n          rules: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_MCNETS_SHAPLEY_VALUES:\r\n    case ActionTypes.SET_GRAPH_NUMBER_OF_PLAYERS:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nrOfPlayes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_EDGES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          edges: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_NODES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          nodes: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.SET_GRAPH_SHAPLEY_VALUES:\r\n      return {\r\n        ...state,\r\n        graph: {\r\n          ...state.graph,\r\n          shapleyValues: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default aplication;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport aplication from './aplication';\r\n\r\nexport default combineReducers({ aplication});\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react'\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport AppBody from \"../components/layout/body/app-body/app-body\";\r\nimport AppHeader from \"../components/layout/header/app-header\";\r\nimport store from \"../redux/store\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"app\">\r\n        <AppHeader />\r\n        <AppBody />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}